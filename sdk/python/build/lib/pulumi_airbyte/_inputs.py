# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ConnectionConfigurationsArgs',
    'ConnectionConfigurationsStreamArgs',
    'ConnectionScheduleArgs',
    'DestinationAWSDatalakeConfigurationArgs',
    'DestinationAWSDatalakeConfigurationCredentialsArgs',
    'DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRoleArgs',
    'DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUserArgs',
    'DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRoleArgs',
    'DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUserArgs',
    'DestinationAWSDatalakeConfigurationFormatArgs',
    'DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJsonArgs',
    'DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageArgs',
    'DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJsonArgs',
    'DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorageArgs',
    'DestinationAzurBlobStorageConfigurationArgs',
    'DestinationAzurBlobStorageConfigurationFormatArgs',
    'DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValuesArgs',
    'DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJsonArgs',
    'DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValuesArgs',
    'DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs',
    'DestinationBigqueryConfigurationArgs',
    'DestinationBigqueryConfigurationLoadingMethodArgs',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingArgs',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialArgs',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKeyArgs',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInsertsArgs',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingArgs',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialArgs',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKeyArgs',
    'DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInsertsArgs',
    'DestinationBigqueryDenormalizedConfigurationArgs',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodArgs',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingArgs',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialArgs',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKeyArgs',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInsertsArgs',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingArgs',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialArgs',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKeyArgs',
    'DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInsertsArgs',
    'DestinationClickhouseConfigurationArgs',
    'DestinationClickhouseConfigurationTunnelMethodArgs',
    'DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnelArgs',
    'DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnelArgs',
    'DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationConvexConfigurationArgs',
    'DestinationCumulioConfigurationArgs',
    'DestinationDatabendConfigurationArgs',
    'DestinationDatabricksConfigurationArgs',
    'DestinationDatabricksConfigurationDataSourceArgs',
    'DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3Args',
    'DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorageArgs',
    'DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTablesArgs',
    'DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3Args',
    'DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorageArgs',
    'DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTablesArgs',
    'DestinationDevNullConfigurationArgs',
    'DestinationDevNullConfigurationTestDestinationArgs',
    'DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilentArgs',
    'DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilentArgs',
    'DestinationDynamodbConfigurationArgs',
    'DestinationElasticsearchConfigurationArgs',
    'DestinationElasticsearchConfigurationAuthenticationMethodArgs',
    'DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecretArgs',
    'DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePasswordArgs',
    'DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecretArgs',
    'DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordArgs',
    'DestinationFireboltConfigurationArgs',
    'DestinationFireboltConfigurationLoadingMethodArgs',
    'DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3Args',
    'DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInsertsArgs',
    'DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3Args',
    'DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInsertsArgs',
    'DestinationFirestoreConfigurationArgs',
    'DestinationGcsConfigurationArgs',
    'DestinationGcsConfigurationCredentialArgs',
    'DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKeyArgs',
    'DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKeyArgs',
    'DestinationGcsConfigurationFormatArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2Args',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflateArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappyArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXzArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandardArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs',
    'DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorageArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Args',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflateArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappyArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXzArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandardArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs',
    'DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorageArgs',
    'DestinationGoogleSheetsConfigurationArgs',
    'DestinationGoogleSheetsConfigurationCredentialsArgs',
    'DestinationKeenConfigurationArgs',
    'DestinationKinesisConfigurationArgs',
    'DestinationLangchainConfigurationArgs',
    'DestinationLangchainConfigurationEmbeddingArgs',
    'DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFakeArgs',
    'DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAiArgs',
    'DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFakeArgs',
    'DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAiArgs',
    'DestinationLangchainConfigurationIndexingArgs',
    'DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistanceArgs',
    'DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearchArgs',
    'DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPineconeArgs',
    'DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistanceArgs',
    'DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearchArgs',
    'DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPineconeArgs',
    'DestinationLangchainConfigurationProcessingArgs',
    'DestinationMSsqlConfigurationArgs',
    'DestinationMSsqlConfigurationSslMethodArgs',
    'DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificateArgs',
    'DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificateArgs',
    'DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificateArgs',
    'DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificateArgs',
    'DestinationMSsqlConfigurationTunnelMethodArgs',
    'DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnelArgs',
    'DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnelArgs',
    'DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationMongodbConfigurationArgs',
    'DestinationMongodbConfigurationAuthTypeArgs',
    'DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPasswordArgs',
    'DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNoneArgs',
    'DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPasswordArgs',
    'DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNoneArgs',
    'DestinationMongodbConfigurationInstanceTypeArgs',
    'DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlasArgs',
    'DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSetArgs',
    'DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceArgs',
    'DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlasArgs',
    'DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSetArgs',
    'DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceArgs',
    'DestinationMongodbConfigurationTunnelMethodArgs',
    'DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnelArgs',
    'DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnelArgs',
    'DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationMysqlConfigurationArgs',
    'DestinationMysqlConfigurationTunnelMethodArgs',
    'DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnelArgs',
    'DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnelArgs',
    'DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationOracleConfigurationArgs',
    'DestinationOracleConfigurationTunnelMethodArgs',
    'DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnelArgs',
    'DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnelArgs',
    'DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationPostgresConfigurationArgs',
    'DestinationPostgresConfigurationSslModeArgs',
    'DestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllowArgs',
    'DestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisableArgs',
    'DestinationPostgresConfigurationSslModeDestinationPostgresSslModesPreferArgs',
    'DestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequireArgs',
    'DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCaArgs',
    'DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFullArgs',
    'DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllowArgs',
    'DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisableArgs',
    'DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPreferArgs',
    'DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequireArgs',
    'DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCaArgs',
    'DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFullArgs',
    'DestinationPostgresConfigurationTunnelMethodArgs',
    'DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnelArgs',
    'DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnelArgs',
    'DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationPubsubConfigurationArgs',
    'DestinationRedisConfigurationArgs',
    'DestinationRedisConfigurationSslModeArgs',
    'DestinationRedisConfigurationSslModeDestinationRedisSslModesDisableArgs',
    'DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFullArgs',
    'DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisableArgs',
    'DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFullArgs',
    'DestinationRedisConfigurationTunnelMethodArgs',
    'DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnelArgs',
    'DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnelArgs',
    'DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationRedshiftConfigurationArgs',
    'DestinationRedshiftConfigurationTunnelMethodArgs',
    'DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnelArgs',
    'DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnelArgs',
    'DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationRedshiftConfigurationUploadingMethodArgs',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingArgs',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionArgs',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionArgs',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryptionArgs',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandardArgs',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingArgs',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionArgs',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionArgs',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryptionArgs',
    'DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandardArgs',
    'DestinationS3ConfigurationArgs',
    'DestinationS3ConfigurationFormatArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2Args',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflateArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappyArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXzArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandardArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzipArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs',
    'DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorageArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Args',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflateArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappyArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXzArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandardArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs',
    'DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorageArgs',
    'DestinationS3GlueConfigurationArgs',
    'DestinationS3GlueConfigurationFormatArgs',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonArgs',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs',
    'DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs',
    'DestinationSftpJsonConfigurationArgs',
    'DestinationSnowflakeConfigurationArgs',
    'DestinationSnowflakeConfigurationCredentialsArgs',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationArgs',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Args',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordArgs',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationArgs',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Args',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs',
    'DestinationTimeplusConfigurationArgs',
    'DestinationTypesenseConfigurationArgs',
    'DestinationVerticaConfigurationArgs',
    'DestinationVerticaConfigurationTunnelMethodArgs',
    'DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnelArgs',
    'DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnelArgs',
    'DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'DestinationXataConfigurationArgs',
    'SourceAhaConfigurationArgs',
    'SourceAircallConfigurationArgs',
    'SourceAirtableConfigurationArgs',
    'SourceAirtableConfigurationCredentialsArgs',
    'SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20Args',
    'SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessTokenArgs',
    'SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20Args',
    'SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessTokenArgs',
    'SourceAlloydbConfigurationArgs',
    'SourceAlloydbConfigurationReplicationMethodArgs',
    'SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdcArgs',
    'SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardArgs',
    'SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXminArgs',
    'SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdcArgs',
    'SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardArgs',
    'SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXminArgs',
    'SourceAlloydbConfigurationSslModeArgs',
    'SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllowArgs',
    'SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisableArgs',
    'SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPreferArgs',
    'SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequireArgs',
    'SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCaArgs',
    'SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFullArgs',
    'SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllowArgs',
    'SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisableArgs',
    'SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPreferArgs',
    'SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequireArgs',
    'SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCaArgs',
    'SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFullArgs',
    'SourceAlloydbConfigurationTunnelMethodArgs',
    'SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnelArgs',
    'SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthenticationArgs',
    'SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthenticationArgs',
    'SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnelArgs',
    'SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'SourceAmazonAdsConfigurationArgs',
    'SourceAmazonSellerPartnerConfigurationArgs',
    'SourceAmazonSqsConfigurationArgs',
    'SourceAmplitudeConfigurationArgs',
    'SourceApifyDatasetConfigurationArgs',
    'SourceAppfollowConfigurationArgs',
    'SourceAsanaConfigurationArgs',
    'SourceAsanaConfigurationCredentialsArgs',
    'SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthArgs',
    'SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs',
    'SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauthArgs',
    'SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs',
    'SourceAuth0ConfigurationArgs',
    'SourceAuth0ConfigurationCredentialsArgs',
    'SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessTokenArgs',
    'SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplicationArgs',
    'SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenArgs',
    'SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationArgs',
    'SourceAwsCloudtrailConfigurationArgs',
    'SourceAzureBlobStorageConfigurationArgs',
    'SourceAzureBlobStorageConfigurationFormatArgs',
    'SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJsonArgs',
    'SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJsonArgs',
    'SourceAzureTableConfigurationArgs',
    'SourceBambooHrConfigurationArgs',
    'SourceBigcommerceConfigurationArgs',
    'SourceBigqueryConfigurationArgs',
    'SourceBingAdsConfigurationArgs',
    'SourceBraintreeConfigurationArgs',
    'SourceBrazeConfigurationArgs',
    'SourceChargebeeConfigurationArgs',
    'SourceChartmogulConfigurationArgs',
    'SourceClickhouseConfigurationArgs',
    'SourceClickhouseConfigurationTunnelMethodArgs',
    'SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnelArgs',
    'SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthenticationArgs',
    'SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthenticationArgs',
    'SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnelArgs',
    'SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'SourceClickupApiConfigurationArgs',
    'SourceClockifyConfigurationArgs',
    'SourceCloseComConfigurationArgs',
    'SourceCodaConfigurationArgs',
    'SourceCoinApiConfigurationArgs',
    'SourceCoinmarketcapConfigurationArgs',
    'SourceConfigcatConfigurationArgs',
    'SourceConfluenceConfigurationArgs',
    'SourceConvexConfigurationArgs',
    'SourceDatadogConfigurationArgs',
    'SourceDatadogConfigurationQueryArgs',
    'SourceDatascopeConfigurationArgs',
    'SourceDelightedConfigurationArgs',
    'SourceDixaConfigurationArgs',
    'SourceDockerhubConfigurationArgs',
    'SourceDremioConfigurationArgs',
    'SourceDynamodbConfigurationArgs',
    'SourceE2eTestCloudConfigurationArgs',
    'SourceE2eTestCloudConfigurationMockCatalogArgs',
    'SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchemaArgs',
    'SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchemaArgs',
    'SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchemaArgs',
    'SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchemaArgs',
    'SourceEmailoctopusConfigurationArgs',
    'SourceExchangeRatesConfigurationArgs',
    'SourceFacebookMarketingConfigurationArgs',
    'SourceFacebookMarketingConfigurationCustomInsightArgs',
    'SourceFacebookPagesConfigurationArgs',
    'SourceFakerConfigurationArgs',
    'SourceFaunaConfigurationArgs',
    'SourceFaunaConfigurationCollectionArgs',
    'SourceFaunaConfigurationCollectionDeletionsArgs',
    'SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabledArgs',
    'SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabledArgs',
    'SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabledArgs',
    'SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabledArgs',
    'SourceFileSecureConfigurationArgs',
    'SourceFileSecureConfigurationProviderArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorageArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorageArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWebArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServicesArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocolArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocolArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShellArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorageArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorageArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWebArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServicesArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocolArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocolArgs',
    'SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShellArgs',
    'SourceFireboltConfigurationArgs',
    'SourceFreshcallerConfigurationArgs',
    'SourceFreshdeskConfigurationArgs',
    'SourceFreshsalesConfigurationArgs',
    'SourceGainsightPxConfigurationArgs',
    'SourceGcsConfigurationArgs',
    'SourceGetlagoConfigurationArgs',
    'SourceGithubConfigurationArgs',
    'SourceGithubConfigurationCredentialsArgs',
    'SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuthArgs',
    'SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessTokenArgs',
    'SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuthArgs',
    'SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessTokenArgs',
    'SourceGitlabConfigurationArgs',
    'SourceGitlabConfigurationCredentialsArgs',
    'SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20Args',
    'SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateTokenArgs',
    'SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20Args',
    'SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateTokenArgs',
    'SourceGlassfrogConfigurationArgs',
    'SourceGnewsConfigurationArgs',
    'SourceGoogleAdsConfigurationArgs',
    'SourceGoogleAdsConfigurationCredentialsArgs',
    'SourceGoogleAdsConfigurationCustomQueryArgs',
    'SourceGoogleAnalyticsDataApiConfigurationArgs',
    'SourceGoogleAnalyticsDataApiConfigurationCredentialsArgs',
    'SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauthArgs',
    'SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthenticationArgs',
    'SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauthArgs',
    'SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthenticationArgs',
    'SourceGoogleAnalyticsV4ConfigurationArgs',
    'SourceGoogleAnalyticsV4ConfigurationCredentialsArgs',
    'SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthArgs',
    'SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationArgs',
    'SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthArgs',
    'SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationArgs',
    'SourceGoogleDirectoryConfigurationArgs',
    'SourceGoogleDirectoryConfigurationCredentialsArgs',
    'SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKeyArgs',
    'SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuthArgs',
    'SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyArgs',
    'SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthArgs',
    'SourceGooglePagespeedInsightsConfigurationArgs',
    'SourceGoogleSearchConsoleConfigurationArgs',
    'SourceGoogleSearchConsoleConfigurationAuthorizationArgs',
    'SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuthArgs',
    'SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationArgs',
    'SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthArgs',
    'SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationArgs',
    'SourceGoogleSheetsConfigurationArgs',
    'SourceGoogleSheetsConfigurationCredentialsArgs',
    'SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuthArgs',
    'SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthenticationArgs',
    'SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthArgs',
    'SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationArgs',
    'SourceGoogleWebfontsConfigurationArgs',
    'SourceGoogleWorkspaceAdminReportsConfigurationArgs',
    'SourceGreenhouseConfigurationArgs',
    'SourceGridlyConfigurationArgs',
    'SourceHarvestConfigurationArgs',
    'SourceHarvestConfigurationCredentialsArgs',
    'SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthArgs',
    'SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs',
    'SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthArgs',
    'SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs',
    'SourceHubplannerConfigurationArgs',
    'SourceHubspotConfigurationArgs',
    'SourceHubspotConfigurationCredentialsArgs',
    'SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuthArgs',
    'SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateAppArgs',
    'SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuthArgs',
    'SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateAppArgs',
    'SourceInsightlyConfigurationArgs',
    'SourceInstagramConfigurationArgs',
    'SourceInstatusConfigurationArgs',
    'SourceIntercomConfigurationArgs',
    'SourceIp2whoisConfigurationArgs',
    'SourceIterableConfigurationArgs',
    'SourceJiraConfigurationArgs',
    'SourceK6CloudConfigurationArgs',
    'SourceKlarnaConfigurationArgs',
    'SourceKlaviyoConfigurationArgs',
    'SourceKustomerSingerConfigurationArgs',
    'SourceKyveConfigurationArgs',
    'SourceLaunchdarklyConfigurationArgs',
    'SourceLemlistConfigurationArgs',
    'SourceLeverHiringConfigurationArgs',
    'SourceLeverHiringConfigurationCredentialsArgs',
    'SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKeyArgs',
    'SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthArgs',
    'SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKeyArgs',
    'SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthArgs',
    'SourceLinkedinAdsConfigurationArgs',
    'SourceLinkedinAdsConfigurationAdAnalyticsReportArgs',
    'SourceLinkedinAdsConfigurationCredentialsArgs',
    'SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessTokenArgs',
    'SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20Args',
    'SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessTokenArgs',
    'SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20Args',
    'SourceLinkedinPagesConfigurationArgs',
    'SourceLinkedinPagesConfigurationCredentialsArgs',
    'SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessTokenArgs',
    'SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20Args',
    'SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessTokenArgs',
    'SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20Args',
    'SourceLinnworksConfigurationArgs',
    'SourceLokaliseConfigurationArgs',
    'SourceMailchimpConfigurationArgs',
    'SourceMailchimpConfigurationCredentialsArgs',
    'SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKeyArgs',
    'SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20Args',
    'SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKeyArgs',
    'SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20Args',
    'SourceMailgunConfigurationArgs',
    'SourceMailjetSmsConfigurationArgs',
    'SourceMarketoConfigurationArgs',
    'SourceMetabaseConfigurationArgs',
    'SourceMicrosoftTeamsConfigurationArgs',
    'SourceMicrosoftTeamsConfigurationCredentialsArgs',
    'SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftArgs',
    'SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Args',
    'SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftArgs',
    'SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Args',
    'SourceMixpanelConfigurationArgs',
    'SourceMixpanelConfigurationCredentialsArgs',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretArgs',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountArgs',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretArgs',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountArgs',
    'SourceMondayConfigurationArgs',
    'SourceMondayConfigurationCredentialsArgs',
    'SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiTokenArgs',
    'SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20Args',
    'SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiTokenArgs',
    'SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20Args',
    'SourceMongodbConfigurationArgs',
    'SourceMongodbConfigurationInstanceTypeArgs',
    'SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlasArgs',
    'SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSetArgs',
    'SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceArgs',
    'SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlasArgs',
    'SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSetArgs',
    'SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceArgs',
    'SourceMongodbInternalPocConfigurationArgs',
    'SourceMssqlConfigurationArgs',
    'SourceMssqlConfigurationReplicationMethodArgs',
    'SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdcArgs',
    'SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandardArgs',
    'SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdcArgs',
    'SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandardArgs',
    'SourceMssqlConfigurationSslMethodArgs',
    'SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificateArgs',
    'SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificateArgs',
    'SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificateArgs',
    'SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificateArgs',
    'SourceMssqlConfigurationTunnelMethodArgs',
    'SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnelArgs',
    'SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthenticationArgs',
    'SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthenticationArgs',
    'SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnelArgs',
    'SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'SourceMyHoursConfigurationArgs',
    'SourceMysqlConfigurationArgs',
    'SourceMysqlConfigurationReplicationMethodArgs',
    'SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdcArgs',
    'SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursorArgs',
    'SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdcArgs',
    'SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursorArgs',
    'SourceMysqlConfigurationSslModeArgs',
    'SourceMysqlConfigurationSslModeSourceMysqlSslModesPreferredArgs',
    'SourceMysqlConfigurationSslModeSourceMysqlSslModesRequiredArgs',
    'SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCaArgs',
    'SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentityArgs',
    'SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferredArgs',
    'SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequiredArgs',
    'SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCaArgs',
    'SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentityArgs',
    'SourceMysqlConfigurationTunnelMethodArgs',
    'SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnelArgs',
    'SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthenticationArgs',
    'SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthenticationArgs',
    'SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnelArgs',
    'SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'SourceNetsuiteConfigurationArgs',
    'SourceNotionConfigurationArgs',
    'SourceNotionConfigurationCredentialsArgs',
    'SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessTokenArgs',
    'SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20Args',
    'SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessTokenArgs',
    'SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20Args',
    'SourceNytimesConfigurationArgs',
    'SourceOktaConfigurationArgs',
    'SourceOktaConfigurationCredentialsArgs',
    'SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiTokenArgs',
    'SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20Args',
    'SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiTokenArgs',
    'SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20Args',
    'SourceOmnisendConfigurationArgs',
    'SourceOnesignalConfigurationArgs',
    'SourceOnesignalConfigurationApplicationArgs',
    'SourceOpenweatherConfigurationArgs',
    'SourceOracleConfigurationArgs',
    'SourceOracleConfigurationConnectionDataArgs',
    'SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceNameArgs',
    'SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSidArgs',
    'SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceNameArgs',
    'SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSidArgs',
    'SourceOracleConfigurationEncryptionArgs',
    'SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNneArgs',
    'SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificateArgs',
    'SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNneArgs',
    'SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificateArgs',
    'SourceOracleConfigurationTunnelMethodArgs',
    'SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnelArgs',
    'SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthenticationArgs',
    'SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthenticationArgs',
    'SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnelArgs',
    'SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'SourceOrbConfigurationArgs',
    'SourceOrbitConfigurationArgs',
    'SourceOutbrainAmplifyConfigurationArgs',
    'SourceOutbrainAmplifyConfigurationCredentialsArgs',
    'SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessTokenArgs',
    'SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePasswordArgs',
    'SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenArgs',
    'SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordArgs',
    'SourceOutreachConfigurationArgs',
    'SourcePaypalTransactionConfigurationArgs',
    'SourcePaystackConfigurationArgs',
    'SourcePendoConfigurationArgs',
    'SourcePersistiqConfigurationArgs',
    'SourcePexelsApiConfigurationArgs',
    'SourcePinterestConfigurationArgs',
    'SourcePinterestConfigurationCredentialsArgs',
    'SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessTokenArgs',
    'SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20Args',
    'SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessTokenArgs',
    'SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20Args',
    'SourcePipedriveConfigurationArgs',
    'SourcePipedriveConfigurationAuthorizationArgs',
    'SourcePocketConfigurationArgs',
    'SourcePokeapiConfigurationArgs',
    'SourcePolygonStockApiConfigurationArgs',
    'SourcePostgresConfigurationArgs',
    'SourcePostgresConfigurationReplicationMethodArgs',
    'SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdcArgs',
    'SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardArgs',
    'SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXminArgs',
    'SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdcArgs',
    'SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardArgs',
    'SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXminArgs',
    'SourcePostgresConfigurationSslModeArgs',
    'SourcePostgresConfigurationSslModeSourcePostgresSslModesAllowArgs',
    'SourcePostgresConfigurationSslModeSourcePostgresSslModesDisableArgs',
    'SourcePostgresConfigurationSslModeSourcePostgresSslModesPreferArgs',
    'SourcePostgresConfigurationSslModeSourcePostgresSslModesRequireArgs',
    'SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCaArgs',
    'SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFullArgs',
    'SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllowArgs',
    'SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisableArgs',
    'SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPreferArgs',
    'SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequireArgs',
    'SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCaArgs',
    'SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFullArgs',
    'SourcePostgresConfigurationTunnelMethodArgs',
    'SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnelArgs',
    'SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthenticationArgs',
    'SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthenticationArgs',
    'SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnelArgs',
    'SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthenticationArgs',
    'SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthenticationArgs',
    'SourcePosthogConfigurationArgs',
    'SourcePostmarkappConfigurationArgs',
    'SourcePrestashopConfigurationArgs',
    'SourcePublicApisConfigurationArgs',
    'SourcePunkApiConfigurationArgs',
    'SourcePypiConfigurationArgs',
    'SourceQualarooConfigurationArgs',
    'SourceQuickbooksConfigurationArgs',
    'SourceQuickbooksConfigurationCredentialsArgs',
    'SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20Args',
    'SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20Args',
    'SourceRailzConfigurationArgs',
    'SourceRechargeConfigurationArgs',
    'SourceRecreationConfigurationArgs',
    'SourceRecruiteeConfigurationArgs',
    'SourceRecurlyConfigurationArgs',
    'SourceRedshiftConfigurationArgs',
    'SourceRetentlyConfigurationArgs',
    'SourceRetentlyConfigurationCredentialsArgs',
    'SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthArgs',
    'SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiTokenArgs',
    'SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthArgs',
    'SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiTokenArgs',
    'SourceRkiCovidConfigurationArgs',
    'SourceRssConfigurationArgs',
    'SourceS3ConfigurationArgs',
    'SourceS3ConfigurationFormatArgs',
    'SourceS3ConfigurationFormatSourceS3FileFormatAvroArgs',
    'SourceS3ConfigurationFormatSourceS3FileFormatCsvArgs',
    'SourceS3ConfigurationFormatSourceS3FileFormatJsonlArgs',
    'SourceS3ConfigurationFormatSourceS3FileFormatParquetArgs',
    'SourceS3ConfigurationFormatSourceS3UpdateFileFormatAvroArgs',
    'SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsvArgs',
    'SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonlArgs',
    'SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquetArgs',
    'SourceS3ConfigurationProviderArgs',
    'SourceSalesforceConfigurationArgs',
    'SourceSalesforceConfigurationStreamsCriteriaArgs',
    'SourceSalesloftConfigurationArgs',
    'SourceSalesloftConfigurationCredentialsArgs',
    'SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKeyArgs',
    'SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuthArgs',
    'SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKeyArgs',
    'SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuthArgs',
    'SourceSapFieldglassConfigurationArgs',
    'SourceSecodaConfigurationArgs',
    'SourceSendgridConfigurationArgs',
    'SourceSendinblueConfigurationArgs',
    'SourceSenseforceConfigurationArgs',
    'SourceSentryConfigurationArgs',
    'SourceSftpBulkConfigurationArgs',
    'SourceSftpConfigurationArgs',
    'SourceSftpConfigurationCredentialsArgs',
    'SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthenticationArgs',
    'SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthenticationArgs',
    'SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthenticationArgs',
    'SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthenticationArgs',
    'SourceShopifyConfigurationArgs',
    'SourceShopifyConfigurationCredentialsArgs',
    'SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPasswordArgs',
    'SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20Args',
    'SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPasswordArgs',
    'SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20Args',
    'SourceShortioConfigurationArgs',
    'SourceSlackConfigurationArgs',
    'SourceSlackConfigurationCredentialsArgs',
    'SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiTokenArgs',
    'SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuthArgs',
    'SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiTokenArgs',
    'SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthArgs',
    'SourceSmailyConfigurationArgs',
    'SourceSmartengageConfigurationArgs',
    'SourceSmartsheetsConfigurationArgs',
    'SourceSmartsheetsConfigurationCredentialsArgs',
    'SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessTokenArgs',
    'SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20Args',
    'SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessTokenArgs',
    'SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20Args',
    'SourceSnapchatMarketingConfigurationArgs',
    'SourceSnowflakeConfigurationArgs',
    'SourceSnowflakeConfigurationCredentialsArgs',
    'SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20Args',
    'SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPasswordArgs',
    'SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20Args',
    'SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs',
    'SourceSonarCloudConfigurationArgs',
    'SourceSpaceXApiConfigurationArgs',
    'SourceSquareConfigurationArgs',
    'SourceSquareConfigurationCredentialsArgs',
    'SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKeyArgs',
    'SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthenticationArgs',
    'SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKeyArgs',
    'SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthenticationArgs',
    'SourceStravaConfigurationArgs',
    'SourceStripeConfigurationArgs',
    'SourceSurveySparrowConfigurationArgs',
    'SourceSurveySparrowConfigurationRegionArgs',
    'SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccountArgs',
    'SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccountArgs',
    'SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccountArgs',
    'SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccountArgs',
    'SourceSurveymonkeyConfigurationArgs',
    'SourceSurveymonkeyConfigurationCredentialsArgs',
    'SourceTempoConfigurationArgs',
    'SourceTheGuardianApiConfigurationArgs',
    'SourceTiktokMarketingConfigurationArgs',
    'SourceTiktokMarketingConfigurationCredentialsArgs',
    'SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20Args',
    'SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessTokenArgs',
    'SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20Args',
    'SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenArgs',
    'SourceTodoistConfigurationArgs',
    'SourceTrelloConfigurationArgs',
    'SourceTrustpilotConfigurationArgs',
    'SourceTrustpilotConfigurationCredentialsArgs',
    'SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKeyArgs',
    'SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20Args',
    'SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKeyArgs',
    'SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20Args',
    'SourceTvmazeScheduleConfigurationArgs',
    'SourceTwilioConfigurationArgs',
    'SourceTwilioTaskrouterConfigurationArgs',
    'SourceTwitterConfigurationArgs',
    'SourceTypeformConfigurationArgs',
    'SourceTypeformConfigurationCredentialsArgs',
    'SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20Args',
    'SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateTokenArgs',
    'SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20Args',
    'SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateTokenArgs',
    'SourceUsCensusConfigurationArgs',
    'SourceVantageConfigurationArgs',
    'SourceWebflowConfigurationArgs',
    'SourceWhiskyHunterConfigurationArgs',
    'SourceWikipediaPageviewsConfigurationArgs',
    'SourceWoocommerceConfigurationArgs',
    'SourceXeroConfigurationArgs',
    'SourceXeroConfigurationAuthenticationArgs',
    'SourceXkcdConfigurationArgs',
    'SourceYandexMetricaConfigurationArgs',
    'SourceYotpoConfigurationArgs',
    'SourceYouniumConfigurationArgs',
    'SourceYoutubeAnalyticsConfigurationArgs',
    'SourceYoutubeAnalyticsConfigurationCredentialsArgs',
    'SourceZendeskChatConfigurationArgs',
    'SourceZendeskChatConfigurationCredentialsArgs',
    'SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessTokenArgs',
    'SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20Args',
    'SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessTokenArgs',
    'SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20Args',
    'SourceZendeskSunshineConfigurationArgs',
    'SourceZendeskSunshineConfigurationCredentialsArgs',
    'SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiTokenArgs',
    'SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20Args',
    'SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiTokenArgs',
    'SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20Args',
    'SourceZendeskSupportConfigurationArgs',
    'SourceZendeskSupportConfigurationCredentialsArgs',
    'SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiTokenArgs',
    'SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20Args',
    'SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiTokenArgs',
    'SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20Args',
    'SourceZendeskTalkConfigurationArgs',
    'SourceZendeskTalkConfigurationCredentialsArgs',
    'SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiTokenArgs',
    'SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20Args',
    'SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiTokenArgs',
    'SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20Args',
    'SourceZenloopConfigurationArgs',
    'SourceZohoCrmConfigurationArgs',
    'SourceZoomConfigurationArgs',
    'SourceZuoraConfigurationArgs',
]

@pulumi.input_type
class ConnectionConfigurationsArgs:
    def __init__(__self__, *,
                 streams: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConfigurationsStreamArgs']]]] = None):
        if streams is not None:
            pulumi.set(__self__, "streams", streams)

    @property
    @pulumi.getter
    def streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConfigurationsStreamArgs']]]]:
        return pulumi.get(self, "streams")

    @streams.setter
    def streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConfigurationsStreamArgs']]]]):
        pulumi.set(self, "streams", value)


@pulumi.input_type
class ConnectionConfigurationsStreamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 cursor_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 primary_keys: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 sync_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if cursor_fields is not None:
            pulumi.set(__self__, "cursor_fields", cursor_fields)
        if primary_keys is not None:
            pulumi.set(__self__, "primary_keys", primary_keys)
        if sync_mode is not None:
            pulumi.set(__self__, "sync_mode", sync_mode)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="cursorFields")
    def cursor_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cursor_fields")

    @cursor_fields.setter
    def cursor_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cursor_fields", value)

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        return pulumi.get(self, "primary_keys")

    @primary_keys.setter
    def primary_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "primary_keys", value)

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_mode")

    @sync_mode.setter
    def sync_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_mode", value)


@pulumi.input_type
class ConnectionScheduleArgs:
    def __init__(__self__, *,
                 schedule_type: pulumi.Input[str],
                 basic_timing: Optional[pulumi.Input[str]] = None,
                 cron_expression: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "schedule_type", schedule_type)
        if basic_timing is not None:
            pulumi.set(__self__, "basic_timing", basic_timing)
        if cron_expression is not None:
            pulumi.set(__self__, "cron_expression", cron_expression)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schedule_type")

    @schedule_type.setter
    def schedule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_type", value)

    @property
    @pulumi.getter(name="basicTiming")
    def basic_timing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_timing")

    @basic_timing.setter
    def basic_timing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_timing", value)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cron_expression")

    @cron_expression.setter
    def cron_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cron_expression", value)


@pulumi.input_type
class DestinationAWSDatalakeConfigurationArgs:
    def __init__(__self__, *,
                 bucket_name: pulumi.Input[str],
                 credentials: pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsArgs'],
                 destination_type: pulumi.Input[str],
                 lakeformation_database_name: pulumi.Input[str],
                 region: pulumi.Input[str],
                 aws_account_id: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 format: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatArgs']] = None,
                 glue_catalog_float_as_decimal: Optional[pulumi.Input[bool]] = None,
                 lakeformation_database_default_tag_key: Optional[pulumi.Input[str]] = None,
                 lakeformation_database_default_tag_values: Optional[pulumi.Input[str]] = None,
                 lakeformation_governed_tables: Optional[pulumi.Input[bool]] = None,
                 partitioning: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "lakeformation_database_name", lakeformation_database_name)
        pulumi.set(__self__, "region", region)
        if aws_account_id is not None:
            pulumi.set(__self__, "aws_account_id", aws_account_id)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if glue_catalog_float_as_decimal is not None:
            pulumi.set(__self__, "glue_catalog_float_as_decimal", glue_catalog_float_as_decimal)
        if lakeformation_database_default_tag_key is not None:
            pulumi.set(__self__, "lakeformation_database_default_tag_key", lakeformation_database_default_tag_key)
        if lakeformation_database_default_tag_values is not None:
            pulumi.set(__self__, "lakeformation_database_default_tag_values", lakeformation_database_default_tag_values)
        if lakeformation_governed_tables is not None:
            pulumi.set(__self__, "lakeformation_governed_tables", lakeformation_governed_tables)
        if partitioning is not None:
            pulumi.set(__self__, "partitioning", partitioning)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket_name")

    @bucket_name.setter
    def bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket_name", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="lakeformationDatabaseName")
    def lakeformation_database_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lakeformation_database_name")

    @lakeformation_database_name.setter
    def lakeformation_database_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "lakeformation_database_name", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="awsAccountId")
    def aws_account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_account_id")

    @aws_account_id.setter
    def aws_account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_account_id", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatArgs']]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatArgs']]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="glueCatalogFloatAsDecimal")
    def glue_catalog_float_as_decimal(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "glue_catalog_float_as_decimal")

    @glue_catalog_float_as_decimal.setter
    def glue_catalog_float_as_decimal(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "glue_catalog_float_as_decimal", value)

    @property
    @pulumi.getter(name="lakeformationDatabaseDefaultTagKey")
    def lakeformation_database_default_tag_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lakeformation_database_default_tag_key")

    @lakeformation_database_default_tag_key.setter
    def lakeformation_database_default_tag_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lakeformation_database_default_tag_key", value)

    @property
    @pulumi.getter(name="lakeformationDatabaseDefaultTagValues")
    def lakeformation_database_default_tag_values(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lakeformation_database_default_tag_values")

    @lakeformation_database_default_tag_values.setter
    def lakeformation_database_default_tag_values(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lakeformation_database_default_tag_values", value)

    @property
    @pulumi.getter(name="lakeformationGovernedTables")
    def lakeformation_governed_tables(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "lakeformation_governed_tables")

    @lakeformation_governed_tables.setter
    def lakeformation_governed_tables(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "lakeformation_governed_tables", value)

    @property
    @pulumi.getter
    def partitioning(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "partitioning")

    @partitioning.setter
    def partitioning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "partitioning", value)


@pulumi.input_type
class DestinationAWSDatalakeConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 destination_aws_datalake_authentication_mode_iam_role: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRoleArgs']] = None,
                 destination_aws_datalake_authentication_mode_iam_user: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUserArgs']] = None,
                 destination_aws_datalake_update_authentication_mode_iam_role: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRoleArgs']] = None,
                 destination_aws_datalake_update_authentication_mode_iam_user: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUserArgs']] = None):
        if destination_aws_datalake_authentication_mode_iam_role is not None:
            pulumi.set(__self__, "destination_aws_datalake_authentication_mode_iam_role", destination_aws_datalake_authentication_mode_iam_role)
        if destination_aws_datalake_authentication_mode_iam_user is not None:
            pulumi.set(__self__, "destination_aws_datalake_authentication_mode_iam_user", destination_aws_datalake_authentication_mode_iam_user)
        if destination_aws_datalake_update_authentication_mode_iam_role is not None:
            pulumi.set(__self__, "destination_aws_datalake_update_authentication_mode_iam_role", destination_aws_datalake_update_authentication_mode_iam_role)
        if destination_aws_datalake_update_authentication_mode_iam_user is not None:
            pulumi.set(__self__, "destination_aws_datalake_update_authentication_mode_iam_user", destination_aws_datalake_update_authentication_mode_iam_user)

    @property
    @pulumi.getter(name="destinationAwsDatalakeAuthenticationModeIamRole")
    def destination_aws_datalake_authentication_mode_iam_role(self) -> Optional[pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRoleArgs']]:
        return pulumi.get(self, "destination_aws_datalake_authentication_mode_iam_role")

    @destination_aws_datalake_authentication_mode_iam_role.setter
    def destination_aws_datalake_authentication_mode_iam_role(self, value: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRoleArgs']]):
        pulumi.set(self, "destination_aws_datalake_authentication_mode_iam_role", value)

    @property
    @pulumi.getter(name="destinationAwsDatalakeAuthenticationModeIamUser")
    def destination_aws_datalake_authentication_mode_iam_user(self) -> Optional[pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUserArgs']]:
        return pulumi.get(self, "destination_aws_datalake_authentication_mode_iam_user")

    @destination_aws_datalake_authentication_mode_iam_user.setter
    def destination_aws_datalake_authentication_mode_iam_user(self, value: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUserArgs']]):
        pulumi.set(self, "destination_aws_datalake_authentication_mode_iam_user", value)

    @property
    @pulumi.getter(name="destinationAwsDatalakeUpdateAuthenticationModeIamRole")
    def destination_aws_datalake_update_authentication_mode_iam_role(self) -> Optional[pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRoleArgs']]:
        return pulumi.get(self, "destination_aws_datalake_update_authentication_mode_iam_role")

    @destination_aws_datalake_update_authentication_mode_iam_role.setter
    def destination_aws_datalake_update_authentication_mode_iam_role(self, value: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRoleArgs']]):
        pulumi.set(self, "destination_aws_datalake_update_authentication_mode_iam_role", value)

    @property
    @pulumi.getter(name="destinationAwsDatalakeUpdateAuthenticationModeIamUser")
    def destination_aws_datalake_update_authentication_mode_iam_user(self) -> Optional[pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUserArgs']]:
        return pulumi.get(self, "destination_aws_datalake_update_authentication_mode_iam_user")

    @destination_aws_datalake_update_authentication_mode_iam_user.setter
    def destination_aws_datalake_update_authentication_mode_iam_user(self, value: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUserArgs']]):
        pulumi.set(self, "destination_aws_datalake_update_authentication_mode_iam_user", value)


@pulumi.input_type
class DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamRoleArgs:
    def __init__(__self__, *,
                 credentials_title: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_title")

    @credentials_title.setter
    def credentials_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_title", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeAuthenticationModeIamUserArgs:
    def __init__(__self__, *,
                 aws_access_key_id: pulumi.Input[str],
                 aws_secret_access_key: pulumi.Input[str],
                 credentials_title: pulumi.Input[str]):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_access_key_id", value)

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_secret_access_key", value)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_title")

    @credentials_title.setter
    def credentials_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_title", value)


@pulumi.input_type
class DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamRoleArgs:
    def __init__(__self__, *,
                 credentials_title: pulumi.Input[str],
                 role_arn: pulumi.Input[str]):
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_title")

    @credentials_title.setter
    def credentials_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_title", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class DestinationAWSDatalakeConfigurationCredentialsDestinationAwsDatalakeUpdateAuthenticationModeIamUserArgs:
    def __init__(__self__, *,
                 aws_access_key_id: pulumi.Input[str],
                 aws_secret_access_key: pulumi.Input[str],
                 credentials_title: pulumi.Input[str]):
        pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_access_key_id", value)

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_secret_access_key", value)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_title")

    @credentials_title.setter
    def credentials_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_title", value)


@pulumi.input_type
class DestinationAWSDatalakeConfigurationFormatArgs:
    def __init__(__self__, *,
                 destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJsonArgs']] = None,
                 destination_aws_datalake_output_format_wildcard_parquet_columnar_storage: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageArgs']] = None,
                 destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJsonArgs']] = None,
                 destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorageArgs']] = None):
        if destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json", destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json)
        if destination_aws_datalake_output_format_wildcard_parquet_columnar_storage is not None:
            pulumi.set(__self__, "destination_aws_datalake_output_format_wildcard_parquet_columnar_storage", destination_aws_datalake_output_format_wildcard_parquet_columnar_storage)
        if destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json", destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json)
        if destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage is not None:
            pulumi.set(__self__, "destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage", destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage)

    @property
    @pulumi.getter(name="destinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJson")
    def destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json(self) -> Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJsonArgs']]:
        return pulumi.get(self, "destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json")

    @destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json.setter
    def destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json(self, value: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJsonArgs']]):
        pulumi.set(self, "destination_aws_datalake_output_format_wildcard_json_lines_newline_delimited_json", value)

    @property
    @pulumi.getter(name="destinationAwsDatalakeOutputFormatWildcardParquetColumnarStorage")
    def destination_aws_datalake_output_format_wildcard_parquet_columnar_storage(self) -> Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageArgs']]:
        return pulumi.get(self, "destination_aws_datalake_output_format_wildcard_parquet_columnar_storage")

    @destination_aws_datalake_output_format_wildcard_parquet_columnar_storage.setter
    def destination_aws_datalake_output_format_wildcard_parquet_columnar_storage(self, value: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageArgs']]):
        pulumi.set(self, "destination_aws_datalake_output_format_wildcard_parquet_columnar_storage", value)

    @property
    @pulumi.getter(name="destinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJson")
    def destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json(self) -> Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJsonArgs']]:
        return pulumi.get(self, "destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json")

    @destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json.setter
    def destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json(self, value: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJsonArgs']]):
        pulumi.set(self, "destination_aws_datalake_update_output_format_wildcard_json_lines_newline_delimited_json", value)

    @property
    @pulumi.getter(name="destinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorage")
    def destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage(self) -> Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorageArgs']]:
        return pulumi.get(self, "destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage")

    @destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage.setter
    def destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage(self, value: Optional[pulumi.Input['DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorageArgs']]):
        pulumi.set(self, "destination_aws_datalake_update_output_format_wildcard_parquet_columnar_storage", value)


@pulumi.input_type
class DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardJsonLinesNewlineDelimitedJsonArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 compression_codec: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_codec")

    @compression_codec.setter
    def compression_codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_codec", value)


@pulumi.input_type
class DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeOutputFormatWildcardParquetColumnarStorageArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 compression_codec: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_codec")

    @compression_codec.setter
    def compression_codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_codec", value)


@pulumi.input_type
class DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardJsonLinesNewlineDelimitedJsonArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 compression_codec: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_codec")

    @compression_codec.setter
    def compression_codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_codec", value)


@pulumi.input_type
class DestinationAWSDatalakeConfigurationFormatDestinationAwsDatalakeUpdateOutputFormatWildcardParquetColumnarStorageArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 compression_codec: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_codec")

    @compression_codec.setter
    def compression_codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_codec", value)


@pulumi.input_type
class DestinationAzurBlobStorageConfigurationArgs:
    def __init__(__self__, *,
                 azure_blob_storage_account_key: pulumi.Input[str],
                 azure_blob_storage_account_name: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 format: pulumi.Input['DestinationAzurBlobStorageConfigurationFormatArgs'],
                 azure_blob_storage_container_name: Optional[pulumi.Input[str]] = None,
                 azure_blob_storage_endpoint_domain_name: Optional[pulumi.Input[str]] = None,
                 azure_blob_storage_output_buffer_size: Optional[pulumi.Input[int]] = None,
                 azure_blob_storage_spill_size: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "azure_blob_storage_account_key", azure_blob_storage_account_key)
        pulumi.set(__self__, "azure_blob_storage_account_name", azure_blob_storage_account_name)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "format", format)
        if azure_blob_storage_container_name is not None:
            pulumi.set(__self__, "azure_blob_storage_container_name", azure_blob_storage_container_name)
        if azure_blob_storage_endpoint_domain_name is not None:
            pulumi.set(__self__, "azure_blob_storage_endpoint_domain_name", azure_blob_storage_endpoint_domain_name)
        if azure_blob_storage_output_buffer_size is not None:
            pulumi.set(__self__, "azure_blob_storage_output_buffer_size", azure_blob_storage_output_buffer_size)
        if azure_blob_storage_spill_size is not None:
            pulumi.set(__self__, "azure_blob_storage_spill_size", azure_blob_storage_spill_size)

    @property
    @pulumi.getter(name="azureBlobStorageAccountKey")
    def azure_blob_storage_account_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "azure_blob_storage_account_key")

    @azure_blob_storage_account_key.setter
    def azure_blob_storage_account_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_blob_storage_account_key", value)

    @property
    @pulumi.getter(name="azureBlobStorageAccountName")
    def azure_blob_storage_account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "azure_blob_storage_account_name")

    @azure_blob_storage_account_name.setter
    def azure_blob_storage_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_blob_storage_account_name", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input['DestinationAzurBlobStorageConfigurationFormatArgs']:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input['DestinationAzurBlobStorageConfigurationFormatArgs']):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="azureBlobStorageContainerName")
    def azure_blob_storage_container_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_blob_storage_container_name")

    @azure_blob_storage_container_name.setter
    def azure_blob_storage_container_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_blob_storage_container_name", value)

    @property
    @pulumi.getter(name="azureBlobStorageEndpointDomainName")
    def azure_blob_storage_endpoint_domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_blob_storage_endpoint_domain_name")

    @azure_blob_storage_endpoint_domain_name.setter
    def azure_blob_storage_endpoint_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_blob_storage_endpoint_domain_name", value)

    @property
    @pulumi.getter(name="azureBlobStorageOutputBufferSize")
    def azure_blob_storage_output_buffer_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "azure_blob_storage_output_buffer_size")

    @azure_blob_storage_output_buffer_size.setter
    def azure_blob_storage_output_buffer_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "azure_blob_storage_output_buffer_size", value)

    @property
    @pulumi.getter(name="azureBlobStorageSpillSize")
    def azure_blob_storage_spill_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "azure_blob_storage_spill_size")

    @azure_blob_storage_spill_size.setter
    def azure_blob_storage_spill_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "azure_blob_storage_spill_size", value)


@pulumi.input_type
class DestinationAzurBlobStorageConfigurationFormatArgs:
    def __init__(__self__, *,
                 destination_azure_blob_storage_output_format_csv_comma_separated_values: Optional[pulumi.Input['DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValuesArgs']] = None,
                 destination_azure_blob_storage_output_format_json_lines_newline_delimited_json: Optional[pulumi.Input['DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJsonArgs']] = None,
                 destination_azure_blob_storage_update_output_format_csv_comma_separated_values: Optional[pulumi.Input['DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValuesArgs']] = None,
                 destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json: Optional[pulumi.Input['DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs']] = None):
        if destination_azure_blob_storage_output_format_csv_comma_separated_values is not None:
            pulumi.set(__self__, "destination_azure_blob_storage_output_format_csv_comma_separated_values", destination_azure_blob_storage_output_format_csv_comma_separated_values)
        if destination_azure_blob_storage_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_azure_blob_storage_output_format_json_lines_newline_delimited_json", destination_azure_blob_storage_output_format_json_lines_newline_delimited_json)
        if destination_azure_blob_storage_update_output_format_csv_comma_separated_values is not None:
            pulumi.set(__self__, "destination_azure_blob_storage_update_output_format_csv_comma_separated_values", destination_azure_blob_storage_update_output_format_csv_comma_separated_values)
        if destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json", destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json)

    @property
    @pulumi.getter(name="destinationAzureBlobStorageOutputFormatCsvCommaSeparatedValues")
    def destination_azure_blob_storage_output_format_csv_comma_separated_values(self) -> Optional[pulumi.Input['DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValuesArgs']]:
        return pulumi.get(self, "destination_azure_blob_storage_output_format_csv_comma_separated_values")

    @destination_azure_blob_storage_output_format_csv_comma_separated_values.setter
    def destination_azure_blob_storage_output_format_csv_comma_separated_values(self, value: Optional[pulumi.Input['DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValuesArgs']]):
        pulumi.set(self, "destination_azure_blob_storage_output_format_csv_comma_separated_values", value)

    @property
    @pulumi.getter(name="destinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_azure_blob_storage_output_format_json_lines_newline_delimited_json(self) -> Optional[pulumi.Input['DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJsonArgs']]:
        return pulumi.get(self, "destination_azure_blob_storage_output_format_json_lines_newline_delimited_json")

    @destination_azure_blob_storage_output_format_json_lines_newline_delimited_json.setter
    def destination_azure_blob_storage_output_format_json_lines_newline_delimited_json(self, value: Optional[pulumi.Input['DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJsonArgs']]):
        pulumi.set(self, "destination_azure_blob_storage_output_format_json_lines_newline_delimited_json", value)

    @property
    @pulumi.getter(name="destinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValues")
    def destination_azure_blob_storage_update_output_format_csv_comma_separated_values(self) -> Optional[pulumi.Input['DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValuesArgs']]:
        return pulumi.get(self, "destination_azure_blob_storage_update_output_format_csv_comma_separated_values")

    @destination_azure_blob_storage_update_output_format_csv_comma_separated_values.setter
    def destination_azure_blob_storage_update_output_format_csv_comma_separated_values(self, value: Optional[pulumi.Input['DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValuesArgs']]):
        pulumi.set(self, "destination_azure_blob_storage_update_output_format_csv_comma_separated_values", value)

    @property
    @pulumi.getter(name="destinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json(self) -> Optional[pulumi.Input['DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs']]:
        return pulumi.get(self, "destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json")

    @destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json.setter
    def destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json(self, value: Optional[pulumi.Input['DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs']]):
        pulumi.set(self, "destination_azure_blob_storage_update_output_format_json_lines_newline_delimited_json", value)


@pulumi.input_type
class DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatCsvCommaSeparatedValuesArgs:
    def __init__(__self__, *,
                 flattening: pulumi.Input[str],
                 format_type: pulumi.Input[str]):
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def flattening(self) -> pulumi.Input[str]:
        return pulumi.get(self, "flattening")

    @flattening.setter
    def flattening(self, value: pulumi.Input[str]):
        pulumi.set(self, "flattening", value)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)


@pulumi.input_type
class DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageOutputFormatJsonLinesNewlineDelimitedJsonArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str]):
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)


@pulumi.input_type
class DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatCsvCommaSeparatedValuesArgs:
    def __init__(__self__, *,
                 flattening: pulumi.Input[str],
                 format_type: pulumi.Input[str]):
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter
    def flattening(self) -> pulumi.Input[str]:
        return pulumi.get(self, "flattening")

    @flattening.setter
    def flattening(self, value: pulumi.Input[str]):
        pulumi.set(self, "flattening", value)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)


@pulumi.input_type
class DestinationAzurBlobStorageConfigurationFormatDestinationAzureBlobStorageUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str]):
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)


@pulumi.input_type
class DestinationBigqueryConfigurationArgs:
    def __init__(__self__, *,
                 dataset_id: pulumi.Input[str],
                 dataset_location: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 big_query_client_buffer_size_mb: Optional[pulumi.Input[int]] = None,
                 credentials_json: Optional[pulumi.Input[str]] = None,
                 loading_method: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodArgs']] = None,
                 raw_data_dataset: Optional[pulumi.Input[str]] = None,
                 transformation_priority: Optional[pulumi.Input[str]] = None,
                 use1s1t_format: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "dataset_location", dataset_location)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "project_id", project_id)
        if big_query_client_buffer_size_mb is not None:
            pulumi.set(__self__, "big_query_client_buffer_size_mb", big_query_client_buffer_size_mb)
        if credentials_json is not None:
            pulumi.set(__self__, "credentials_json", credentials_json)
        if loading_method is not None:
            pulumi.set(__self__, "loading_method", loading_method)
        if raw_data_dataset is not None:
            pulumi.set(__self__, "raw_data_dataset", raw_data_dataset)
        if transformation_priority is not None:
            pulumi.set(__self__, "transformation_priority", transformation_priority)
        if use1s1t_format is not None:
            pulumi.set(__self__, "use1s1t_format", use1s1t_format)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter(name="datasetLocation")
    def dataset_location(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dataset_location")

    @dataset_location.setter
    def dataset_location(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset_location", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="bigQueryClientBufferSizeMb")
    def big_query_client_buffer_size_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "big_query_client_buffer_size_mb")

    @big_query_client_buffer_size_mb.setter
    def big_query_client_buffer_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "big_query_client_buffer_size_mb", value)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_json", value)

    @property
    @pulumi.getter(name="loadingMethod")
    def loading_method(self) -> Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodArgs']]:
        return pulumi.get(self, "loading_method")

    @loading_method.setter
    def loading_method(self, value: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodArgs']]):
        pulumi.set(self, "loading_method", value)

    @property
    @pulumi.getter(name="rawDataDataset")
    def raw_data_dataset(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "raw_data_dataset")

    @raw_data_dataset.setter
    def raw_data_dataset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_data_dataset", value)

    @property
    @pulumi.getter(name="transformationPriority")
    def transformation_priority(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "transformation_priority")

    @transformation_priority.setter
    def transformation_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "transformation_priority", value)

    @property
    @pulumi.getter(name="use1s1tFormat")
    def use1s1t_format(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use1s1t_format")

    @use1s1t_format.setter
    def use1s1t_format(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use1s1t_format", value)


@pulumi.input_type
class DestinationBigqueryConfigurationLoadingMethodArgs:
    def __init__(__self__, *,
                 destination_bigquery_loading_method_gcs_staging: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingArgs']] = None,
                 destination_bigquery_loading_method_standard_inserts: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInsertsArgs']] = None,
                 destination_bigquery_update_loading_method_gcs_staging: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingArgs']] = None,
                 destination_bigquery_update_loading_method_standard_inserts: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInsertsArgs']] = None):
        if destination_bigquery_loading_method_gcs_staging is not None:
            pulumi.set(__self__, "destination_bigquery_loading_method_gcs_staging", destination_bigquery_loading_method_gcs_staging)
        if destination_bigquery_loading_method_standard_inserts is not None:
            pulumi.set(__self__, "destination_bigquery_loading_method_standard_inserts", destination_bigquery_loading_method_standard_inserts)
        if destination_bigquery_update_loading_method_gcs_staging is not None:
            pulumi.set(__self__, "destination_bigquery_update_loading_method_gcs_staging", destination_bigquery_update_loading_method_gcs_staging)
        if destination_bigquery_update_loading_method_standard_inserts is not None:
            pulumi.set(__self__, "destination_bigquery_update_loading_method_standard_inserts", destination_bigquery_update_loading_method_standard_inserts)

    @property
    @pulumi.getter(name="destinationBigqueryLoadingMethodGcsStaging")
    def destination_bigquery_loading_method_gcs_staging(self) -> Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingArgs']]:
        return pulumi.get(self, "destination_bigquery_loading_method_gcs_staging")

    @destination_bigquery_loading_method_gcs_staging.setter
    def destination_bigquery_loading_method_gcs_staging(self, value: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingArgs']]):
        pulumi.set(self, "destination_bigquery_loading_method_gcs_staging", value)

    @property
    @pulumi.getter(name="destinationBigqueryLoadingMethodStandardInserts")
    def destination_bigquery_loading_method_standard_inserts(self) -> Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInsertsArgs']]:
        return pulumi.get(self, "destination_bigquery_loading_method_standard_inserts")

    @destination_bigquery_loading_method_standard_inserts.setter
    def destination_bigquery_loading_method_standard_inserts(self, value: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInsertsArgs']]):
        pulumi.set(self, "destination_bigquery_loading_method_standard_inserts", value)

    @property
    @pulumi.getter(name="destinationBigqueryUpdateLoadingMethodGcsStaging")
    def destination_bigquery_update_loading_method_gcs_staging(self) -> Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingArgs']]:
        return pulumi.get(self, "destination_bigquery_update_loading_method_gcs_staging")

    @destination_bigquery_update_loading_method_gcs_staging.setter
    def destination_bigquery_update_loading_method_gcs_staging(self, value: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingArgs']]):
        pulumi.set(self, "destination_bigquery_update_loading_method_gcs_staging", value)

    @property
    @pulumi.getter(name="destinationBigqueryUpdateLoadingMethodStandardInserts")
    def destination_bigquery_update_loading_method_standard_inserts(self) -> Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInsertsArgs']]:
        return pulumi.get(self, "destination_bigquery_update_loading_method_standard_inserts")

    @destination_bigquery_update_loading_method_standard_inserts.setter
    def destination_bigquery_update_loading_method_standard_inserts(self, value: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInsertsArgs']]):
        pulumi.set(self, "destination_bigquery_update_loading_method_standard_inserts", value)


@pulumi.input_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingArgs:
    def __init__(__self__, *,
                 credential: pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialArgs'],
                 gcs_bucket_name: pulumi.Input[str],
                 gcs_bucket_path: pulumi.Input[str],
                 method: pulumi.Input[str],
                 file_buffer_count: Optional[pulumi.Input[int]] = None,
                 keep_files_in_gcs_bucket: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        pulumi.set(__self__, "method", method)
        if file_buffer_count is not None:
            pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        if keep_files_in_gcs_bucket is not None:
            pulumi.set(__self__, "keep_files_in_gcs_bucket", keep_files_in_gcs_bucket)

    @property
    @pulumi.getter
    def credential(self) -> pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialArgs']:
        return pulumi.get(self, "credential")

    @credential.setter
    def credential(self, value: pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialArgs']):
        pulumi.set(self, "credential", value)

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gcs_bucket_name")

    @gcs_bucket_name.setter
    def gcs_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcs_bucket_name", value)

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gcs_bucket_path")

    @gcs_bucket_path.setter
    def gcs_bucket_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcs_bucket_path", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_buffer_count")

    @file_buffer_count.setter
    def file_buffer_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_buffer_count", value)

    @property
    @pulumi.getter(name="keepFilesInGcsBucket")
    def keep_files_in_gcs_bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keep_files_in_gcs_bucket")

    @keep_files_in_gcs_bucket.setter
    def keep_files_in_gcs_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_files_in_gcs_bucket", value)


@pulumi.input_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialArgs:
    def __init__(__self__, *,
                 destination_bigquery_loading_method_gcs_staging_credential_hmac_key: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKeyArgs']] = None):
        if destination_bigquery_loading_method_gcs_staging_credential_hmac_key is not None:
            pulumi.set(__self__, "destination_bigquery_loading_method_gcs_staging_credential_hmac_key", destination_bigquery_loading_method_gcs_staging_credential_hmac_key)

    @property
    @pulumi.getter(name="destinationBigqueryLoadingMethodGcsStagingCredentialHmacKey")
    def destination_bigquery_loading_method_gcs_staging_credential_hmac_key(self) -> Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKeyArgs']]:
        return pulumi.get(self, "destination_bigquery_loading_method_gcs_staging_credential_hmac_key")

    @destination_bigquery_loading_method_gcs_staging_credential_hmac_key.setter
    def destination_bigquery_loading_method_gcs_staging_credential_hmac_key(self, value: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKeyArgs']]):
        pulumi.set(self, "destination_bigquery_loading_method_gcs_staging_credential_hmac_key", value)


@pulumi.input_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodGcsStagingCredentialDestinationBigqueryLoadingMethodGcsStagingCredentialHmacKeyArgs:
    def __init__(__self__, *,
                 credential_type: pulumi.Input[str],
                 hmac_key_access_id: pulumi.Input[str],
                 hmac_key_secret: pulumi.Input[str]):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hmac_key_access_id")

    @hmac_key_access_id.setter
    def hmac_key_access_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hmac_key_access_id", value)

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hmac_key_secret")

    @hmac_key_secret.setter
    def hmac_key_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "hmac_key_secret", value)


@pulumi.input_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryLoadingMethodStandardInsertsArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingArgs:
    def __init__(__self__, *,
                 credential: pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialArgs'],
                 gcs_bucket_name: pulumi.Input[str],
                 gcs_bucket_path: pulumi.Input[str],
                 method: pulumi.Input[str],
                 file_buffer_count: Optional[pulumi.Input[int]] = None,
                 keep_files_in_gcs_bucket: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        pulumi.set(__self__, "method", method)
        if file_buffer_count is not None:
            pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        if keep_files_in_gcs_bucket is not None:
            pulumi.set(__self__, "keep_files_in_gcs_bucket", keep_files_in_gcs_bucket)

    @property
    @pulumi.getter
    def credential(self) -> pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialArgs']:
        return pulumi.get(self, "credential")

    @credential.setter
    def credential(self, value: pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialArgs']):
        pulumi.set(self, "credential", value)

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gcs_bucket_name")

    @gcs_bucket_name.setter
    def gcs_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcs_bucket_name", value)

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gcs_bucket_path")

    @gcs_bucket_path.setter
    def gcs_bucket_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcs_bucket_path", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_buffer_count")

    @file_buffer_count.setter
    def file_buffer_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_buffer_count", value)

    @property
    @pulumi.getter(name="keepFilesInGcsBucket")
    def keep_files_in_gcs_bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keep_files_in_gcs_bucket")

    @keep_files_in_gcs_bucket.setter
    def keep_files_in_gcs_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_files_in_gcs_bucket", value)


@pulumi.input_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialArgs:
    def __init__(__self__, *,
                 destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKeyArgs']] = None):
        if destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key is not None:
            pulumi.set(__self__, "destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key", destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key)

    @property
    @pulumi.getter(name="destinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKey")
    def destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key(self) -> Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKeyArgs']]:
        return pulumi.get(self, "destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key")

    @destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key.setter
    def destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key(self, value: Optional[pulumi.Input['DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKeyArgs']]):
        pulumi.set(self, "destination_bigquery_update_loading_method_gcs_staging_credential_hmac_key", value)


@pulumi.input_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryUpdateLoadingMethodGcsStagingCredentialHmacKeyArgs:
    def __init__(__self__, *,
                 credential_type: pulumi.Input[str],
                 hmac_key_access_id: pulumi.Input[str],
                 hmac_key_secret: pulumi.Input[str]):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hmac_key_access_id")

    @hmac_key_access_id.setter
    def hmac_key_access_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hmac_key_access_id", value)

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hmac_key_secret")

    @hmac_key_secret.setter
    def hmac_key_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "hmac_key_secret", value)


@pulumi.input_type
class DestinationBigqueryConfigurationLoadingMethodDestinationBigqueryUpdateLoadingMethodStandardInsertsArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class DestinationBigqueryDenormalizedConfigurationArgs:
    def __init__(__self__, *,
                 dataset_id: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 big_query_client_buffer_size_mb: Optional[pulumi.Input[int]] = None,
                 credentials_json: Optional[pulumi.Input[str]] = None,
                 dataset_location: Optional[pulumi.Input[str]] = None,
                 loading_method: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodArgs']] = None):
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "project_id", project_id)
        if big_query_client_buffer_size_mb is not None:
            pulumi.set(__self__, "big_query_client_buffer_size_mb", big_query_client_buffer_size_mb)
        if credentials_json is not None:
            pulumi.set(__self__, "credentials_json", credentials_json)
        if dataset_location is not None:
            pulumi.set(__self__, "dataset_location", dataset_location)
        if loading_method is not None:
            pulumi.set(__self__, "loading_method", loading_method)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="bigQueryClientBufferSizeMb")
    def big_query_client_buffer_size_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "big_query_client_buffer_size_mb")

    @big_query_client_buffer_size_mb.setter
    def big_query_client_buffer_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "big_query_client_buffer_size_mb", value)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_json", value)

    @property
    @pulumi.getter(name="datasetLocation")
    def dataset_location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataset_location")

    @dataset_location.setter
    def dataset_location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_location", value)

    @property
    @pulumi.getter(name="loadingMethod")
    def loading_method(self) -> Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodArgs']]:
        return pulumi.get(self, "loading_method")

    @loading_method.setter
    def loading_method(self, value: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodArgs']]):
        pulumi.set(self, "loading_method", value)


@pulumi.input_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodArgs:
    def __init__(__self__, *,
                 destination_bigquery_denormalized_loading_method_gcs_staging: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingArgs']] = None,
                 destination_bigquery_denormalized_loading_method_standard_inserts: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInsertsArgs']] = None,
                 destination_bigquery_denormalized_update_loading_method_gcs_staging: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingArgs']] = None,
                 destination_bigquery_denormalized_update_loading_method_standard_inserts: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInsertsArgs']] = None):
        if destination_bigquery_denormalized_loading_method_gcs_staging is not None:
            pulumi.set(__self__, "destination_bigquery_denormalized_loading_method_gcs_staging", destination_bigquery_denormalized_loading_method_gcs_staging)
        if destination_bigquery_denormalized_loading_method_standard_inserts is not None:
            pulumi.set(__self__, "destination_bigquery_denormalized_loading_method_standard_inserts", destination_bigquery_denormalized_loading_method_standard_inserts)
        if destination_bigquery_denormalized_update_loading_method_gcs_staging is not None:
            pulumi.set(__self__, "destination_bigquery_denormalized_update_loading_method_gcs_staging", destination_bigquery_denormalized_update_loading_method_gcs_staging)
        if destination_bigquery_denormalized_update_loading_method_standard_inserts is not None:
            pulumi.set(__self__, "destination_bigquery_denormalized_update_loading_method_standard_inserts", destination_bigquery_denormalized_update_loading_method_standard_inserts)

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedLoadingMethodGcsStaging")
    def destination_bigquery_denormalized_loading_method_gcs_staging(self) -> Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingArgs']]:
        return pulumi.get(self, "destination_bigquery_denormalized_loading_method_gcs_staging")

    @destination_bigquery_denormalized_loading_method_gcs_staging.setter
    def destination_bigquery_denormalized_loading_method_gcs_staging(self, value: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingArgs']]):
        pulumi.set(self, "destination_bigquery_denormalized_loading_method_gcs_staging", value)

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedLoadingMethodStandardInserts")
    def destination_bigquery_denormalized_loading_method_standard_inserts(self) -> Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInsertsArgs']]:
        return pulumi.get(self, "destination_bigquery_denormalized_loading_method_standard_inserts")

    @destination_bigquery_denormalized_loading_method_standard_inserts.setter
    def destination_bigquery_denormalized_loading_method_standard_inserts(self, value: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInsertsArgs']]):
        pulumi.set(self, "destination_bigquery_denormalized_loading_method_standard_inserts", value)

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedUpdateLoadingMethodGcsStaging")
    def destination_bigquery_denormalized_update_loading_method_gcs_staging(self) -> Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingArgs']]:
        return pulumi.get(self, "destination_bigquery_denormalized_update_loading_method_gcs_staging")

    @destination_bigquery_denormalized_update_loading_method_gcs_staging.setter
    def destination_bigquery_denormalized_update_loading_method_gcs_staging(self, value: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingArgs']]):
        pulumi.set(self, "destination_bigquery_denormalized_update_loading_method_gcs_staging", value)

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedUpdateLoadingMethodStandardInserts")
    def destination_bigquery_denormalized_update_loading_method_standard_inserts(self) -> Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInsertsArgs']]:
        return pulumi.get(self, "destination_bigquery_denormalized_update_loading_method_standard_inserts")

    @destination_bigquery_denormalized_update_loading_method_standard_inserts.setter
    def destination_bigquery_denormalized_update_loading_method_standard_inserts(self, value: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInsertsArgs']]):
        pulumi.set(self, "destination_bigquery_denormalized_update_loading_method_standard_inserts", value)


@pulumi.input_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingArgs:
    def __init__(__self__, *,
                 credential: pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialArgs'],
                 gcs_bucket_name: pulumi.Input[str],
                 gcs_bucket_path: pulumi.Input[str],
                 method: pulumi.Input[str],
                 file_buffer_count: Optional[pulumi.Input[int]] = None,
                 keep_files_in_gcs_bucket: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        pulumi.set(__self__, "method", method)
        if file_buffer_count is not None:
            pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        if keep_files_in_gcs_bucket is not None:
            pulumi.set(__self__, "keep_files_in_gcs_bucket", keep_files_in_gcs_bucket)

    @property
    @pulumi.getter
    def credential(self) -> pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialArgs']:
        return pulumi.get(self, "credential")

    @credential.setter
    def credential(self, value: pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialArgs']):
        pulumi.set(self, "credential", value)

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gcs_bucket_name")

    @gcs_bucket_name.setter
    def gcs_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcs_bucket_name", value)

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gcs_bucket_path")

    @gcs_bucket_path.setter
    def gcs_bucket_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcs_bucket_path", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_buffer_count")

    @file_buffer_count.setter
    def file_buffer_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_buffer_count", value)

    @property
    @pulumi.getter(name="keepFilesInGcsBucket")
    def keep_files_in_gcs_bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keep_files_in_gcs_bucket")

    @keep_files_in_gcs_bucket.setter
    def keep_files_in_gcs_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_files_in_gcs_bucket", value)


@pulumi.input_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialArgs:
    def __init__(__self__, *,
                 destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKeyArgs']] = None):
        if destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key is not None:
            pulumi.set(__self__, "destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key", destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key)

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKey")
    def destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key(self) -> Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKeyArgs']]:
        return pulumi.get(self, "destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key")

    @destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key.setter
    def destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key(self, value: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKeyArgs']]):
        pulumi.set(self, "destination_bigquery_denormalized_loading_method_gcs_staging_credential_hmac_key", value)


@pulumi.input_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedLoadingMethodGcsStagingCredentialHmacKeyArgs:
    def __init__(__self__, *,
                 credential_type: pulumi.Input[str],
                 hmac_key_access_id: pulumi.Input[str],
                 hmac_key_secret: pulumi.Input[str]):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hmac_key_access_id")

    @hmac_key_access_id.setter
    def hmac_key_access_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hmac_key_access_id", value)

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hmac_key_secret")

    @hmac_key_secret.setter
    def hmac_key_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "hmac_key_secret", value)


@pulumi.input_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedLoadingMethodStandardInsertsArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingArgs:
    def __init__(__self__, *,
                 credential: pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialArgs'],
                 gcs_bucket_name: pulumi.Input[str],
                 gcs_bucket_path: pulumi.Input[str],
                 method: pulumi.Input[str],
                 file_buffer_count: Optional[pulumi.Input[int]] = None,
                 keep_files_in_gcs_bucket: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        pulumi.set(__self__, "method", method)
        if file_buffer_count is not None:
            pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        if keep_files_in_gcs_bucket is not None:
            pulumi.set(__self__, "keep_files_in_gcs_bucket", keep_files_in_gcs_bucket)

    @property
    @pulumi.getter
    def credential(self) -> pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialArgs']:
        return pulumi.get(self, "credential")

    @credential.setter
    def credential(self, value: pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialArgs']):
        pulumi.set(self, "credential", value)

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gcs_bucket_name")

    @gcs_bucket_name.setter
    def gcs_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcs_bucket_name", value)

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gcs_bucket_path")

    @gcs_bucket_path.setter
    def gcs_bucket_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcs_bucket_path", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_buffer_count")

    @file_buffer_count.setter
    def file_buffer_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_buffer_count", value)

    @property
    @pulumi.getter(name="keepFilesInGcsBucket")
    def keep_files_in_gcs_bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "keep_files_in_gcs_bucket")

    @keep_files_in_gcs_bucket.setter
    def keep_files_in_gcs_bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "keep_files_in_gcs_bucket", value)


@pulumi.input_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialArgs:
    def __init__(__self__, *,
                 destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKeyArgs']] = None):
        if destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key is not None:
            pulumi.set(__self__, "destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key", destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key)

    @property
    @pulumi.getter(name="destinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKey")
    def destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key(self) -> Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKeyArgs']]:
        return pulumi.get(self, "destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key")

    @destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key.setter
    def destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key(self, value: Optional[pulumi.Input['DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKeyArgs']]):
        pulumi.set(self, "destination_bigquery_denormalized_update_loading_method_gcs_staging_credential_hmac_key", value)


@pulumi.input_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialDestinationBigqueryDenormalizedUpdateLoadingMethodGcsStagingCredentialHmacKeyArgs:
    def __init__(__self__, *,
                 credential_type: pulumi.Input[str],
                 hmac_key_access_id: pulumi.Input[str],
                 hmac_key_secret: pulumi.Input[str]):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hmac_key_access_id")

    @hmac_key_access_id.setter
    def hmac_key_access_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hmac_key_access_id", value)

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hmac_key_secret")

    @hmac_key_secret.setter
    def hmac_key_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "hmac_key_secret", value)


@pulumi.input_type
class DestinationBigqueryDenormalizedConfigurationLoadingMethodDestinationBigqueryDenormalizedUpdateLoadingMethodStandardInsertsArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class DestinationClickhouseConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 username: pulumi.Input[str],
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 tunnel_method: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationClickhouseConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 destination_clickhouse_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnelArgs']] = None,
                 destination_clickhouse_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_clickhouse_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 destination_clickhouse_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 destination_clickhouse_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if destination_clickhouse_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_clickhouse_ssh_tunnel_method_no_tunnel", destination_clickhouse_ssh_tunnel_method_no_tunnel)
        if destination_clickhouse_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_clickhouse_ssh_tunnel_method_password_authentication", destination_clickhouse_ssh_tunnel_method_password_authentication)
        if destination_clickhouse_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_clickhouse_ssh_tunnel_method_ssh_key_authentication", destination_clickhouse_ssh_tunnel_method_ssh_key_authentication)
        if destination_clickhouse_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_clickhouse_update_ssh_tunnel_method_no_tunnel", destination_clickhouse_update_ssh_tunnel_method_no_tunnel)
        if destination_clickhouse_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_clickhouse_update_ssh_tunnel_method_password_authentication", destination_clickhouse_update_ssh_tunnel_method_password_authentication)
        if destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication", destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationClickhouseSshTunnelMethodNoTunnel")
    def destination_clickhouse_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_clickhouse_ssh_tunnel_method_no_tunnel")

    @destination_clickhouse_ssh_tunnel_method_no_tunnel.setter
    def destination_clickhouse_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_clickhouse_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationClickhouseSshTunnelMethodPasswordAuthentication")
    def destination_clickhouse_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_clickhouse_ssh_tunnel_method_password_authentication")

    @destination_clickhouse_ssh_tunnel_method_password_authentication.setter
    def destination_clickhouse_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_clickhouse_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationClickhouseSshTunnelMethodSshKeyAuthentication")
    def destination_clickhouse_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_clickhouse_ssh_tunnel_method_ssh_key_authentication")

    @destination_clickhouse_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_clickhouse_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_clickhouse_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="destinationClickhouseUpdateSshTunnelMethodNoTunnel")
    def destination_clickhouse_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_clickhouse_update_ssh_tunnel_method_no_tunnel")

    @destination_clickhouse_update_ssh_tunnel_method_no_tunnel.setter
    def destination_clickhouse_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_clickhouse_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationClickhouseUpdateSshTunnelMethodPasswordAuthentication")
    def destination_clickhouse_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_clickhouse_update_ssh_tunnel_method_password_authentication")

    @destination_clickhouse_update_ssh_tunnel_method_password_authentication.setter
    def destination_clickhouse_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_clickhouse_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationClickhouseUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication")

    @destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_clickhouse_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationClickhouseConfigurationTunnelMethodDestinationClickhouseUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationConvexConfigurationArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 deployment_url: pulumi.Input[str],
                 destination_type: pulumi.Input[str]):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "deployment_url", deployment_url)
        pulumi.set(__self__, "destination_type", destination_type)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="deploymentUrl")
    def deployment_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deployment_url")

    @deployment_url.setter
    def deployment_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_url", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)


@pulumi.input_type
class DestinationCumulioConfigurationArgs:
    def __init__(__self__, *,
                 api_host: pulumi.Input[str],
                 api_key: pulumi.Input[str],
                 api_token: pulumi.Input[str],
                 destination_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_host", api_host)
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "destination_type", destination_type)

    @property
    @pulumi.getter(name="apiHost")
    def api_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_host")

    @api_host.setter
    def api_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_host", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)


@pulumi.input_type
class DestinationDatabendConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 username: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[int]] = None,
                 table: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if table is not None:
            pulumi.set(__self__, "table", table)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def table(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "table", value)


@pulumi.input_type
class DestinationDatabricksConfigurationArgs:
    def __init__(__self__, *,
                 accept_terms: pulumi.Input[bool],
                 data_source: pulumi.Input['DestinationDatabricksConfigurationDataSourceArgs'],
                 databricks_http_path: pulumi.Input[str],
                 databricks_personal_access_token: pulumi.Input[str],
                 databricks_server_hostname: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 database: Optional[pulumi.Input[str]] = None,
                 databricks_port: Optional[pulumi.Input[str]] = None,
                 enable_schema_evolution: Optional[pulumi.Input[bool]] = None,
                 purge_staging_data: Optional[pulumi.Input[bool]] = None,
                 schema: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "accept_terms", accept_terms)
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "databricks_http_path", databricks_http_path)
        pulumi.set(__self__, "databricks_personal_access_token", databricks_personal_access_token)
        pulumi.set(__self__, "databricks_server_hostname", databricks_server_hostname)
        pulumi.set(__self__, "destination_type", destination_type)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if databricks_port is not None:
            pulumi.set(__self__, "databricks_port", databricks_port)
        if enable_schema_evolution is not None:
            pulumi.set(__self__, "enable_schema_evolution", enable_schema_evolution)
        if purge_staging_data is not None:
            pulumi.set(__self__, "purge_staging_data", purge_staging_data)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter(name="acceptTerms")
    def accept_terms(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "accept_terms")

    @accept_terms.setter
    def accept_terms(self, value: pulumi.Input[bool]):
        pulumi.set(self, "accept_terms", value)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input['DestinationDatabricksConfigurationDataSourceArgs']:
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input['DestinationDatabricksConfigurationDataSourceArgs']):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter(name="databricksHttpPath")
    def databricks_http_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "databricks_http_path")

    @databricks_http_path.setter
    def databricks_http_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "databricks_http_path", value)

    @property
    @pulumi.getter(name="databricksPersonalAccessToken")
    def databricks_personal_access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "databricks_personal_access_token")

    @databricks_personal_access_token.setter
    def databricks_personal_access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "databricks_personal_access_token", value)

    @property
    @pulumi.getter(name="databricksServerHostname")
    def databricks_server_hostname(self) -> pulumi.Input[str]:
        return pulumi.get(self, "databricks_server_hostname")

    @databricks_server_hostname.setter
    def databricks_server_hostname(self, value: pulumi.Input[str]):
        pulumi.set(self, "databricks_server_hostname", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def database(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="databricksPort")
    def databricks_port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "databricks_port")

    @databricks_port.setter
    def databricks_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "databricks_port", value)

    @property
    @pulumi.getter(name="enableSchemaEvolution")
    def enable_schema_evolution(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_schema_evolution")

    @enable_schema_evolution.setter
    def enable_schema_evolution(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_schema_evolution", value)

    @property
    @pulumi.getter(name="purgeStagingData")
    def purge_staging_data(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "purge_staging_data")

    @purge_staging_data.setter
    def purge_staging_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "purge_staging_data", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)


@pulumi.input_type
class DestinationDatabricksConfigurationDataSourceArgs:
    def __init__(__self__, *,
                 destination_databricks_data_source_amazon_s3: Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3Args']] = None,
                 destination_databricks_data_source_azure_blob_storage: Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorageArgs']] = None,
                 destination_databricks_data_source_recommended_managed_tables: Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTablesArgs']] = None,
                 destination_databricks_update_data_source_amazon_s3: Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3Args']] = None,
                 destination_databricks_update_data_source_azure_blob_storage: Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorageArgs']] = None,
                 destination_databricks_update_data_source_recommended_managed_tables: Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTablesArgs']] = None):
        if destination_databricks_data_source_amazon_s3 is not None:
            pulumi.set(__self__, "destination_databricks_data_source_amazon_s3", destination_databricks_data_source_amazon_s3)
        if destination_databricks_data_source_azure_blob_storage is not None:
            pulumi.set(__self__, "destination_databricks_data_source_azure_blob_storage", destination_databricks_data_source_azure_blob_storage)
        if destination_databricks_data_source_recommended_managed_tables is not None:
            pulumi.set(__self__, "destination_databricks_data_source_recommended_managed_tables", destination_databricks_data_source_recommended_managed_tables)
        if destination_databricks_update_data_source_amazon_s3 is not None:
            pulumi.set(__self__, "destination_databricks_update_data_source_amazon_s3", destination_databricks_update_data_source_amazon_s3)
        if destination_databricks_update_data_source_azure_blob_storage is not None:
            pulumi.set(__self__, "destination_databricks_update_data_source_azure_blob_storage", destination_databricks_update_data_source_azure_blob_storage)
        if destination_databricks_update_data_source_recommended_managed_tables is not None:
            pulumi.set(__self__, "destination_databricks_update_data_source_recommended_managed_tables", destination_databricks_update_data_source_recommended_managed_tables)

    @property
    @pulumi.getter(name="destinationDatabricksDataSourceAmazonS3")
    def destination_databricks_data_source_amazon_s3(self) -> Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3Args']]:
        return pulumi.get(self, "destination_databricks_data_source_amazon_s3")

    @destination_databricks_data_source_amazon_s3.setter
    def destination_databricks_data_source_amazon_s3(self, value: Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3Args']]):
        pulumi.set(self, "destination_databricks_data_source_amazon_s3", value)

    @property
    @pulumi.getter(name="destinationDatabricksDataSourceAzureBlobStorage")
    def destination_databricks_data_source_azure_blob_storage(self) -> Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorageArgs']]:
        return pulumi.get(self, "destination_databricks_data_source_azure_blob_storage")

    @destination_databricks_data_source_azure_blob_storage.setter
    def destination_databricks_data_source_azure_blob_storage(self, value: Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorageArgs']]):
        pulumi.set(self, "destination_databricks_data_source_azure_blob_storage", value)

    @property
    @pulumi.getter(name="destinationDatabricksDataSourceRecommendedManagedTables")
    def destination_databricks_data_source_recommended_managed_tables(self) -> Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTablesArgs']]:
        return pulumi.get(self, "destination_databricks_data_source_recommended_managed_tables")

    @destination_databricks_data_source_recommended_managed_tables.setter
    def destination_databricks_data_source_recommended_managed_tables(self, value: Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTablesArgs']]):
        pulumi.set(self, "destination_databricks_data_source_recommended_managed_tables", value)

    @property
    @pulumi.getter(name="destinationDatabricksUpdateDataSourceAmazonS3")
    def destination_databricks_update_data_source_amazon_s3(self) -> Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3Args']]:
        return pulumi.get(self, "destination_databricks_update_data_source_amazon_s3")

    @destination_databricks_update_data_source_amazon_s3.setter
    def destination_databricks_update_data_source_amazon_s3(self, value: Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3Args']]):
        pulumi.set(self, "destination_databricks_update_data_source_amazon_s3", value)

    @property
    @pulumi.getter(name="destinationDatabricksUpdateDataSourceAzureBlobStorage")
    def destination_databricks_update_data_source_azure_blob_storage(self) -> Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorageArgs']]:
        return pulumi.get(self, "destination_databricks_update_data_source_azure_blob_storage")

    @destination_databricks_update_data_source_azure_blob_storage.setter
    def destination_databricks_update_data_source_azure_blob_storage(self, value: Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorageArgs']]):
        pulumi.set(self, "destination_databricks_update_data_source_azure_blob_storage", value)

    @property
    @pulumi.getter(name="destinationDatabricksUpdateDataSourceRecommendedManagedTables")
    def destination_databricks_update_data_source_recommended_managed_tables(self) -> Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTablesArgs']]:
        return pulumi.get(self, "destination_databricks_update_data_source_recommended_managed_tables")

    @destination_databricks_update_data_source_recommended_managed_tables.setter
    def destination_databricks_update_data_source_recommended_managed_tables(self, value: Optional[pulumi.Input['DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTablesArgs']]):
        pulumi.set(self, "destination_databricks_update_data_source_recommended_managed_tables", value)


@pulumi.input_type
class DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAmazonS3Args:
    def __init__(__self__, *,
                 data_source_type: pulumi.Input[str],
                 s3_access_key_id: pulumi.Input[str],
                 s3_bucket_name: pulumi.Input[str],
                 s3_bucket_path: pulumi.Input[str],
                 s3_bucket_region: pulumi.Input[str],
                 s3_secret_access_key: pulumi.Input[str],
                 file_name_pattern: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "data_source_type", data_source_type)
        pulumi.set(__self__, "s3_access_key_id", s3_access_key_id)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "s3_secret_access_key", s3_secret_access_key)
        if file_name_pattern is not None:
            pulumi.set(__self__, "file_name_pattern", file_name_pattern)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_source_type")

    @data_source_type.setter
    def data_source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source_type", value)

    @property
    @pulumi.getter(name="s3AccessKeyId")
    def s3_access_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_access_key_id")

    @s3_access_key_id.setter
    def s3_access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_access_key_id", value)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_name")

    @s3_bucket_name.setter
    def s3_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_name", value)

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_path")

    @s3_bucket_path.setter
    def s3_bucket_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_path", value)

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_region")

    @s3_bucket_region.setter
    def s3_bucket_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_region", value)

    @property
    @pulumi.getter(name="s3SecretAccessKey")
    def s3_secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_secret_access_key")

    @s3_secret_access_key.setter
    def s3_secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_secret_access_key", value)

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_name_pattern")

    @file_name_pattern.setter
    def file_name_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name_pattern", value)


@pulumi.input_type
class DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceAzureBlobStorageArgs:
    def __init__(__self__, *,
                 azure_blob_storage_account_name: pulumi.Input[str],
                 azure_blob_storage_container_name: pulumi.Input[str],
                 azure_blob_storage_sas_token: pulumi.Input[str],
                 data_source_type: pulumi.Input[str],
                 azure_blob_storage_endpoint_domain_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "azure_blob_storage_account_name", azure_blob_storage_account_name)
        pulumi.set(__self__, "azure_blob_storage_container_name", azure_blob_storage_container_name)
        pulumi.set(__self__, "azure_blob_storage_sas_token", azure_blob_storage_sas_token)
        pulumi.set(__self__, "data_source_type", data_source_type)
        if azure_blob_storage_endpoint_domain_name is not None:
            pulumi.set(__self__, "azure_blob_storage_endpoint_domain_name", azure_blob_storage_endpoint_domain_name)

    @property
    @pulumi.getter(name="azureBlobStorageAccountName")
    def azure_blob_storage_account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "azure_blob_storage_account_name")

    @azure_blob_storage_account_name.setter
    def azure_blob_storage_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_blob_storage_account_name", value)

    @property
    @pulumi.getter(name="azureBlobStorageContainerName")
    def azure_blob_storage_container_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "azure_blob_storage_container_name")

    @azure_blob_storage_container_name.setter
    def azure_blob_storage_container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_blob_storage_container_name", value)

    @property
    @pulumi.getter(name="azureBlobStorageSasToken")
    def azure_blob_storage_sas_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "azure_blob_storage_sas_token")

    @azure_blob_storage_sas_token.setter
    def azure_blob_storage_sas_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_blob_storage_sas_token", value)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_source_type")

    @data_source_type.setter
    def data_source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source_type", value)

    @property
    @pulumi.getter(name="azureBlobStorageEndpointDomainName")
    def azure_blob_storage_endpoint_domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_blob_storage_endpoint_domain_name")

    @azure_blob_storage_endpoint_domain_name.setter
    def azure_blob_storage_endpoint_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_blob_storage_endpoint_domain_name", value)


@pulumi.input_type
class DestinationDatabricksConfigurationDataSourceDestinationDatabricksDataSourceRecommendedManagedTablesArgs:
    def __init__(__self__, *,
                 data_source_type: pulumi.Input[str]):
        pulumi.set(__self__, "data_source_type", data_source_type)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_source_type")

    @data_source_type.setter
    def data_source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source_type", value)


@pulumi.input_type
class DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAmazonS3Args:
    def __init__(__self__, *,
                 data_source_type: pulumi.Input[str],
                 s3_access_key_id: pulumi.Input[str],
                 s3_bucket_name: pulumi.Input[str],
                 s3_bucket_path: pulumi.Input[str],
                 s3_bucket_region: pulumi.Input[str],
                 s3_secret_access_key: pulumi.Input[str],
                 file_name_pattern: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "data_source_type", data_source_type)
        pulumi.set(__self__, "s3_access_key_id", s3_access_key_id)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "s3_secret_access_key", s3_secret_access_key)
        if file_name_pattern is not None:
            pulumi.set(__self__, "file_name_pattern", file_name_pattern)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_source_type")

    @data_source_type.setter
    def data_source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source_type", value)

    @property
    @pulumi.getter(name="s3AccessKeyId")
    def s3_access_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_access_key_id")

    @s3_access_key_id.setter
    def s3_access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_access_key_id", value)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_name")

    @s3_bucket_name.setter
    def s3_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_name", value)

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_path")

    @s3_bucket_path.setter
    def s3_bucket_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_path", value)

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_region")

    @s3_bucket_region.setter
    def s3_bucket_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_region", value)

    @property
    @pulumi.getter(name="s3SecretAccessKey")
    def s3_secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_secret_access_key")

    @s3_secret_access_key.setter
    def s3_secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_secret_access_key", value)

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_name_pattern")

    @file_name_pattern.setter
    def file_name_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name_pattern", value)


@pulumi.input_type
class DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceAzureBlobStorageArgs:
    def __init__(__self__, *,
                 azure_blob_storage_account_name: pulumi.Input[str],
                 azure_blob_storage_container_name: pulumi.Input[str],
                 azure_blob_storage_sas_token: pulumi.Input[str],
                 data_source_type: pulumi.Input[str],
                 azure_blob_storage_endpoint_domain_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "azure_blob_storage_account_name", azure_blob_storage_account_name)
        pulumi.set(__self__, "azure_blob_storage_container_name", azure_blob_storage_container_name)
        pulumi.set(__self__, "azure_blob_storage_sas_token", azure_blob_storage_sas_token)
        pulumi.set(__self__, "data_source_type", data_source_type)
        if azure_blob_storage_endpoint_domain_name is not None:
            pulumi.set(__self__, "azure_blob_storage_endpoint_domain_name", azure_blob_storage_endpoint_domain_name)

    @property
    @pulumi.getter(name="azureBlobStorageAccountName")
    def azure_blob_storage_account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "azure_blob_storage_account_name")

    @azure_blob_storage_account_name.setter
    def azure_blob_storage_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_blob_storage_account_name", value)

    @property
    @pulumi.getter(name="azureBlobStorageContainerName")
    def azure_blob_storage_container_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "azure_blob_storage_container_name")

    @azure_blob_storage_container_name.setter
    def azure_blob_storage_container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_blob_storage_container_name", value)

    @property
    @pulumi.getter(name="azureBlobStorageSasToken")
    def azure_blob_storage_sas_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "azure_blob_storage_sas_token")

    @azure_blob_storage_sas_token.setter
    def azure_blob_storage_sas_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_blob_storage_sas_token", value)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_source_type")

    @data_source_type.setter
    def data_source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source_type", value)

    @property
    @pulumi.getter(name="azureBlobStorageEndpointDomainName")
    def azure_blob_storage_endpoint_domain_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_blob_storage_endpoint_domain_name")

    @azure_blob_storage_endpoint_domain_name.setter
    def azure_blob_storage_endpoint_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_blob_storage_endpoint_domain_name", value)


@pulumi.input_type
class DestinationDatabricksConfigurationDataSourceDestinationDatabricksUpdateDataSourceRecommendedManagedTablesArgs:
    def __init__(__self__, *,
                 data_source_type: pulumi.Input[str]):
        pulumi.set(__self__, "data_source_type", data_source_type)

    @property
    @pulumi.getter(name="dataSourceType")
    def data_source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_source_type")

    @data_source_type.setter
    def data_source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source_type", value)


@pulumi.input_type
class DestinationDevNullConfigurationArgs:
    def __init__(__self__, *,
                 destination_type: pulumi.Input[str],
                 test_destination: pulumi.Input['DestinationDevNullConfigurationTestDestinationArgs']):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "test_destination", test_destination)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="testDestination")
    def test_destination(self) -> pulumi.Input['DestinationDevNullConfigurationTestDestinationArgs']:
        return pulumi.get(self, "test_destination")

    @test_destination.setter
    def test_destination(self, value: pulumi.Input['DestinationDevNullConfigurationTestDestinationArgs']):
        pulumi.set(self, "test_destination", value)


@pulumi.input_type
class DestinationDevNullConfigurationTestDestinationArgs:
    def __init__(__self__, *,
                 destination_dev_null_test_destination_silent: Optional[pulumi.Input['DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilentArgs']] = None,
                 destination_dev_null_update_test_destination_silent: Optional[pulumi.Input['DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilentArgs']] = None):
        if destination_dev_null_test_destination_silent is not None:
            pulumi.set(__self__, "destination_dev_null_test_destination_silent", destination_dev_null_test_destination_silent)
        if destination_dev_null_update_test_destination_silent is not None:
            pulumi.set(__self__, "destination_dev_null_update_test_destination_silent", destination_dev_null_update_test_destination_silent)

    @property
    @pulumi.getter(name="destinationDevNullTestDestinationSilent")
    def destination_dev_null_test_destination_silent(self) -> Optional[pulumi.Input['DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilentArgs']]:
        return pulumi.get(self, "destination_dev_null_test_destination_silent")

    @destination_dev_null_test_destination_silent.setter
    def destination_dev_null_test_destination_silent(self, value: Optional[pulumi.Input['DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilentArgs']]):
        pulumi.set(self, "destination_dev_null_test_destination_silent", value)

    @property
    @pulumi.getter(name="destinationDevNullUpdateTestDestinationSilent")
    def destination_dev_null_update_test_destination_silent(self) -> Optional[pulumi.Input['DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilentArgs']]:
        return pulumi.get(self, "destination_dev_null_update_test_destination_silent")

    @destination_dev_null_update_test_destination_silent.setter
    def destination_dev_null_update_test_destination_silent(self, value: Optional[pulumi.Input['DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilentArgs']]):
        pulumi.set(self, "destination_dev_null_update_test_destination_silent", value)


@pulumi.input_type
class DestinationDevNullConfigurationTestDestinationDestinationDevNullTestDestinationSilentArgs:
    def __init__(__self__, *,
                 test_destination_type: pulumi.Input[str]):
        pulumi.set(__self__, "test_destination_type", test_destination_type)

    @property
    @pulumi.getter(name="testDestinationType")
    def test_destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "test_destination_type")

    @test_destination_type.setter
    def test_destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "test_destination_type", value)


@pulumi.input_type
class DestinationDevNullConfigurationTestDestinationDestinationDevNullUpdateTestDestinationSilentArgs:
    def __init__(__self__, *,
                 test_destination_type: pulumi.Input[str]):
        pulumi.set(__self__, "test_destination_type", test_destination_type)

    @property
    @pulumi.getter(name="testDestinationType")
    def test_destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "test_destination_type")

    @test_destination_type.setter
    def test_destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "test_destination_type", value)


@pulumi.input_type
class DestinationDynamodbConfigurationArgs:
    def __init__(__self__, *,
                 access_key_id: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 dynamodb_region: pulumi.Input[str],
                 dynamodb_table_name_prefix: pulumi.Input[str],
                 secret_access_key: pulumi.Input[str],
                 dynamodb_endpoint: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "dynamodb_region", dynamodb_region)
        pulumi.set(__self__, "dynamodb_table_name_prefix", dynamodb_table_name_prefix)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if dynamodb_endpoint is not None:
            pulumi.set(__self__, "dynamodb_endpoint", dynamodb_endpoint)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="dynamodbRegion")
    def dynamodb_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamodb_region")

    @dynamodb_region.setter
    def dynamodb_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamodb_region", value)

    @property
    @pulumi.getter(name="dynamodbTableNamePrefix")
    def dynamodb_table_name_prefix(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dynamodb_table_name_prefix")

    @dynamodb_table_name_prefix.setter
    def dynamodb_table_name_prefix(self, value: pulumi.Input[str]):
        pulumi.set(self, "dynamodb_table_name_prefix", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="dynamodbEndpoint")
    def dynamodb_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dynamodb_endpoint")

    @dynamodb_endpoint.setter
    def dynamodb_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dynamodb_endpoint", value)


@pulumi.input_type
class DestinationElasticsearchConfigurationArgs:
    def __init__(__self__, *,
                 destination_type: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 authentication_method: Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodArgs']] = None,
                 ca_certificate: Optional[pulumi.Input[str]] = None,
                 upsert: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "endpoint", endpoint)
        if authentication_method is not None:
            pulumi.set(__self__, "authentication_method", authentication_method)
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)
        if upsert is not None:
            pulumi.set(__self__, "upsert", upsert)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="authenticationMethod")
    def authentication_method(self) -> Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodArgs']]:
        return pulumi.get(self, "authentication_method")

    @authentication_method.setter
    def authentication_method(self, value: Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodArgs']]):
        pulumi.set(self, "authentication_method", value)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def upsert(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "upsert")

    @upsert.setter
    def upsert(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "upsert", value)


@pulumi.input_type
class DestinationElasticsearchConfigurationAuthenticationMethodArgs:
    def __init__(__self__, *,
                 destination_elasticsearch_authentication_method_api_key_secret: Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecretArgs']] = None,
                 destination_elasticsearch_authentication_method_username_password: Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePasswordArgs']] = None,
                 destination_elasticsearch_update_authentication_method_api_key_secret: Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecretArgs']] = None,
                 destination_elasticsearch_update_authentication_method_username_password: Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordArgs']] = None):
        if destination_elasticsearch_authentication_method_api_key_secret is not None:
            pulumi.set(__self__, "destination_elasticsearch_authentication_method_api_key_secret", destination_elasticsearch_authentication_method_api_key_secret)
        if destination_elasticsearch_authentication_method_username_password is not None:
            pulumi.set(__self__, "destination_elasticsearch_authentication_method_username_password", destination_elasticsearch_authentication_method_username_password)
        if destination_elasticsearch_update_authentication_method_api_key_secret is not None:
            pulumi.set(__self__, "destination_elasticsearch_update_authentication_method_api_key_secret", destination_elasticsearch_update_authentication_method_api_key_secret)
        if destination_elasticsearch_update_authentication_method_username_password is not None:
            pulumi.set(__self__, "destination_elasticsearch_update_authentication_method_username_password", destination_elasticsearch_update_authentication_method_username_password)

    @property
    @pulumi.getter(name="destinationElasticsearchAuthenticationMethodApiKeySecret")
    def destination_elasticsearch_authentication_method_api_key_secret(self) -> Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecretArgs']]:
        return pulumi.get(self, "destination_elasticsearch_authentication_method_api_key_secret")

    @destination_elasticsearch_authentication_method_api_key_secret.setter
    def destination_elasticsearch_authentication_method_api_key_secret(self, value: Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecretArgs']]):
        pulumi.set(self, "destination_elasticsearch_authentication_method_api_key_secret", value)

    @property
    @pulumi.getter(name="destinationElasticsearchAuthenticationMethodUsernamePassword")
    def destination_elasticsearch_authentication_method_username_password(self) -> Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePasswordArgs']]:
        return pulumi.get(self, "destination_elasticsearch_authentication_method_username_password")

    @destination_elasticsearch_authentication_method_username_password.setter
    def destination_elasticsearch_authentication_method_username_password(self, value: Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePasswordArgs']]):
        pulumi.set(self, "destination_elasticsearch_authentication_method_username_password", value)

    @property
    @pulumi.getter(name="destinationElasticsearchUpdateAuthenticationMethodApiKeySecret")
    def destination_elasticsearch_update_authentication_method_api_key_secret(self) -> Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecretArgs']]:
        return pulumi.get(self, "destination_elasticsearch_update_authentication_method_api_key_secret")

    @destination_elasticsearch_update_authentication_method_api_key_secret.setter
    def destination_elasticsearch_update_authentication_method_api_key_secret(self, value: Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecretArgs']]):
        pulumi.set(self, "destination_elasticsearch_update_authentication_method_api_key_secret", value)

    @property
    @pulumi.getter(name="destinationElasticsearchUpdateAuthenticationMethodUsernamePassword")
    def destination_elasticsearch_update_authentication_method_username_password(self) -> Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordArgs']]:
        return pulumi.get(self, "destination_elasticsearch_update_authentication_method_username_password")

    @destination_elasticsearch_update_authentication_method_username_password.setter
    def destination_elasticsearch_update_authentication_method_username_password(self, value: Optional[pulumi.Input['DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordArgs']]):
        pulumi.set(self, "destination_elasticsearch_update_authentication_method_username_password", value)


@pulumi.input_type
class DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodApiKeySecretArgs:
    def __init__(__self__, *,
                 api_key_id: pulumi.Input[str],
                 api_key_secret: pulumi.Input[str],
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "api_key_secret", api_key_secret)
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key_id")

    @api_key_id.setter
    def api_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key_id", value)

    @property
    @pulumi.getter(name="apiKeySecret")
    def api_key_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key_secret")

    @api_key_secret.setter
    def api_key_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key_secret", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchAuthenticationMethodUsernamePasswordArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodApiKeySecretArgs:
    def __init__(__self__, *,
                 api_key_id: pulumi.Input[str],
                 api_key_secret: pulumi.Input[str],
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "api_key_id", api_key_id)
        pulumi.set(__self__, "api_key_secret", api_key_secret)
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter(name="apiKeyId")
    def api_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key_id")

    @api_key_id.setter
    def api_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key_id", value)

    @property
    @pulumi.getter(name="apiKeySecret")
    def api_key_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key_secret")

    @api_key_secret.setter
    def api_key_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key_secret", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class DestinationElasticsearchConfigurationAuthenticationMethodDestinationElasticsearchUpdateAuthenticationMethodUsernamePasswordArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class DestinationFireboltConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 account: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 loading_method: Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodArgs']] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if loading_method is not None:
            pulumi.set(__self__, "loading_method", loading_method)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="loadingMethod")
    def loading_method(self) -> Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodArgs']]:
        return pulumi.get(self, "loading_method")

    @loading_method.setter
    def loading_method(self, value: Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodArgs']]):
        pulumi.set(self, "loading_method", value)


@pulumi.input_type
class DestinationFireboltConfigurationLoadingMethodArgs:
    def __init__(__self__, *,
                 destination_firebolt_loading_method_external_table_via_s3: Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3Args']] = None,
                 destination_firebolt_loading_method_sql_inserts: Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInsertsArgs']] = None,
                 destination_firebolt_update_loading_method_external_table_via_s3: Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3Args']] = None,
                 destination_firebolt_update_loading_method_sql_inserts: Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInsertsArgs']] = None):
        if destination_firebolt_loading_method_external_table_via_s3 is not None:
            pulumi.set(__self__, "destination_firebolt_loading_method_external_table_via_s3", destination_firebolt_loading_method_external_table_via_s3)
        if destination_firebolt_loading_method_sql_inserts is not None:
            pulumi.set(__self__, "destination_firebolt_loading_method_sql_inserts", destination_firebolt_loading_method_sql_inserts)
        if destination_firebolt_update_loading_method_external_table_via_s3 is not None:
            pulumi.set(__self__, "destination_firebolt_update_loading_method_external_table_via_s3", destination_firebolt_update_loading_method_external_table_via_s3)
        if destination_firebolt_update_loading_method_sql_inserts is not None:
            pulumi.set(__self__, "destination_firebolt_update_loading_method_sql_inserts", destination_firebolt_update_loading_method_sql_inserts)

    @property
    @pulumi.getter(name="destinationFireboltLoadingMethodExternalTableViaS3")
    def destination_firebolt_loading_method_external_table_via_s3(self) -> Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3Args']]:
        return pulumi.get(self, "destination_firebolt_loading_method_external_table_via_s3")

    @destination_firebolt_loading_method_external_table_via_s3.setter
    def destination_firebolt_loading_method_external_table_via_s3(self, value: Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3Args']]):
        pulumi.set(self, "destination_firebolt_loading_method_external_table_via_s3", value)

    @property
    @pulumi.getter(name="destinationFireboltLoadingMethodSqlInserts")
    def destination_firebolt_loading_method_sql_inserts(self) -> Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInsertsArgs']]:
        return pulumi.get(self, "destination_firebolt_loading_method_sql_inserts")

    @destination_firebolt_loading_method_sql_inserts.setter
    def destination_firebolt_loading_method_sql_inserts(self, value: Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInsertsArgs']]):
        pulumi.set(self, "destination_firebolt_loading_method_sql_inserts", value)

    @property
    @pulumi.getter(name="destinationFireboltUpdateLoadingMethodExternalTableViaS3")
    def destination_firebolt_update_loading_method_external_table_via_s3(self) -> Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3Args']]:
        return pulumi.get(self, "destination_firebolt_update_loading_method_external_table_via_s3")

    @destination_firebolt_update_loading_method_external_table_via_s3.setter
    def destination_firebolt_update_loading_method_external_table_via_s3(self, value: Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3Args']]):
        pulumi.set(self, "destination_firebolt_update_loading_method_external_table_via_s3", value)

    @property
    @pulumi.getter(name="destinationFireboltUpdateLoadingMethodSqlInserts")
    def destination_firebolt_update_loading_method_sql_inserts(self) -> Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInsertsArgs']]:
        return pulumi.get(self, "destination_firebolt_update_loading_method_sql_inserts")

    @destination_firebolt_update_loading_method_sql_inserts.setter
    def destination_firebolt_update_loading_method_sql_inserts(self, value: Optional[pulumi.Input['DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInsertsArgs']]):
        pulumi.set(self, "destination_firebolt_update_loading_method_sql_inserts", value)


@pulumi.input_type
class DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodExternalTableViaS3Args:
    def __init__(__self__, *,
                 aws_key_id: pulumi.Input[str],
                 aws_key_secret: pulumi.Input[str],
                 method: pulumi.Input[str],
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str]):
        pulumi.set(__self__, "aws_key_id", aws_key_id)
        pulumi.set(__self__, "aws_key_secret", aws_key_secret)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)

    @property
    @pulumi.getter(name="awsKeyId")
    def aws_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_key_id")

    @aws_key_id.setter
    def aws_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_key_id", value)

    @property
    @pulumi.getter(name="awsKeySecret")
    def aws_key_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_key_secret")

    @aws_key_secret.setter
    def aws_key_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_key_secret", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)


@pulumi.input_type
class DestinationFireboltConfigurationLoadingMethodDestinationFireboltLoadingMethodSqlInsertsArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodExternalTableViaS3Args:
    def __init__(__self__, *,
                 aws_key_id: pulumi.Input[str],
                 aws_key_secret: pulumi.Input[str],
                 method: pulumi.Input[str],
                 s3_bucket: pulumi.Input[str],
                 s3_region: pulumi.Input[str]):
        pulumi.set(__self__, "aws_key_id", aws_key_id)
        pulumi.set(__self__, "aws_key_secret", aws_key_secret)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "s3_bucket", s3_bucket)
        pulumi.set(__self__, "s3_region", s3_region)

    @property
    @pulumi.getter(name="awsKeyId")
    def aws_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_key_id")

    @aws_key_id.setter
    def aws_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_key_id", value)

    @property
    @pulumi.getter(name="awsKeySecret")
    def aws_key_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_key_secret")

    @aws_key_secret.setter
    def aws_key_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_key_secret", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="s3Bucket")
    def s3_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket")

    @s3_bucket.setter
    def s3_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket", value)

    @property
    @pulumi.getter(name="s3Region")
    def s3_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_region")

    @s3_region.setter
    def s3_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_region", value)


@pulumi.input_type
class DestinationFireboltConfigurationLoadingMethodDestinationFireboltUpdateLoadingMethodSqlInsertsArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class DestinationFirestoreConfigurationArgs:
    def __init__(__self__, *,
                 destination_type: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 credentials_json: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "project_id", project_id)
        if credentials_json is not None:
            pulumi.set(__self__, "credentials_json", credentials_json)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_json", value)


@pulumi.input_type
class DestinationGcsConfigurationArgs:
    def __init__(__self__, *,
                 credential: pulumi.Input['DestinationGcsConfigurationCredentialArgs'],
                 destination_type: pulumi.Input[str],
                 format: pulumi.Input['DestinationGcsConfigurationFormatArgs'],
                 gcs_bucket_name: pulumi.Input[str],
                 gcs_bucket_path: pulumi.Input[str],
                 gcs_bucket_region: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credential", credential)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "gcs_bucket_name", gcs_bucket_name)
        pulumi.set(__self__, "gcs_bucket_path", gcs_bucket_path)
        if gcs_bucket_region is not None:
            pulumi.set(__self__, "gcs_bucket_region", gcs_bucket_region)

    @property
    @pulumi.getter
    def credential(self) -> pulumi.Input['DestinationGcsConfigurationCredentialArgs']:
        return pulumi.get(self, "credential")

    @credential.setter
    def credential(self, value: pulumi.Input['DestinationGcsConfigurationCredentialArgs']):
        pulumi.set(self, "credential", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input['DestinationGcsConfigurationFormatArgs']:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input['DestinationGcsConfigurationFormatArgs']):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="gcsBucketName")
    def gcs_bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gcs_bucket_name")

    @gcs_bucket_name.setter
    def gcs_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcs_bucket_name", value)

    @property
    @pulumi.getter(name="gcsBucketPath")
    def gcs_bucket_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gcs_bucket_path")

    @gcs_bucket_path.setter
    def gcs_bucket_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcs_bucket_path", value)

    @property
    @pulumi.getter(name="gcsBucketRegion")
    def gcs_bucket_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gcs_bucket_region")

    @gcs_bucket_region.setter
    def gcs_bucket_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gcs_bucket_region", value)


@pulumi.input_type
class DestinationGcsConfigurationCredentialArgs:
    def __init__(__self__, *,
                 destination_gcs_authentication_hmac_key: Optional[pulumi.Input['DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKeyArgs']] = None,
                 destination_gcs_update_authentication_hmac_key: Optional[pulumi.Input['DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKeyArgs']] = None):
        if destination_gcs_authentication_hmac_key is not None:
            pulumi.set(__self__, "destination_gcs_authentication_hmac_key", destination_gcs_authentication_hmac_key)
        if destination_gcs_update_authentication_hmac_key is not None:
            pulumi.set(__self__, "destination_gcs_update_authentication_hmac_key", destination_gcs_update_authentication_hmac_key)

    @property
    @pulumi.getter(name="destinationGcsAuthenticationHmacKey")
    def destination_gcs_authentication_hmac_key(self) -> Optional[pulumi.Input['DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKeyArgs']]:
        return pulumi.get(self, "destination_gcs_authentication_hmac_key")

    @destination_gcs_authentication_hmac_key.setter
    def destination_gcs_authentication_hmac_key(self, value: Optional[pulumi.Input['DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKeyArgs']]):
        pulumi.set(self, "destination_gcs_authentication_hmac_key", value)

    @property
    @pulumi.getter(name="destinationGcsUpdateAuthenticationHmacKey")
    def destination_gcs_update_authentication_hmac_key(self) -> Optional[pulumi.Input['DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKeyArgs']]:
        return pulumi.get(self, "destination_gcs_update_authentication_hmac_key")

    @destination_gcs_update_authentication_hmac_key.setter
    def destination_gcs_update_authentication_hmac_key(self, value: Optional[pulumi.Input['DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKeyArgs']]):
        pulumi.set(self, "destination_gcs_update_authentication_hmac_key", value)


@pulumi.input_type
class DestinationGcsConfigurationCredentialDestinationGcsAuthenticationHmacKeyArgs:
    def __init__(__self__, *,
                 credential_type: pulumi.Input[str],
                 hmac_key_access_id: pulumi.Input[str],
                 hmac_key_secret: pulumi.Input[str]):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hmac_key_access_id")

    @hmac_key_access_id.setter
    def hmac_key_access_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hmac_key_access_id", value)

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hmac_key_secret")

    @hmac_key_secret.setter
    def hmac_key_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "hmac_key_secret", value)


@pulumi.input_type
class DestinationGcsConfigurationCredentialDestinationGcsUpdateAuthenticationHmacKeyArgs:
    def __init__(__self__, *,
                 credential_type: pulumi.Input[str],
                 hmac_key_access_id: pulumi.Input[str],
                 hmac_key_secret: pulumi.Input[str]):
        pulumi.set(__self__, "credential_type", credential_type)
        pulumi.set(__self__, "hmac_key_access_id", hmac_key_access_id)
        pulumi.set(__self__, "hmac_key_secret", hmac_key_secret)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter(name="hmacKeyAccessId")
    def hmac_key_access_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hmac_key_access_id")

    @hmac_key_access_id.setter
    def hmac_key_access_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "hmac_key_access_id", value)

    @property
    @pulumi.getter(name="hmacKeySecret")
    def hmac_key_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "hmac_key_secret")

    @hmac_key_secret.setter
    def hmac_key_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "hmac_key_secret", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatArgs:
    def __init__(__self__, *,
                 destination_gcs_output_format_avro_apache_avro: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroArgs']] = None,
                 destination_gcs_output_format_csv_comma_separated_values: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesArgs']] = None,
                 destination_gcs_output_format_json_lines_newline_delimited_json: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonArgs']] = None,
                 destination_gcs_output_format_parquet_columnar_storage: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorageArgs']] = None,
                 destination_gcs_update_output_format_avro_apache_avro: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroArgs']] = None,
                 destination_gcs_update_output_format_csv_comma_separated_values: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesArgs']] = None,
                 destination_gcs_update_output_format_json_lines_newline_delimited_json: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs']] = None,
                 destination_gcs_update_output_format_parquet_columnar_storage: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorageArgs']] = None):
        if destination_gcs_output_format_avro_apache_avro is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro", destination_gcs_output_format_avro_apache_avro)
        if destination_gcs_output_format_csv_comma_separated_values is not None:
            pulumi.set(__self__, "destination_gcs_output_format_csv_comma_separated_values", destination_gcs_output_format_csv_comma_separated_values)
        if destination_gcs_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_gcs_output_format_json_lines_newline_delimited_json", destination_gcs_output_format_json_lines_newline_delimited_json)
        if destination_gcs_output_format_parquet_columnar_storage is not None:
            pulumi.set(__self__, "destination_gcs_output_format_parquet_columnar_storage", destination_gcs_output_format_parquet_columnar_storage)
        if destination_gcs_update_output_format_avro_apache_avro is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro", destination_gcs_update_output_format_avro_apache_avro)
        if destination_gcs_update_output_format_csv_comma_separated_values is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_csv_comma_separated_values", destination_gcs_update_output_format_csv_comma_separated_values)
        if destination_gcs_update_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_json_lines_newline_delimited_json", destination_gcs_update_output_format_json_lines_newline_delimited_json)
        if destination_gcs_update_output_format_parquet_columnar_storage is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_parquet_columnar_storage", destination_gcs_update_output_format_parquet_columnar_storage)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvro")
    def destination_gcs_output_format_avro_apache_avro(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroArgs']]:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro")

    @destination_gcs_output_format_avro_apache_avro.setter
    def destination_gcs_output_format_avro_apache_avro(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroArgs']]):
        pulumi.set(self, "destination_gcs_output_format_avro_apache_avro", value)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatCsvCommaSeparatedValues")
    def destination_gcs_output_format_csv_comma_separated_values(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesArgs']]:
        return pulumi.get(self, "destination_gcs_output_format_csv_comma_separated_values")

    @destination_gcs_output_format_csv_comma_separated_values.setter
    def destination_gcs_output_format_csv_comma_separated_values(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesArgs']]):
        pulumi.set(self, "destination_gcs_output_format_csv_comma_separated_values", value)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_gcs_output_format_json_lines_newline_delimited_json(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonArgs']]:
        return pulumi.get(self, "destination_gcs_output_format_json_lines_newline_delimited_json")

    @destination_gcs_output_format_json_lines_newline_delimited_json.setter
    def destination_gcs_output_format_json_lines_newline_delimited_json(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonArgs']]):
        pulumi.set(self, "destination_gcs_output_format_json_lines_newline_delimited_json", value)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatParquetColumnarStorage")
    def destination_gcs_output_format_parquet_columnar_storage(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorageArgs']]:
        return pulumi.get(self, "destination_gcs_output_format_parquet_columnar_storage")

    @destination_gcs_output_format_parquet_columnar_storage.setter
    def destination_gcs_output_format_parquet_columnar_storage(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorageArgs']]):
        pulumi.set(self, "destination_gcs_output_format_parquet_columnar_storage", value)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvro")
    def destination_gcs_update_output_format_avro_apache_avro(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroArgs']]:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro")

    @destination_gcs_update_output_format_avro_apache_avro.setter
    def destination_gcs_update_output_format_avro_apache_avro(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroArgs']]):
        pulumi.set(self, "destination_gcs_update_output_format_avro_apache_avro", value)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatCsvCommaSeparatedValues")
    def destination_gcs_update_output_format_csv_comma_separated_values(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesArgs']]:
        return pulumi.get(self, "destination_gcs_update_output_format_csv_comma_separated_values")

    @destination_gcs_update_output_format_csv_comma_separated_values.setter
    def destination_gcs_update_output_format_csv_comma_separated_values(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesArgs']]):
        pulumi.set(self, "destination_gcs_update_output_format_csv_comma_separated_values", value)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_gcs_update_output_format_json_lines_newline_delimited_json(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs']]:
        return pulumi.get(self, "destination_gcs_update_output_format_json_lines_newline_delimited_json")

    @destination_gcs_update_output_format_json_lines_newline_delimited_json.setter
    def destination_gcs_update_output_format_json_lines_newline_delimited_json(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs']]):
        pulumi.set(self, "destination_gcs_update_output_format_json_lines_newline_delimited_json", value)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatParquetColumnarStorage")
    def destination_gcs_update_output_format_parquet_columnar_storage(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorageArgs']]:
        return pulumi.get(self, "destination_gcs_update_output_format_parquet_columnar_storage")

    @destination_gcs_update_output_format_parquet_columnar_storage.setter
    def destination_gcs_update_output_format_parquet_columnar_storage(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorageArgs']]):
        pulumi.set(self, "destination_gcs_update_output_format_parquet_columnar_storage", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroArgs:
    def __init__(__self__, *,
                 compression_codec: pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecArgs'],
                 format_type: pulumi.Input[str]):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecArgs']:
        return pulumi.get(self, "compression_codec")

    @compression_codec.setter
    def compression_codec(self, value: pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecArgs']):
        pulumi.set(self, "compression_codec", value)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecArgs:
    def __init__(__self__, *,
                 destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2Args']] = None,
                 destination_gcs_output_format_avro_apache_avro_compression_codec_deflate: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflateArgs']] = None,
                 destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs']] = None,
                 destination_gcs_output_format_avro_apache_avro_compression_codec_snappy: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappyArgs']] = None,
                 destination_gcs_output_format_avro_apache_avro_compression_codec_xz: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXzArgs']] = None,
                 destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandardArgs']] = None):
        if destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2 is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2", destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2)
        if destination_gcs_output_format_avro_apache_avro_compression_codec_deflate is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_deflate", destination_gcs_output_format_avro_apache_avro_compression_codec_deflate)
        if destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression", destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression)
        if destination_gcs_output_format_avro_apache_avro_compression_codec_snappy is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_snappy", destination_gcs_output_format_avro_apache_avro_compression_codec_snappy)
        if destination_gcs_output_format_avro_apache_avro_compression_codec_xz is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_xz", destination_gcs_output_format_avro_apache_avro_compression_codec_xz)
        if destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard is not None:
            pulumi.set(__self__, "destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard", destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2Args']]:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2")

    @destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2.setter
    def destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2Args']]):
        pulumi.set(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_bzip2", value)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflate")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_deflate(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflateArgs']]:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_deflate")

    @destination_gcs_output_format_avro_apache_avro_compression_codec_deflate.setter
    def destination_gcs_output_format_avro_apache_avro_compression_codec_deflate(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflateArgs']]):
        pulumi.set(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_deflate", value)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompression")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs']]:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression")

    @destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression.setter
    def destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs']]):
        pulumi.set(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_no_compression", value)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappy")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_snappy(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappyArgs']]:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_snappy")

    @destination_gcs_output_format_avro_apache_avro_compression_codec_snappy.setter
    def destination_gcs_output_format_avro_apache_avro_compression_codec_snappy(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappyArgs']]):
        pulumi.set(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_snappy", value)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecXz")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_xz(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXzArgs']]:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_xz")

    @destination_gcs_output_format_avro_apache_avro_compression_codec_xz.setter
    def destination_gcs_output_format_avro_apache_avro_compression_codec_xz(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXzArgs']]):
        pulumi.set(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_xz", value)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandard")
    def destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandardArgs']]:
        return pulumi.get(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard")

    @destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard.setter
    def destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandardArgs']]):
        pulumi.set(self, "destination_gcs_output_format_avro_apache_avro_compression_codec_zstandard", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecBzip2Args:
    def __init__(__self__, *,
                 codec: pulumi.Input[str]):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDeflateArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 compression_level: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "codec", codec)
        if compression_level is not None:
            pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compression_level")

    @compression_level.setter
    def compression_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compression_level", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str]):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecSnappyArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str]):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecXzArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 compression_level: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "codec", codec)
        if compression_level is not None:
            pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compression_level")

    @compression_level.setter
    def compression_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compression_level", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatAvroApacheAvroCompressionCodecDestinationGcsOutputFormatAvroApacheAvroCompressionCodecZstandardArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 compression_level: Optional[pulumi.Input[int]] = None,
                 include_checksum: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "codec", codec)
        if compression_level is not None:
            pulumi.set(__self__, "compression_level", compression_level)
        if include_checksum is not None:
            pulumi.set(__self__, "include_checksum", include_checksum)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compression_level")

    @compression_level.setter
    def compression_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compression_level", value)

    @property
    @pulumi.getter(name="includeChecksum")
    def include_checksum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_checksum")

    @include_checksum.setter
    def include_checksum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_checksum", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 compression: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionArgs']] = None,
                 flattening: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if flattening is not None:
            pulumi.set(__self__, "flattening", flattening)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionArgs']]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionArgs']]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter
    def flattening(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flattening")

    @flattening.setter
    def flattening(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flattening", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionArgs:
    def __init__(__self__, *,
                 destination_gcs_output_format_csv_comma_separated_values_compression_gzip: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs']] = None,
                 destination_gcs_output_format_csv_comma_separated_values_compression_no_compression: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs']] = None):
        if destination_gcs_output_format_csv_comma_separated_values_compression_gzip is not None:
            pulumi.set(__self__, "destination_gcs_output_format_csv_comma_separated_values_compression_gzip", destination_gcs_output_format_csv_comma_separated_values_compression_gzip)
        if destination_gcs_output_format_csv_comma_separated_values_compression_no_compression is not None:
            pulumi.set(__self__, "destination_gcs_output_format_csv_comma_separated_values_compression_no_compression", destination_gcs_output_format_csv_comma_separated_values_compression_no_compression)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzip")
    def destination_gcs_output_format_csv_comma_separated_values_compression_gzip(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs']]:
        return pulumi.get(self, "destination_gcs_output_format_csv_comma_separated_values_compression_gzip")

    @destination_gcs_output_format_csv_comma_separated_values_compression_gzip.setter
    def destination_gcs_output_format_csv_comma_separated_values_compression_gzip(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs']]):
        pulumi.set(self, "destination_gcs_output_format_csv_comma_separated_values_compression_gzip", value)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompression")
    def destination_gcs_output_format_csv_comma_separated_values_compression_no_compression(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs']]:
        return pulumi.get(self, "destination_gcs_output_format_csv_comma_separated_values_compression_no_compression")

    @destination_gcs_output_format_csv_comma_separated_values_compression_no_compression.setter
    def destination_gcs_output_format_csv_comma_separated_values_compression_no_compression(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs']]):
        pulumi.set(self, "destination_gcs_output_format_csv_comma_separated_values_compression_no_compression", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 compression: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']]):
        pulumi.set(self, "compression", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs:
    def __init__(__self__, *,
                 destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']] = None,
                 destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']] = None):
        if destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip is not None:
            pulumi.set(__self__, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip", destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip)
        if destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression is not None:
            pulumi.set(__self__, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']]:
        return pulumi.get(self, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip")

    @destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip.setter
    def destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']]):
        pulumi.set(self, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_gzip", value)

    @property
    @pulumi.getter(name="destinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']]:
        return pulumi.get(self, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression")

    @destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression.setter
    def destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']]):
        pulumi.set(self, "destination_gcs_output_format_json_lines_newline_delimited_json_compression_no_compression", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsOutputFormatParquetColumnarStorageArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 block_size_mb: Optional[pulumi.Input[int]] = None,
                 compression_codec: Optional[pulumi.Input[str]] = None,
                 dictionary_encoding: Optional[pulumi.Input[bool]] = None,
                 dictionary_page_size_kb: Optional[pulumi.Input[int]] = None,
                 max_padding_size_mb: Optional[pulumi.Input[int]] = None,
                 page_size_kb: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if block_size_mb is not None:
            pulumi.set(__self__, "block_size_mb", block_size_mb)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)
        if dictionary_encoding is not None:
            pulumi.set(__self__, "dictionary_encoding", dictionary_encoding)
        if dictionary_page_size_kb is not None:
            pulumi.set(__self__, "dictionary_page_size_kb", dictionary_page_size_kb)
        if max_padding_size_mb is not None:
            pulumi.set(__self__, "max_padding_size_mb", max_padding_size_mb)
        if page_size_kb is not None:
            pulumi.set(__self__, "page_size_kb", page_size_kb)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter(name="blockSizeMb")
    def block_size_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_size_mb")

    @block_size_mb.setter
    def block_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_size_mb", value)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_codec")

    @compression_codec.setter
    def compression_codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_codec", value)

    @property
    @pulumi.getter(name="dictionaryEncoding")
    def dictionary_encoding(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dictionary_encoding")

    @dictionary_encoding.setter
    def dictionary_encoding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dictionary_encoding", value)

    @property
    @pulumi.getter(name="dictionaryPageSizeKb")
    def dictionary_page_size_kb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dictionary_page_size_kb")

    @dictionary_page_size_kb.setter
    def dictionary_page_size_kb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dictionary_page_size_kb", value)

    @property
    @pulumi.getter(name="maxPaddingSizeMb")
    def max_padding_size_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_padding_size_mb")

    @max_padding_size_mb.setter
    def max_padding_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_padding_size_mb", value)

    @property
    @pulumi.getter(name="pageSizeKb")
    def page_size_kb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "page_size_kb")

    @page_size_kb.setter
    def page_size_kb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_size_kb", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroArgs:
    def __init__(__self__, *,
                 compression_codec: pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecArgs'],
                 format_type: pulumi.Input[str]):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecArgs']:
        return pulumi.get(self, "compression_codec")

    @compression_codec.setter
    def compression_codec(self, value: pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecArgs']):
        pulumi.set(self, "compression_codec", value)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecArgs:
    def __init__(__self__, *,
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Args']] = None,
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflateArgs']] = None,
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs']] = None,
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappyArgs']] = None,
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXzArgs']] = None,
                 destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandardArgs']] = None):
        if destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2 is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2", destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2)
        if destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate", destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate)
        if destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression", destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression)
        if destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy", destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy)
        if destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz", destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz)
        if destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard", destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Args']]:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2")

    @destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2.setter
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Args']]):
        pulumi.set(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_bzip2", value)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflate")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflateArgs']]:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate")

    @destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate.setter
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflateArgs']]):
        pulumi.set(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_deflate", value)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs']]:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression")

    @destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression.setter
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs']]):
        pulumi.set(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_no_compression", value)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappy")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappyArgs']]:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy")

    @destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy.setter
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappyArgs']]):
        pulumi.set(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_snappy", value)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXz")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXzArgs']]:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz")

    @destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz.setter
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXzArgs']]):
        pulumi.set(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_xz", value)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandard")
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandardArgs']]:
        return pulumi.get(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard")

    @destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard.setter
    def destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandardArgs']]):
        pulumi.set(self, "destination_gcs_update_output_format_avro_apache_avro_compression_codec_zstandard", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Args:
    def __init__(__self__, *,
                 codec: pulumi.Input[str]):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDeflateArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 compression_level: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "codec", codec)
        if compression_level is not None:
            pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compression_level")

    @compression_level.setter
    def compression_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compression_level", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str]):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecSnappyArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str]):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecXzArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 compression_level: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "codec", codec)
        if compression_level is not None:
            pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compression_level")

    @compression_level.setter
    def compression_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compression_level", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecDestinationGcsUpdateOutputFormatAvroApacheAvroCompressionCodecZstandardArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 compression_level: Optional[pulumi.Input[int]] = None,
                 include_checksum: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "codec", codec)
        if compression_level is not None:
            pulumi.set(__self__, "compression_level", compression_level)
        if include_checksum is not None:
            pulumi.set(__self__, "include_checksum", include_checksum)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "compression_level")

    @compression_level.setter
    def compression_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "compression_level", value)

    @property
    @pulumi.getter(name="includeChecksum")
    def include_checksum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_checksum")

    @include_checksum.setter
    def include_checksum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_checksum", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 compression: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionArgs']] = None,
                 flattening: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if flattening is not None:
            pulumi.set(__self__, "flattening", flattening)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionArgs']]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionArgs']]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter
    def flattening(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flattening")

    @flattening.setter
    def flattening(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flattening", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionArgs:
    def __init__(__self__, *,
                 destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs']] = None,
                 destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs']] = None):
        if destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip", destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip)
        if destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression", destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip")
    def destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs']]:
        return pulumi.get(self, "destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip")

    @destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip.setter
    def destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs']]):
        pulumi.set(self, "destination_gcs_update_output_format_csv_comma_separated_values_compression_gzip", value)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression")
    def destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs']]:
        return pulumi.get(self, "destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression")

    @destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression.setter
    def destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs']]):
        pulumi.set(self, "destination_gcs_update_output_format_csv_comma_separated_values_compression_no_compression", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationGcsUpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 compression: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']]):
        pulumi.set(self, "compression", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs:
    def __init__(__self__, *,
                 destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']] = None,
                 destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']] = None):
        if destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip", destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip)
        if destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression is not None:
            pulumi.set(__self__, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']]:
        return pulumi.get(self, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip")

    @destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip.setter
    def destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']]):
        pulumi.set(self, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_gzip", value)

    @property
    @pulumi.getter(name="destinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']]:
        return pulumi.get(self, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression")

    @destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression.setter
    def destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression(self, value: Optional[pulumi.Input['DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']]):
        pulumi.set(self, "destination_gcs_update_output_format_json_lines_newline_delimited_json_compression_no_compression", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationGcsUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationGcsConfigurationFormatDestinationGcsUpdateOutputFormatParquetColumnarStorageArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 block_size_mb: Optional[pulumi.Input[int]] = None,
                 compression_codec: Optional[pulumi.Input[str]] = None,
                 dictionary_encoding: Optional[pulumi.Input[bool]] = None,
                 dictionary_page_size_kb: Optional[pulumi.Input[int]] = None,
                 max_padding_size_mb: Optional[pulumi.Input[int]] = None,
                 page_size_kb: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if block_size_mb is not None:
            pulumi.set(__self__, "block_size_mb", block_size_mb)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)
        if dictionary_encoding is not None:
            pulumi.set(__self__, "dictionary_encoding", dictionary_encoding)
        if dictionary_page_size_kb is not None:
            pulumi.set(__self__, "dictionary_page_size_kb", dictionary_page_size_kb)
        if max_padding_size_mb is not None:
            pulumi.set(__self__, "max_padding_size_mb", max_padding_size_mb)
        if page_size_kb is not None:
            pulumi.set(__self__, "page_size_kb", page_size_kb)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter(name="blockSizeMb")
    def block_size_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_size_mb")

    @block_size_mb.setter
    def block_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_size_mb", value)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_codec")

    @compression_codec.setter
    def compression_codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_codec", value)

    @property
    @pulumi.getter(name="dictionaryEncoding")
    def dictionary_encoding(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dictionary_encoding")

    @dictionary_encoding.setter
    def dictionary_encoding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dictionary_encoding", value)

    @property
    @pulumi.getter(name="dictionaryPageSizeKb")
    def dictionary_page_size_kb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dictionary_page_size_kb")

    @dictionary_page_size_kb.setter
    def dictionary_page_size_kb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dictionary_page_size_kb", value)

    @property
    @pulumi.getter(name="maxPaddingSizeMb")
    def max_padding_size_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_padding_size_mb")

    @max_padding_size_mb.setter
    def max_padding_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_padding_size_mb", value)

    @property
    @pulumi.getter(name="pageSizeKb")
    def page_size_kb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "page_size_kb")

    @page_size_kb.setter
    def page_size_kb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_size_kb", value)


@pulumi.input_type
class DestinationGoogleSheetsConfigurationArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['DestinationGoogleSheetsConfigurationCredentialsArgs'],
                 destination_type: pulumi.Input[str],
                 spreadsheet_id: pulumi.Input[str]):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "spreadsheet_id", spreadsheet_id)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['DestinationGoogleSheetsConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['DestinationGoogleSheetsConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="spreadsheetId")
    def spreadsheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "spreadsheet_id")

    @spreadsheet_id.setter
    def spreadsheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "spreadsheet_id", value)


@pulumi.input_type
class DestinationGoogleSheetsConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str]):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class DestinationKeenConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 infer_timestamp: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "project_id", project_id)
        if infer_timestamp is not None:
            pulumi.set(__self__, "infer_timestamp", infer_timestamp)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="inferTimestamp")
    def infer_timestamp(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "infer_timestamp")

    @infer_timestamp.setter
    def infer_timestamp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "infer_timestamp", value)


@pulumi.input_type
class DestinationKinesisConfigurationArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 buffer_size: pulumi.Input[int],
                 destination_type: pulumi.Input[str],
                 endpoint: pulumi.Input[str],
                 private_key: pulumi.Input[str],
                 region: pulumi.Input[str],
                 shard_count: pulumi.Input[int]):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "buffer_size", buffer_size)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "shard_count", shard_count)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "buffer_size")

    @buffer_size.setter
    def buffer_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "buffer_size", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="shardCount")
    def shard_count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "shard_count")

    @shard_count.setter
    def shard_count(self, value: pulumi.Input[int]):
        pulumi.set(self, "shard_count", value)


@pulumi.input_type
class DestinationLangchainConfigurationArgs:
    def __init__(__self__, *,
                 destination_type: pulumi.Input[str],
                 embedding: pulumi.Input['DestinationLangchainConfigurationEmbeddingArgs'],
                 indexing: pulumi.Input['DestinationLangchainConfigurationIndexingArgs'],
                 processing: pulumi.Input['DestinationLangchainConfigurationProcessingArgs']):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "embedding", embedding)
        pulumi.set(__self__, "indexing", indexing)
        pulumi.set(__self__, "processing", processing)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def embedding(self) -> pulumi.Input['DestinationLangchainConfigurationEmbeddingArgs']:
        return pulumi.get(self, "embedding")

    @embedding.setter
    def embedding(self, value: pulumi.Input['DestinationLangchainConfigurationEmbeddingArgs']):
        pulumi.set(self, "embedding", value)

    @property
    @pulumi.getter
    def indexing(self) -> pulumi.Input['DestinationLangchainConfigurationIndexingArgs']:
        return pulumi.get(self, "indexing")

    @indexing.setter
    def indexing(self, value: pulumi.Input['DestinationLangchainConfigurationIndexingArgs']):
        pulumi.set(self, "indexing", value)

    @property
    @pulumi.getter
    def processing(self) -> pulumi.Input['DestinationLangchainConfigurationProcessingArgs']:
        return pulumi.get(self, "processing")

    @processing.setter
    def processing(self, value: pulumi.Input['DestinationLangchainConfigurationProcessingArgs']):
        pulumi.set(self, "processing", value)


@pulumi.input_type
class DestinationLangchainConfigurationEmbeddingArgs:
    def __init__(__self__, *,
                 destination_langchain_embedding_fake: Optional[pulumi.Input['DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFakeArgs']] = None,
                 destination_langchain_embedding_open_ai: Optional[pulumi.Input['DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAiArgs']] = None,
                 destination_langchain_update_embedding_fake: Optional[pulumi.Input['DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFakeArgs']] = None,
                 destination_langchain_update_embedding_open_ai: Optional[pulumi.Input['DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAiArgs']] = None):
        if destination_langchain_embedding_fake is not None:
            pulumi.set(__self__, "destination_langchain_embedding_fake", destination_langchain_embedding_fake)
        if destination_langchain_embedding_open_ai is not None:
            pulumi.set(__self__, "destination_langchain_embedding_open_ai", destination_langchain_embedding_open_ai)
        if destination_langchain_update_embedding_fake is not None:
            pulumi.set(__self__, "destination_langchain_update_embedding_fake", destination_langchain_update_embedding_fake)
        if destination_langchain_update_embedding_open_ai is not None:
            pulumi.set(__self__, "destination_langchain_update_embedding_open_ai", destination_langchain_update_embedding_open_ai)

    @property
    @pulumi.getter(name="destinationLangchainEmbeddingFake")
    def destination_langchain_embedding_fake(self) -> Optional[pulumi.Input['DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFakeArgs']]:
        return pulumi.get(self, "destination_langchain_embedding_fake")

    @destination_langchain_embedding_fake.setter
    def destination_langchain_embedding_fake(self, value: Optional[pulumi.Input['DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFakeArgs']]):
        pulumi.set(self, "destination_langchain_embedding_fake", value)

    @property
    @pulumi.getter(name="destinationLangchainEmbeddingOpenAi")
    def destination_langchain_embedding_open_ai(self) -> Optional[pulumi.Input['DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAiArgs']]:
        return pulumi.get(self, "destination_langchain_embedding_open_ai")

    @destination_langchain_embedding_open_ai.setter
    def destination_langchain_embedding_open_ai(self, value: Optional[pulumi.Input['DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAiArgs']]):
        pulumi.set(self, "destination_langchain_embedding_open_ai", value)

    @property
    @pulumi.getter(name="destinationLangchainUpdateEmbeddingFake")
    def destination_langchain_update_embedding_fake(self) -> Optional[pulumi.Input['DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFakeArgs']]:
        return pulumi.get(self, "destination_langchain_update_embedding_fake")

    @destination_langchain_update_embedding_fake.setter
    def destination_langchain_update_embedding_fake(self, value: Optional[pulumi.Input['DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFakeArgs']]):
        pulumi.set(self, "destination_langchain_update_embedding_fake", value)

    @property
    @pulumi.getter(name="destinationLangchainUpdateEmbeddingOpenAi")
    def destination_langchain_update_embedding_open_ai(self) -> Optional[pulumi.Input['DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAiArgs']]:
        return pulumi.get(self, "destination_langchain_update_embedding_open_ai")

    @destination_langchain_update_embedding_open_ai.setter
    def destination_langchain_update_embedding_open_ai(self, value: Optional[pulumi.Input['DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAiArgs']]):
        pulumi.set(self, "destination_langchain_update_embedding_open_ai", value)


@pulumi.input_type
class DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingFakeArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input[str]] = None):
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationLangchainConfigurationEmbeddingDestinationLangchainEmbeddingOpenAiArgs:
    def __init__(__self__, *,
                 openai_key: pulumi.Input[str],
                 mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "openai_key", openai_key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="openaiKey")
    def openai_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "openai_key")

    @openai_key.setter
    def openai_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "openai_key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingFakeArgs:
    def __init__(__self__, *,
                 mode: Optional[pulumi.Input[str]] = None):
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationLangchainConfigurationEmbeddingDestinationLangchainUpdateEmbeddingOpenAiArgs:
    def __init__(__self__, *,
                 openai_key: pulumi.Input[str],
                 mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "openai_key", openai_key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="openaiKey")
    def openai_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "openai_key")

    @openai_key.setter
    def openai_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "openai_key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationLangchainConfigurationIndexingArgs:
    def __init__(__self__, *,
                 destination_langchain_indexing_chroma_local_persistance: Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistanceArgs']] = None,
                 destination_langchain_indexing_doc_array_hnsw_search: Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearchArgs']] = None,
                 destination_langchain_indexing_pinecone: Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPineconeArgs']] = None,
                 destination_langchain_update_indexing_chroma_local_persistance: Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistanceArgs']] = None,
                 destination_langchain_update_indexing_doc_array_hnsw_search: Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearchArgs']] = None,
                 destination_langchain_update_indexing_pinecone: Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPineconeArgs']] = None):
        if destination_langchain_indexing_chroma_local_persistance is not None:
            pulumi.set(__self__, "destination_langchain_indexing_chroma_local_persistance", destination_langchain_indexing_chroma_local_persistance)
        if destination_langchain_indexing_doc_array_hnsw_search is not None:
            pulumi.set(__self__, "destination_langchain_indexing_doc_array_hnsw_search", destination_langchain_indexing_doc_array_hnsw_search)
        if destination_langchain_indexing_pinecone is not None:
            pulumi.set(__self__, "destination_langchain_indexing_pinecone", destination_langchain_indexing_pinecone)
        if destination_langchain_update_indexing_chroma_local_persistance is not None:
            pulumi.set(__self__, "destination_langchain_update_indexing_chroma_local_persistance", destination_langchain_update_indexing_chroma_local_persistance)
        if destination_langchain_update_indexing_doc_array_hnsw_search is not None:
            pulumi.set(__self__, "destination_langchain_update_indexing_doc_array_hnsw_search", destination_langchain_update_indexing_doc_array_hnsw_search)
        if destination_langchain_update_indexing_pinecone is not None:
            pulumi.set(__self__, "destination_langchain_update_indexing_pinecone", destination_langchain_update_indexing_pinecone)

    @property
    @pulumi.getter(name="destinationLangchainIndexingChromaLocalPersistance")
    def destination_langchain_indexing_chroma_local_persistance(self) -> Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistanceArgs']]:
        return pulumi.get(self, "destination_langchain_indexing_chroma_local_persistance")

    @destination_langchain_indexing_chroma_local_persistance.setter
    def destination_langchain_indexing_chroma_local_persistance(self, value: Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistanceArgs']]):
        pulumi.set(self, "destination_langchain_indexing_chroma_local_persistance", value)

    @property
    @pulumi.getter(name="destinationLangchainIndexingDocArrayHnswSearch")
    def destination_langchain_indexing_doc_array_hnsw_search(self) -> Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearchArgs']]:
        return pulumi.get(self, "destination_langchain_indexing_doc_array_hnsw_search")

    @destination_langchain_indexing_doc_array_hnsw_search.setter
    def destination_langchain_indexing_doc_array_hnsw_search(self, value: Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearchArgs']]):
        pulumi.set(self, "destination_langchain_indexing_doc_array_hnsw_search", value)

    @property
    @pulumi.getter(name="destinationLangchainIndexingPinecone")
    def destination_langchain_indexing_pinecone(self) -> Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPineconeArgs']]:
        return pulumi.get(self, "destination_langchain_indexing_pinecone")

    @destination_langchain_indexing_pinecone.setter
    def destination_langchain_indexing_pinecone(self, value: Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPineconeArgs']]):
        pulumi.set(self, "destination_langchain_indexing_pinecone", value)

    @property
    @pulumi.getter(name="destinationLangchainUpdateIndexingChromaLocalPersistance")
    def destination_langchain_update_indexing_chroma_local_persistance(self) -> Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistanceArgs']]:
        return pulumi.get(self, "destination_langchain_update_indexing_chroma_local_persistance")

    @destination_langchain_update_indexing_chroma_local_persistance.setter
    def destination_langchain_update_indexing_chroma_local_persistance(self, value: Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistanceArgs']]):
        pulumi.set(self, "destination_langchain_update_indexing_chroma_local_persistance", value)

    @property
    @pulumi.getter(name="destinationLangchainUpdateIndexingDocArrayHnswSearch")
    def destination_langchain_update_indexing_doc_array_hnsw_search(self) -> Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearchArgs']]:
        return pulumi.get(self, "destination_langchain_update_indexing_doc_array_hnsw_search")

    @destination_langchain_update_indexing_doc_array_hnsw_search.setter
    def destination_langchain_update_indexing_doc_array_hnsw_search(self, value: Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearchArgs']]):
        pulumi.set(self, "destination_langchain_update_indexing_doc_array_hnsw_search", value)

    @property
    @pulumi.getter(name="destinationLangchainUpdateIndexingPinecone")
    def destination_langchain_update_indexing_pinecone(self) -> Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPineconeArgs']]:
        return pulumi.get(self, "destination_langchain_update_indexing_pinecone")

    @destination_langchain_update_indexing_pinecone.setter
    def destination_langchain_update_indexing_pinecone(self, value: Optional[pulumi.Input['DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPineconeArgs']]):
        pulumi.set(self, "destination_langchain_update_indexing_pinecone", value)


@pulumi.input_type
class DestinationLangchainConfigurationIndexingDestinationLangchainIndexingChromaLocalPersistanceArgs:
    def __init__(__self__, *,
                 destination_path: pulumi.Input[str],
                 collection_name: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destination_path", destination_path)
        if collection_name is not None:
            pulumi.set(__self__, "collection_name", collection_name)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_path")

    @destination_path.setter
    def destination_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_path", value)

    @property
    @pulumi.getter(name="collectionName")
    def collection_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "collection_name")

    @collection_name.setter
    def collection_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection_name", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationLangchainConfigurationIndexingDestinationLangchainIndexingDocArrayHnswSearchArgs:
    def __init__(__self__, *,
                 destination_path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destination_path", destination_path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_path")

    @destination_path.setter
    def destination_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationLangchainConfigurationIndexingDestinationLangchainIndexingPineconeArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 pinecone_environment: pulumi.Input[str],
                 pinecone_key: pulumi.Input[str],
                 mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "pinecone_environment", pinecone_environment)
        pulumi.set(__self__, "pinecone_key", pinecone_key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="pineconeEnvironment")
    def pinecone_environment(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pinecone_environment")

    @pinecone_environment.setter
    def pinecone_environment(self, value: pulumi.Input[str]):
        pulumi.set(self, "pinecone_environment", value)

    @property
    @pulumi.getter(name="pineconeKey")
    def pinecone_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pinecone_key")

    @pinecone_key.setter
    def pinecone_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "pinecone_key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingChromaLocalPersistanceArgs:
    def __init__(__self__, *,
                 destination_path: pulumi.Input[str],
                 collection_name: Optional[pulumi.Input[str]] = None,
                 mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destination_path", destination_path)
        if collection_name is not None:
            pulumi.set(__self__, "collection_name", collection_name)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_path")

    @destination_path.setter
    def destination_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_path", value)

    @property
    @pulumi.getter(name="collectionName")
    def collection_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "collection_name")

    @collection_name.setter
    def collection_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "collection_name", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingDocArrayHnswSearchArgs:
    def __init__(__self__, *,
                 destination_path: pulumi.Input[str],
                 mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destination_path", destination_path)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_path")

    @destination_path.setter
    def destination_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_path", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationLangchainConfigurationIndexingDestinationLangchainUpdateIndexingPineconeArgs:
    def __init__(__self__, *,
                 index: pulumi.Input[str],
                 pinecone_environment: pulumi.Input[str],
                 pinecone_key: pulumi.Input[str],
                 mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "pinecone_environment", pinecone_environment)
        pulumi.set(__self__, "pinecone_key", pinecone_key)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def index(self) -> pulumi.Input[str]:
        return pulumi.get(self, "index")

    @index.setter
    def index(self, value: pulumi.Input[str]):
        pulumi.set(self, "index", value)

    @property
    @pulumi.getter(name="pineconeEnvironment")
    def pinecone_environment(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pinecone_environment")

    @pinecone_environment.setter
    def pinecone_environment(self, value: pulumi.Input[str]):
        pulumi.set(self, "pinecone_environment", value)

    @property
    @pulumi.getter(name="pineconeKey")
    def pinecone_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pinecone_key")

    @pinecone_key.setter
    def pinecone_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "pinecone_key", value)

    @property
    @pulumi.getter
    def mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationLangchainConfigurationProcessingArgs:
    def __init__(__self__, *,
                 chunk_size: pulumi.Input[int],
                 text_fields: pulumi.Input[Sequence[pulumi.Input[str]]],
                 chunk_overlap: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "chunk_size", chunk_size)
        pulumi.set(__self__, "text_fields", text_fields)
        if chunk_overlap is not None:
            pulumi.set(__self__, "chunk_overlap", chunk_overlap)

    @property
    @pulumi.getter(name="chunkSize")
    def chunk_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "chunk_size")

    @chunk_size.setter
    def chunk_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "chunk_size", value)

    @property
    @pulumi.getter(name="textFields")
    def text_fields(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "text_fields")

    @text_fields.setter
    def text_fields(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "text_fields", value)

    @property
    @pulumi.getter(name="chunkOverlap")
    def chunk_overlap(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "chunk_overlap")

    @chunk_overlap.setter
    def chunk_overlap(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "chunk_overlap", value)


@pulumi.input_type
class DestinationMSsqlConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 schema: pulumi.Input[str],
                 username: pulumi.Input[str],
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssl_method: Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodArgs']] = None,
                 tunnel_method: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssl_method is not None:
            pulumi.set(__self__, "ssl_method", ssl_method)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodArgs']]:
        return pulumi.get(self, "ssl_method")

    @ssl_method.setter
    def ssl_method(self, value: Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodArgs']]):
        pulumi.set(self, "ssl_method", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationMSsqlConfigurationSslMethodArgs:
    def __init__(__self__, *,
                 destination_mssql_ssl_method_encrypted_trust_server_certificate: Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificateArgs']] = None,
                 destination_mssql_ssl_method_encrypted_verify_certificate: Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificateArgs']] = None,
                 destination_mssql_update_ssl_method_encrypted_trust_server_certificate: Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificateArgs']] = None,
                 destination_mssql_update_ssl_method_encrypted_verify_certificate: Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificateArgs']] = None):
        if destination_mssql_ssl_method_encrypted_trust_server_certificate is not None:
            pulumi.set(__self__, "destination_mssql_ssl_method_encrypted_trust_server_certificate", destination_mssql_ssl_method_encrypted_trust_server_certificate)
        if destination_mssql_ssl_method_encrypted_verify_certificate is not None:
            pulumi.set(__self__, "destination_mssql_ssl_method_encrypted_verify_certificate", destination_mssql_ssl_method_encrypted_verify_certificate)
        if destination_mssql_update_ssl_method_encrypted_trust_server_certificate is not None:
            pulumi.set(__self__, "destination_mssql_update_ssl_method_encrypted_trust_server_certificate", destination_mssql_update_ssl_method_encrypted_trust_server_certificate)
        if destination_mssql_update_ssl_method_encrypted_verify_certificate is not None:
            pulumi.set(__self__, "destination_mssql_update_ssl_method_encrypted_verify_certificate", destination_mssql_update_ssl_method_encrypted_verify_certificate)

    @property
    @pulumi.getter(name="destinationMssqlSslMethodEncryptedTrustServerCertificate")
    def destination_mssql_ssl_method_encrypted_trust_server_certificate(self) -> Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificateArgs']]:
        return pulumi.get(self, "destination_mssql_ssl_method_encrypted_trust_server_certificate")

    @destination_mssql_ssl_method_encrypted_trust_server_certificate.setter
    def destination_mssql_ssl_method_encrypted_trust_server_certificate(self, value: Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificateArgs']]):
        pulumi.set(self, "destination_mssql_ssl_method_encrypted_trust_server_certificate", value)

    @property
    @pulumi.getter(name="destinationMssqlSslMethodEncryptedVerifyCertificate")
    def destination_mssql_ssl_method_encrypted_verify_certificate(self) -> Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificateArgs']]:
        return pulumi.get(self, "destination_mssql_ssl_method_encrypted_verify_certificate")

    @destination_mssql_ssl_method_encrypted_verify_certificate.setter
    def destination_mssql_ssl_method_encrypted_verify_certificate(self, value: Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificateArgs']]):
        pulumi.set(self, "destination_mssql_ssl_method_encrypted_verify_certificate", value)

    @property
    @pulumi.getter(name="destinationMssqlUpdateSslMethodEncryptedTrustServerCertificate")
    def destination_mssql_update_ssl_method_encrypted_trust_server_certificate(self) -> Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificateArgs']]:
        return pulumi.get(self, "destination_mssql_update_ssl_method_encrypted_trust_server_certificate")

    @destination_mssql_update_ssl_method_encrypted_trust_server_certificate.setter
    def destination_mssql_update_ssl_method_encrypted_trust_server_certificate(self, value: Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificateArgs']]):
        pulumi.set(self, "destination_mssql_update_ssl_method_encrypted_trust_server_certificate", value)

    @property
    @pulumi.getter(name="destinationMssqlUpdateSslMethodEncryptedVerifyCertificate")
    def destination_mssql_update_ssl_method_encrypted_verify_certificate(self) -> Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificateArgs']]:
        return pulumi.get(self, "destination_mssql_update_ssl_method_encrypted_verify_certificate")

    @destination_mssql_update_ssl_method_encrypted_verify_certificate.setter
    def destination_mssql_update_ssl_method_encrypted_verify_certificate(self, value: Optional[pulumi.Input['DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificateArgs']]):
        pulumi.set(self, "destination_mssql_update_ssl_method_encrypted_verify_certificate", value)


@pulumi.input_type
class DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedTrustServerCertificateArgs:
    def __init__(__self__, *,
                 ssl_method: pulumi.Input[str]):
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssl_method")

    @ssl_method.setter
    def ssl_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssl_method", value)


@pulumi.input_type
class DestinationMSsqlConfigurationSslMethodDestinationMssqlSslMethodEncryptedVerifyCertificateArgs:
    def __init__(__self__, *,
                 ssl_method: pulumi.Input[str],
                 host_name_in_certificate: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ssl_method", ssl_method)
        if host_name_in_certificate is not None:
            pulumi.set(__self__, "host_name_in_certificate", host_name_in_certificate)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssl_method")

    @ssl_method.setter
    def ssl_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssl_method", value)

    @property
    @pulumi.getter(name="hostNameInCertificate")
    def host_name_in_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_name_in_certificate")

    @host_name_in_certificate.setter
    def host_name_in_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name_in_certificate", value)


@pulumi.input_type
class DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedTrustServerCertificateArgs:
    def __init__(__self__, *,
                 ssl_method: pulumi.Input[str]):
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssl_method")

    @ssl_method.setter
    def ssl_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssl_method", value)


@pulumi.input_type
class DestinationMSsqlConfigurationSslMethodDestinationMssqlUpdateSslMethodEncryptedVerifyCertificateArgs:
    def __init__(__self__, *,
                 ssl_method: pulumi.Input[str],
                 host_name_in_certificate: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ssl_method", ssl_method)
        if host_name_in_certificate is not None:
            pulumi.set(__self__, "host_name_in_certificate", host_name_in_certificate)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssl_method")

    @ssl_method.setter
    def ssl_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssl_method", value)

    @property
    @pulumi.getter(name="hostNameInCertificate")
    def host_name_in_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_name_in_certificate")

    @host_name_in_certificate.setter
    def host_name_in_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name_in_certificate", value)


@pulumi.input_type
class DestinationMSsqlConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 destination_mssql_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnelArgs']] = None,
                 destination_mssql_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_mssql_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 destination_mssql_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 destination_mssql_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_mssql_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if destination_mssql_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_mssql_ssh_tunnel_method_no_tunnel", destination_mssql_ssh_tunnel_method_no_tunnel)
        if destination_mssql_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_mssql_ssh_tunnel_method_password_authentication", destination_mssql_ssh_tunnel_method_password_authentication)
        if destination_mssql_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_mssql_ssh_tunnel_method_ssh_key_authentication", destination_mssql_ssh_tunnel_method_ssh_key_authentication)
        if destination_mssql_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_mssql_update_ssh_tunnel_method_no_tunnel", destination_mssql_update_ssh_tunnel_method_no_tunnel)
        if destination_mssql_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_mssql_update_ssh_tunnel_method_password_authentication", destination_mssql_update_ssh_tunnel_method_password_authentication)
        if destination_mssql_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_mssql_update_ssh_tunnel_method_ssh_key_authentication", destination_mssql_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationMssqlSshTunnelMethodNoTunnel")
    def destination_mssql_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_mssql_ssh_tunnel_method_no_tunnel")

    @destination_mssql_ssh_tunnel_method_no_tunnel.setter
    def destination_mssql_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_mssql_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationMssqlSshTunnelMethodPasswordAuthentication")
    def destination_mssql_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_mssql_ssh_tunnel_method_password_authentication")

    @destination_mssql_ssh_tunnel_method_password_authentication.setter
    def destination_mssql_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_mssql_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationMssqlSshTunnelMethodSshKeyAuthentication")
    def destination_mssql_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_mssql_ssh_tunnel_method_ssh_key_authentication")

    @destination_mssql_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_mssql_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_mssql_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="destinationMssqlUpdateSshTunnelMethodNoTunnel")
    def destination_mssql_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_mssql_update_ssh_tunnel_method_no_tunnel")

    @destination_mssql_update_ssh_tunnel_method_no_tunnel.setter
    def destination_mssql_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_mssql_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationMssqlUpdateSshTunnelMethodPasswordAuthentication")
    def destination_mssql_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_mssql_update_ssh_tunnel_method_password_authentication")

    @destination_mssql_update_ssh_tunnel_method_password_authentication.setter
    def destination_mssql_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_mssql_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationMssqlUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_mssql_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_mssql_update_ssh_tunnel_method_ssh_key_authentication")

    @destination_mssql_update_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_mssql_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_mssql_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationMSsqlConfigurationTunnelMethodDestinationMssqlSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationMSsqlConfigurationTunnelMethodDestinationMssqlUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationMongodbConfigurationArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input['DestinationMongodbConfigurationAuthTypeArgs'],
                 database: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 instance_type: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeArgs']] = None,
                 tunnel_method: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input['DestinationMongodbConfigurationAuthTypeArgs']:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input['DestinationMongodbConfigurationAuthTypeArgs']):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeArgs']]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeArgs']]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationMongodbConfigurationAuthTypeArgs:
    def __init__(__self__, *,
                 destination_mongodb_authorization_type_login_password: Optional[pulumi.Input['DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPasswordArgs']] = None,
                 destination_mongodb_authorization_type_none: Optional[pulumi.Input['DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNoneArgs']] = None,
                 destination_mongodb_update_authorization_type_login_password: Optional[pulumi.Input['DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPasswordArgs']] = None,
                 destination_mongodb_update_authorization_type_none: Optional[pulumi.Input['DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNoneArgs']] = None):
        if destination_mongodb_authorization_type_login_password is not None:
            pulumi.set(__self__, "destination_mongodb_authorization_type_login_password", destination_mongodb_authorization_type_login_password)
        if destination_mongodb_authorization_type_none is not None:
            pulumi.set(__self__, "destination_mongodb_authorization_type_none", destination_mongodb_authorization_type_none)
        if destination_mongodb_update_authorization_type_login_password is not None:
            pulumi.set(__self__, "destination_mongodb_update_authorization_type_login_password", destination_mongodb_update_authorization_type_login_password)
        if destination_mongodb_update_authorization_type_none is not None:
            pulumi.set(__self__, "destination_mongodb_update_authorization_type_none", destination_mongodb_update_authorization_type_none)

    @property
    @pulumi.getter(name="destinationMongodbAuthorizationTypeLoginPassword")
    def destination_mongodb_authorization_type_login_password(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPasswordArgs']]:
        return pulumi.get(self, "destination_mongodb_authorization_type_login_password")

    @destination_mongodb_authorization_type_login_password.setter
    def destination_mongodb_authorization_type_login_password(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPasswordArgs']]):
        pulumi.set(self, "destination_mongodb_authorization_type_login_password", value)

    @property
    @pulumi.getter(name="destinationMongodbAuthorizationTypeNone")
    def destination_mongodb_authorization_type_none(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNoneArgs']]:
        return pulumi.get(self, "destination_mongodb_authorization_type_none")

    @destination_mongodb_authorization_type_none.setter
    def destination_mongodb_authorization_type_none(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNoneArgs']]):
        pulumi.set(self, "destination_mongodb_authorization_type_none", value)

    @property
    @pulumi.getter(name="destinationMongodbUpdateAuthorizationTypeLoginPassword")
    def destination_mongodb_update_authorization_type_login_password(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPasswordArgs']]:
        return pulumi.get(self, "destination_mongodb_update_authorization_type_login_password")

    @destination_mongodb_update_authorization_type_login_password.setter
    def destination_mongodb_update_authorization_type_login_password(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPasswordArgs']]):
        pulumi.set(self, "destination_mongodb_update_authorization_type_login_password", value)

    @property
    @pulumi.getter(name="destinationMongodbUpdateAuthorizationTypeNone")
    def destination_mongodb_update_authorization_type_none(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNoneArgs']]:
        return pulumi.get(self, "destination_mongodb_update_authorization_type_none")

    @destination_mongodb_update_authorization_type_none.setter
    def destination_mongodb_update_authorization_type_none(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNoneArgs']]):
        pulumi.set(self, "destination_mongodb_update_authorization_type_none", value)


@pulumi.input_type
class DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeLoginPasswordArgs:
    def __init__(__self__, *,
                 authorization: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class DestinationMongodbConfigurationAuthTypeDestinationMongodbAuthorizationTypeNoneArgs:
    def __init__(__self__, *,
                 authorization: pulumi.Input[str]):
        pulumi.set(__self__, "authorization", authorization)

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorization", value)


@pulumi.input_type
class DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeLoginPasswordArgs:
    def __init__(__self__, *,
                 authorization: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class DestinationMongodbConfigurationAuthTypeDestinationMongodbUpdateAuthorizationTypeNoneArgs:
    def __init__(__self__, *,
                 authorization: pulumi.Input[str]):
        pulumi.set(__self__, "authorization", authorization)

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Input[str]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: pulumi.Input[str]):
        pulumi.set(self, "authorization", value)


@pulumi.input_type
class DestinationMongodbConfigurationInstanceTypeArgs:
    def __init__(__self__, *,
                 destination_mongodb_mongo_db_instance_type_mongo_db_atlas: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlasArgs']] = None,
                 destination_mongodb_mongo_db_instance_type_replica_set: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSetArgs']] = None,
                 destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceArgs']] = None,
                 destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlasArgs']] = None,
                 destination_mongodb_update_mongo_db_instance_type_replica_set: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSetArgs']] = None,
                 destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceArgs']] = None):
        if destination_mongodb_mongo_db_instance_type_mongo_db_atlas is not None:
            pulumi.set(__self__, "destination_mongodb_mongo_db_instance_type_mongo_db_atlas", destination_mongodb_mongo_db_instance_type_mongo_db_atlas)
        if destination_mongodb_mongo_db_instance_type_replica_set is not None:
            pulumi.set(__self__, "destination_mongodb_mongo_db_instance_type_replica_set", destination_mongodb_mongo_db_instance_type_replica_set)
        if destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance is not None:
            pulumi.set(__self__, "destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance", destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance)
        if destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas is not None:
            pulumi.set(__self__, "destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas", destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas)
        if destination_mongodb_update_mongo_db_instance_type_replica_set is not None:
            pulumi.set(__self__, "destination_mongodb_update_mongo_db_instance_type_replica_set", destination_mongodb_update_mongo_db_instance_type_replica_set)
        if destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance is not None:
            pulumi.set(__self__, "destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance", destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance)

    @property
    @pulumi.getter(name="destinationMongodbMongoDbInstanceTypeMongoDbAtlas")
    def destination_mongodb_mongo_db_instance_type_mongo_db_atlas(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlasArgs']]:
        return pulumi.get(self, "destination_mongodb_mongo_db_instance_type_mongo_db_atlas")

    @destination_mongodb_mongo_db_instance_type_mongo_db_atlas.setter
    def destination_mongodb_mongo_db_instance_type_mongo_db_atlas(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlasArgs']]):
        pulumi.set(self, "destination_mongodb_mongo_db_instance_type_mongo_db_atlas", value)

    @property
    @pulumi.getter(name="destinationMongodbMongoDbInstanceTypeReplicaSet")
    def destination_mongodb_mongo_db_instance_type_replica_set(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSetArgs']]:
        return pulumi.get(self, "destination_mongodb_mongo_db_instance_type_replica_set")

    @destination_mongodb_mongo_db_instance_type_replica_set.setter
    def destination_mongodb_mongo_db_instance_type_replica_set(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSetArgs']]):
        pulumi.set(self, "destination_mongodb_mongo_db_instance_type_replica_set", value)

    @property
    @pulumi.getter(name="destinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstance")
    def destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceArgs']]:
        return pulumi.get(self, "destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance")

    @destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance.setter
    def destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceArgs']]):
        pulumi.set(self, "destination_mongodb_mongo_db_instance_type_standalone_mongo_db_instance", value)

    @property
    @pulumi.getter(name="destinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlas")
    def destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlasArgs']]:
        return pulumi.get(self, "destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas")

    @destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas.setter
    def destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlasArgs']]):
        pulumi.set(self, "destination_mongodb_update_mongo_db_instance_type_mongo_db_atlas", value)

    @property
    @pulumi.getter(name="destinationMongodbUpdateMongoDbInstanceTypeReplicaSet")
    def destination_mongodb_update_mongo_db_instance_type_replica_set(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSetArgs']]:
        return pulumi.get(self, "destination_mongodb_update_mongo_db_instance_type_replica_set")

    @destination_mongodb_update_mongo_db_instance_type_replica_set.setter
    def destination_mongodb_update_mongo_db_instance_type_replica_set(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSetArgs']]):
        pulumi.set(self, "destination_mongodb_update_mongo_db_instance_type_replica_set", value)

    @property
    @pulumi.getter(name="destinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance")
    def destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceArgs']]:
        return pulumi.get(self, "destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance")

    @destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance.setter
    def destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceArgs']]):
        pulumi.set(self, "destination_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance", value)


@pulumi.input_type
class DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeMongoDbAtlasArgs:
    def __init__(__self__, *,
                 cluster_url: pulumi.Input[str],
                 instance: pulumi.Input[str]):
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "instance", instance)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter
    def instance(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance", value)


@pulumi.input_type
class DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeReplicaSetArgs:
    def __init__(__self__, *,
                 instance: pulumi.Input[str],
                 server_addresses: pulumi.Input[str],
                 replica_set: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "server_addresses", server_addresses)
        if replica_set is not None:
            pulumi.set(__self__, "replica_set", replica_set)

    @property
    @pulumi.getter
    def instance(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="serverAddresses")
    def server_addresses(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_addresses")

    @server_addresses.setter
    def server_addresses(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_addresses", value)

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_set")

    @replica_set.setter
    def replica_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_set", value)


@pulumi.input_type
class DestinationMongodbConfigurationInstanceTypeDestinationMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 instance: pulumi.Input[str],
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def instance(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeMongoDbAtlasArgs:
    def __init__(__self__, *,
                 cluster_url: pulumi.Input[str],
                 instance: pulumi.Input[str]):
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "instance", instance)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter
    def instance(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance", value)


@pulumi.input_type
class DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeReplicaSetArgs:
    def __init__(__self__, *,
                 instance: pulumi.Input[str],
                 server_addresses: pulumi.Input[str],
                 replica_set: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "server_addresses", server_addresses)
        if replica_set is not None:
            pulumi.set(__self__, "replica_set", replica_set)

    @property
    @pulumi.getter
    def instance(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="serverAddresses")
    def server_addresses(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_addresses")

    @server_addresses.setter
    def server_addresses(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_addresses", value)

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_set")

    @replica_set.setter
    def replica_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_set", value)


@pulumi.input_type
class DestinationMongodbConfigurationInstanceTypeDestinationMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 instance: pulumi.Input[str],
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def instance(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DestinationMongodbConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 destination_mongodb_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnelArgs']] = None,
                 destination_mongodb_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_mongodb_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 destination_mongodb_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 destination_mongodb_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if destination_mongodb_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_mongodb_ssh_tunnel_method_no_tunnel", destination_mongodb_ssh_tunnel_method_no_tunnel)
        if destination_mongodb_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_mongodb_ssh_tunnel_method_password_authentication", destination_mongodb_ssh_tunnel_method_password_authentication)
        if destination_mongodb_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_mongodb_ssh_tunnel_method_ssh_key_authentication", destination_mongodb_ssh_tunnel_method_ssh_key_authentication)
        if destination_mongodb_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_mongodb_update_ssh_tunnel_method_no_tunnel", destination_mongodb_update_ssh_tunnel_method_no_tunnel)
        if destination_mongodb_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_mongodb_update_ssh_tunnel_method_password_authentication", destination_mongodb_update_ssh_tunnel_method_password_authentication)
        if destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication", destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationMongodbSshTunnelMethodNoTunnel")
    def destination_mongodb_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_mongodb_ssh_tunnel_method_no_tunnel")

    @destination_mongodb_ssh_tunnel_method_no_tunnel.setter
    def destination_mongodb_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_mongodb_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationMongodbSshTunnelMethodPasswordAuthentication")
    def destination_mongodb_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_mongodb_ssh_tunnel_method_password_authentication")

    @destination_mongodb_ssh_tunnel_method_password_authentication.setter
    def destination_mongodb_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_mongodb_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationMongodbSshTunnelMethodSshKeyAuthentication")
    def destination_mongodb_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_mongodb_ssh_tunnel_method_ssh_key_authentication")

    @destination_mongodb_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_mongodb_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_mongodb_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="destinationMongodbUpdateSshTunnelMethodNoTunnel")
    def destination_mongodb_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_mongodb_update_ssh_tunnel_method_no_tunnel")

    @destination_mongodb_update_ssh_tunnel_method_no_tunnel.setter
    def destination_mongodb_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_mongodb_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationMongodbUpdateSshTunnelMethodPasswordAuthentication")
    def destination_mongodb_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_mongodb_update_ssh_tunnel_method_password_authentication")

    @destination_mongodb_update_ssh_tunnel_method_password_authentication.setter
    def destination_mongodb_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_mongodb_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationMongodbUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication")

    @destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_mongodb_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationMongodbConfigurationTunnelMethodDestinationMongodbSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationMongodbConfigurationTunnelMethodDestinationMongodbUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationMysqlConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 username: pulumi.Input[str],
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 tunnel_method: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationMysqlConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 destination_mysql_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnelArgs']] = None,
                 destination_mysql_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_mysql_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 destination_mysql_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 destination_mysql_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_mysql_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if destination_mysql_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_mysql_ssh_tunnel_method_no_tunnel", destination_mysql_ssh_tunnel_method_no_tunnel)
        if destination_mysql_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_mysql_ssh_tunnel_method_password_authentication", destination_mysql_ssh_tunnel_method_password_authentication)
        if destination_mysql_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_mysql_ssh_tunnel_method_ssh_key_authentication", destination_mysql_ssh_tunnel_method_ssh_key_authentication)
        if destination_mysql_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_mysql_update_ssh_tunnel_method_no_tunnel", destination_mysql_update_ssh_tunnel_method_no_tunnel)
        if destination_mysql_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_mysql_update_ssh_tunnel_method_password_authentication", destination_mysql_update_ssh_tunnel_method_password_authentication)
        if destination_mysql_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_mysql_update_ssh_tunnel_method_ssh_key_authentication", destination_mysql_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationMysqlSshTunnelMethodNoTunnel")
    def destination_mysql_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_mysql_ssh_tunnel_method_no_tunnel")

    @destination_mysql_ssh_tunnel_method_no_tunnel.setter
    def destination_mysql_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_mysql_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationMysqlSshTunnelMethodPasswordAuthentication")
    def destination_mysql_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_mysql_ssh_tunnel_method_password_authentication")

    @destination_mysql_ssh_tunnel_method_password_authentication.setter
    def destination_mysql_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_mysql_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationMysqlSshTunnelMethodSshKeyAuthentication")
    def destination_mysql_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_mysql_ssh_tunnel_method_ssh_key_authentication")

    @destination_mysql_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_mysql_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_mysql_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="destinationMysqlUpdateSshTunnelMethodNoTunnel")
    def destination_mysql_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_mysql_update_ssh_tunnel_method_no_tunnel")

    @destination_mysql_update_ssh_tunnel_method_no_tunnel.setter
    def destination_mysql_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_mysql_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationMysqlUpdateSshTunnelMethodPasswordAuthentication")
    def destination_mysql_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_mysql_update_ssh_tunnel_method_password_authentication")

    @destination_mysql_update_ssh_tunnel_method_password_authentication.setter
    def destination_mysql_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_mysql_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationMysqlUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_mysql_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_mysql_update_ssh_tunnel_method_ssh_key_authentication")

    @destination_mysql_update_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_mysql_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_mysql_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationMysqlConfigurationTunnelMethodDestinationMysqlSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationMysqlConfigurationTunnelMethodDestinationMysqlUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationOracleConfigurationArgs:
    def __init__(__self__, *,
                 destination_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 sid: pulumi.Input[str],
                 username: pulumi.Input[str],
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None,
                 tunnel_method: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "sid", sid)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def sid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sid")

    @sid.setter
    def sid(self, value: pulumi.Input[str]):
        pulumi.set(self, "sid", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationOracleConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 destination_oracle_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnelArgs']] = None,
                 destination_oracle_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_oracle_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 destination_oracle_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 destination_oracle_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_oracle_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if destination_oracle_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_oracle_ssh_tunnel_method_no_tunnel", destination_oracle_ssh_tunnel_method_no_tunnel)
        if destination_oracle_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_oracle_ssh_tunnel_method_password_authentication", destination_oracle_ssh_tunnel_method_password_authentication)
        if destination_oracle_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_oracle_ssh_tunnel_method_ssh_key_authentication", destination_oracle_ssh_tunnel_method_ssh_key_authentication)
        if destination_oracle_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_oracle_update_ssh_tunnel_method_no_tunnel", destination_oracle_update_ssh_tunnel_method_no_tunnel)
        if destination_oracle_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_oracle_update_ssh_tunnel_method_password_authentication", destination_oracle_update_ssh_tunnel_method_password_authentication)
        if destination_oracle_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_oracle_update_ssh_tunnel_method_ssh_key_authentication", destination_oracle_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationOracleSshTunnelMethodNoTunnel")
    def destination_oracle_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_oracle_ssh_tunnel_method_no_tunnel")

    @destination_oracle_ssh_tunnel_method_no_tunnel.setter
    def destination_oracle_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_oracle_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationOracleSshTunnelMethodPasswordAuthentication")
    def destination_oracle_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_oracle_ssh_tunnel_method_password_authentication")

    @destination_oracle_ssh_tunnel_method_password_authentication.setter
    def destination_oracle_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_oracle_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationOracleSshTunnelMethodSshKeyAuthentication")
    def destination_oracle_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_oracle_ssh_tunnel_method_ssh_key_authentication")

    @destination_oracle_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_oracle_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_oracle_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="destinationOracleUpdateSshTunnelMethodNoTunnel")
    def destination_oracle_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_oracle_update_ssh_tunnel_method_no_tunnel")

    @destination_oracle_update_ssh_tunnel_method_no_tunnel.setter
    def destination_oracle_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_oracle_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationOracleUpdateSshTunnelMethodPasswordAuthentication")
    def destination_oracle_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_oracle_update_ssh_tunnel_method_password_authentication")

    @destination_oracle_update_ssh_tunnel_method_password_authentication.setter
    def destination_oracle_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_oracle_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationOracleUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_oracle_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_oracle_update_ssh_tunnel_method_ssh_key_authentication")

    @destination_oracle_update_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_oracle_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_oracle_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationOracleConfigurationTunnelMethodDestinationOracleSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationOracleConfigurationTunnelMethodDestinationOracleUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationPostgresConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 schema: pulumi.Input[str],
                 username: pulumi.Input[str],
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeArgs']] = None,
                 tunnel_method: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationSslModeArgs']]:
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeArgs']]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationPostgresConfigurationSslModeArgs:
    def __init__(__self__, *,
                 destination_postgres_ssl_modes_allow: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllowArgs']] = None,
                 destination_postgres_ssl_modes_disable: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisableArgs']] = None,
                 destination_postgres_ssl_modes_prefer: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesPreferArgs']] = None,
                 destination_postgres_ssl_modes_require: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequireArgs']] = None,
                 destination_postgres_ssl_modes_verify_ca: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCaArgs']] = None,
                 destination_postgres_ssl_modes_verify_full: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFullArgs']] = None,
                 destination_postgres_update_ssl_modes_allow: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllowArgs']] = None,
                 destination_postgres_update_ssl_modes_disable: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisableArgs']] = None,
                 destination_postgres_update_ssl_modes_prefer: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPreferArgs']] = None,
                 destination_postgres_update_ssl_modes_require: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequireArgs']] = None,
                 destination_postgres_update_ssl_modes_verify_ca: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCaArgs']] = None,
                 destination_postgres_update_ssl_modes_verify_full: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFullArgs']] = None):
        if destination_postgres_ssl_modes_allow is not None:
            pulumi.set(__self__, "destination_postgres_ssl_modes_allow", destination_postgres_ssl_modes_allow)
        if destination_postgres_ssl_modes_disable is not None:
            pulumi.set(__self__, "destination_postgres_ssl_modes_disable", destination_postgres_ssl_modes_disable)
        if destination_postgres_ssl_modes_prefer is not None:
            pulumi.set(__self__, "destination_postgres_ssl_modes_prefer", destination_postgres_ssl_modes_prefer)
        if destination_postgres_ssl_modes_require is not None:
            pulumi.set(__self__, "destination_postgres_ssl_modes_require", destination_postgres_ssl_modes_require)
        if destination_postgres_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "destination_postgres_ssl_modes_verify_ca", destination_postgres_ssl_modes_verify_ca)
        if destination_postgres_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "destination_postgres_ssl_modes_verify_full", destination_postgres_ssl_modes_verify_full)
        if destination_postgres_update_ssl_modes_allow is not None:
            pulumi.set(__self__, "destination_postgres_update_ssl_modes_allow", destination_postgres_update_ssl_modes_allow)
        if destination_postgres_update_ssl_modes_disable is not None:
            pulumi.set(__self__, "destination_postgres_update_ssl_modes_disable", destination_postgres_update_ssl_modes_disable)
        if destination_postgres_update_ssl_modes_prefer is not None:
            pulumi.set(__self__, "destination_postgres_update_ssl_modes_prefer", destination_postgres_update_ssl_modes_prefer)
        if destination_postgres_update_ssl_modes_require is not None:
            pulumi.set(__self__, "destination_postgres_update_ssl_modes_require", destination_postgres_update_ssl_modes_require)
        if destination_postgres_update_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "destination_postgres_update_ssl_modes_verify_ca", destination_postgres_update_ssl_modes_verify_ca)
        if destination_postgres_update_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "destination_postgres_update_ssl_modes_verify_full", destination_postgres_update_ssl_modes_verify_full)

    @property
    @pulumi.getter(name="destinationPostgresSslModesAllow")
    def destination_postgres_ssl_modes_allow(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllowArgs']]:
        return pulumi.get(self, "destination_postgres_ssl_modes_allow")

    @destination_postgres_ssl_modes_allow.setter
    def destination_postgres_ssl_modes_allow(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllowArgs']]):
        pulumi.set(self, "destination_postgres_ssl_modes_allow", value)

    @property
    @pulumi.getter(name="destinationPostgresSslModesDisable")
    def destination_postgres_ssl_modes_disable(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisableArgs']]:
        return pulumi.get(self, "destination_postgres_ssl_modes_disable")

    @destination_postgres_ssl_modes_disable.setter
    def destination_postgres_ssl_modes_disable(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisableArgs']]):
        pulumi.set(self, "destination_postgres_ssl_modes_disable", value)

    @property
    @pulumi.getter(name="destinationPostgresSslModesPrefer")
    def destination_postgres_ssl_modes_prefer(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesPreferArgs']]:
        return pulumi.get(self, "destination_postgres_ssl_modes_prefer")

    @destination_postgres_ssl_modes_prefer.setter
    def destination_postgres_ssl_modes_prefer(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesPreferArgs']]):
        pulumi.set(self, "destination_postgres_ssl_modes_prefer", value)

    @property
    @pulumi.getter(name="destinationPostgresSslModesRequire")
    def destination_postgres_ssl_modes_require(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequireArgs']]:
        return pulumi.get(self, "destination_postgres_ssl_modes_require")

    @destination_postgres_ssl_modes_require.setter
    def destination_postgres_ssl_modes_require(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequireArgs']]):
        pulumi.set(self, "destination_postgres_ssl_modes_require", value)

    @property
    @pulumi.getter(name="destinationPostgresSslModesVerifyCa")
    def destination_postgres_ssl_modes_verify_ca(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCaArgs']]:
        return pulumi.get(self, "destination_postgres_ssl_modes_verify_ca")

    @destination_postgres_ssl_modes_verify_ca.setter
    def destination_postgres_ssl_modes_verify_ca(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCaArgs']]):
        pulumi.set(self, "destination_postgres_ssl_modes_verify_ca", value)

    @property
    @pulumi.getter(name="destinationPostgresSslModesVerifyFull")
    def destination_postgres_ssl_modes_verify_full(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFullArgs']]:
        return pulumi.get(self, "destination_postgres_ssl_modes_verify_full")

    @destination_postgres_ssl_modes_verify_full.setter
    def destination_postgres_ssl_modes_verify_full(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFullArgs']]):
        pulumi.set(self, "destination_postgres_ssl_modes_verify_full", value)

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesAllow")
    def destination_postgres_update_ssl_modes_allow(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllowArgs']]:
        return pulumi.get(self, "destination_postgres_update_ssl_modes_allow")

    @destination_postgres_update_ssl_modes_allow.setter
    def destination_postgres_update_ssl_modes_allow(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllowArgs']]):
        pulumi.set(self, "destination_postgres_update_ssl_modes_allow", value)

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesDisable")
    def destination_postgres_update_ssl_modes_disable(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisableArgs']]:
        return pulumi.get(self, "destination_postgres_update_ssl_modes_disable")

    @destination_postgres_update_ssl_modes_disable.setter
    def destination_postgres_update_ssl_modes_disable(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisableArgs']]):
        pulumi.set(self, "destination_postgres_update_ssl_modes_disable", value)

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesPrefer")
    def destination_postgres_update_ssl_modes_prefer(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPreferArgs']]:
        return pulumi.get(self, "destination_postgres_update_ssl_modes_prefer")

    @destination_postgres_update_ssl_modes_prefer.setter
    def destination_postgres_update_ssl_modes_prefer(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPreferArgs']]):
        pulumi.set(self, "destination_postgres_update_ssl_modes_prefer", value)

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesRequire")
    def destination_postgres_update_ssl_modes_require(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequireArgs']]:
        return pulumi.get(self, "destination_postgres_update_ssl_modes_require")

    @destination_postgres_update_ssl_modes_require.setter
    def destination_postgres_update_ssl_modes_require(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequireArgs']]):
        pulumi.set(self, "destination_postgres_update_ssl_modes_require", value)

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesVerifyCa")
    def destination_postgres_update_ssl_modes_verify_ca(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCaArgs']]:
        return pulumi.get(self, "destination_postgres_update_ssl_modes_verify_ca")

    @destination_postgres_update_ssl_modes_verify_ca.setter
    def destination_postgres_update_ssl_modes_verify_ca(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCaArgs']]):
        pulumi.set(self, "destination_postgres_update_ssl_modes_verify_ca", value)

    @property
    @pulumi.getter(name="destinationPostgresUpdateSslModesVerifyFull")
    def destination_postgres_update_ssl_modes_verify_full(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFullArgs']]:
        return pulumi.get(self, "destination_postgres_update_ssl_modes_verify_full")

    @destination_postgres_update_ssl_modes_verify_full.setter
    def destination_postgres_update_ssl_modes_verify_full(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFullArgs']]):
        pulumi.set(self, "destination_postgres_update_ssl_modes_verify_full", value)


@pulumi.input_type
class DestinationPostgresConfigurationSslModeDestinationPostgresSslModesAllowArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationPostgresConfigurationSslModeDestinationPostgresSslModesDisableArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationPostgresConfigurationSslModeDestinationPostgresSslModesPreferArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationPostgresConfigurationSslModeDestinationPostgresSslModesRequireArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyCaArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class DestinationPostgresConfigurationSslModeDestinationPostgresSslModesVerifyFullArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 client_certificate: pulumi.Input[str],
                 client_key: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "mode", mode)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesAllowArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesDisableArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesPreferArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesRequireArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyCaArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class DestinationPostgresConfigurationSslModeDestinationPostgresUpdateSslModesVerifyFullArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 client_certificate: pulumi.Input[str],
                 client_key: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "mode", mode)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class DestinationPostgresConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 destination_postgres_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnelArgs']] = None,
                 destination_postgres_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_postgres_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 destination_postgres_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 destination_postgres_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_postgres_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if destination_postgres_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_postgres_ssh_tunnel_method_no_tunnel", destination_postgres_ssh_tunnel_method_no_tunnel)
        if destination_postgres_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_postgres_ssh_tunnel_method_password_authentication", destination_postgres_ssh_tunnel_method_password_authentication)
        if destination_postgres_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_postgres_ssh_tunnel_method_ssh_key_authentication", destination_postgres_ssh_tunnel_method_ssh_key_authentication)
        if destination_postgres_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_postgres_update_ssh_tunnel_method_no_tunnel", destination_postgres_update_ssh_tunnel_method_no_tunnel)
        if destination_postgres_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_postgres_update_ssh_tunnel_method_password_authentication", destination_postgres_update_ssh_tunnel_method_password_authentication)
        if destination_postgres_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_postgres_update_ssh_tunnel_method_ssh_key_authentication", destination_postgres_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationPostgresSshTunnelMethodNoTunnel")
    def destination_postgres_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_postgres_ssh_tunnel_method_no_tunnel")

    @destination_postgres_ssh_tunnel_method_no_tunnel.setter
    def destination_postgres_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_postgres_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationPostgresSshTunnelMethodPasswordAuthentication")
    def destination_postgres_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_postgres_ssh_tunnel_method_password_authentication")

    @destination_postgres_ssh_tunnel_method_password_authentication.setter
    def destination_postgres_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_postgres_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationPostgresSshTunnelMethodSshKeyAuthentication")
    def destination_postgres_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_postgres_ssh_tunnel_method_ssh_key_authentication")

    @destination_postgres_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_postgres_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_postgres_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="destinationPostgresUpdateSshTunnelMethodNoTunnel")
    def destination_postgres_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_postgres_update_ssh_tunnel_method_no_tunnel")

    @destination_postgres_update_ssh_tunnel_method_no_tunnel.setter
    def destination_postgres_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_postgres_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationPostgresUpdateSshTunnelMethodPasswordAuthentication")
    def destination_postgres_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_postgres_update_ssh_tunnel_method_password_authentication")

    @destination_postgres_update_ssh_tunnel_method_password_authentication.setter
    def destination_postgres_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_postgres_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationPostgresUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_postgres_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_postgres_update_ssh_tunnel_method_ssh_key_authentication")

    @destination_postgres_update_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_postgres_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_postgres_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationPostgresConfigurationTunnelMethodDestinationPostgresSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationPostgresConfigurationTunnelMethodDestinationPostgresUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationPubsubConfigurationArgs:
    def __init__(__self__, *,
                 batching_enabled: pulumi.Input[bool],
                 credentials_json: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 ordering_enabled: pulumi.Input[bool],
                 project_id: pulumi.Input[str],
                 topic_id: pulumi.Input[str],
                 batching_delay_threshold: Optional[pulumi.Input[int]] = None,
                 batching_element_count_threshold: Optional[pulumi.Input[int]] = None,
                 batching_request_bytes_threshold: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "batching_enabled", batching_enabled)
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "ordering_enabled", ordering_enabled)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "topic_id", topic_id)
        if batching_delay_threshold is not None:
            pulumi.set(__self__, "batching_delay_threshold", batching_delay_threshold)
        if batching_element_count_threshold is not None:
            pulumi.set(__self__, "batching_element_count_threshold", batching_element_count_threshold)
        if batching_request_bytes_threshold is not None:
            pulumi.set(__self__, "batching_request_bytes_threshold", batching_request_bytes_threshold)

    @property
    @pulumi.getter(name="batchingEnabled")
    def batching_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "batching_enabled")

    @batching_enabled.setter
    def batching_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "batching_enabled", value)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_json", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter(name="orderingEnabled")
    def ordering_enabled(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "ordering_enabled")

    @ordering_enabled.setter
    def ordering_enabled(self, value: pulumi.Input[bool]):
        pulumi.set(self, "ordering_enabled", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="topicId")
    def topic_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic_id")

    @topic_id.setter
    def topic_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic_id", value)

    @property
    @pulumi.getter(name="batchingDelayThreshold")
    def batching_delay_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batching_delay_threshold")

    @batching_delay_threshold.setter
    def batching_delay_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batching_delay_threshold", value)

    @property
    @pulumi.getter(name="batchingElementCountThreshold")
    def batching_element_count_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batching_element_count_threshold")

    @batching_element_count_threshold.setter
    def batching_element_count_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batching_element_count_threshold", value)

    @property
    @pulumi.getter(name="batchingRequestBytesThreshold")
    def batching_request_bytes_threshold(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batching_request_bytes_threshold")

    @batching_request_bytes_threshold.setter
    def batching_request_bytes_threshold(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batching_request_bytes_threshold", value)


@pulumi.input_type
class DestinationRedisConfigurationArgs:
    def __init__(__self__, *,
                 cache_type: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 username: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 ssl: Optional[pulumi.Input[bool]] = None,
                 ssl_mode: Optional[pulumi.Input['DestinationRedisConfigurationSslModeArgs']] = None,
                 tunnel_method: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "cache_type", cache_type)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssl is not None:
            pulumi.set(__self__, "ssl", ssl)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="cacheType")
    def cache_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cache_type")

    @cache_type.setter
    def cache_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "cache_type", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def ssl(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ssl")

    @ssl.setter
    def ssl(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ssl", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input['DestinationRedisConfigurationSslModeArgs']]:
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input['DestinationRedisConfigurationSslModeArgs']]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationRedisConfigurationSslModeArgs:
    def __init__(__self__, *,
                 destination_redis_ssl_modes_disable: Optional[pulumi.Input['DestinationRedisConfigurationSslModeDestinationRedisSslModesDisableArgs']] = None,
                 destination_redis_ssl_modes_verify_full: Optional[pulumi.Input['DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFullArgs']] = None,
                 destination_redis_update_ssl_modes_disable: Optional[pulumi.Input['DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisableArgs']] = None,
                 destination_redis_update_ssl_modes_verify_full: Optional[pulumi.Input['DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFullArgs']] = None):
        if destination_redis_ssl_modes_disable is not None:
            pulumi.set(__self__, "destination_redis_ssl_modes_disable", destination_redis_ssl_modes_disable)
        if destination_redis_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "destination_redis_ssl_modes_verify_full", destination_redis_ssl_modes_verify_full)
        if destination_redis_update_ssl_modes_disable is not None:
            pulumi.set(__self__, "destination_redis_update_ssl_modes_disable", destination_redis_update_ssl_modes_disable)
        if destination_redis_update_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "destination_redis_update_ssl_modes_verify_full", destination_redis_update_ssl_modes_verify_full)

    @property
    @pulumi.getter(name="destinationRedisSslModesDisable")
    def destination_redis_ssl_modes_disable(self) -> Optional[pulumi.Input['DestinationRedisConfigurationSslModeDestinationRedisSslModesDisableArgs']]:
        return pulumi.get(self, "destination_redis_ssl_modes_disable")

    @destination_redis_ssl_modes_disable.setter
    def destination_redis_ssl_modes_disable(self, value: Optional[pulumi.Input['DestinationRedisConfigurationSslModeDestinationRedisSslModesDisableArgs']]):
        pulumi.set(self, "destination_redis_ssl_modes_disable", value)

    @property
    @pulumi.getter(name="destinationRedisSslModesVerifyFull")
    def destination_redis_ssl_modes_verify_full(self) -> Optional[pulumi.Input['DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFullArgs']]:
        return pulumi.get(self, "destination_redis_ssl_modes_verify_full")

    @destination_redis_ssl_modes_verify_full.setter
    def destination_redis_ssl_modes_verify_full(self, value: Optional[pulumi.Input['DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFullArgs']]):
        pulumi.set(self, "destination_redis_ssl_modes_verify_full", value)

    @property
    @pulumi.getter(name="destinationRedisUpdateSslModesDisable")
    def destination_redis_update_ssl_modes_disable(self) -> Optional[pulumi.Input['DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisableArgs']]:
        return pulumi.get(self, "destination_redis_update_ssl_modes_disable")

    @destination_redis_update_ssl_modes_disable.setter
    def destination_redis_update_ssl_modes_disable(self, value: Optional[pulumi.Input['DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisableArgs']]):
        pulumi.set(self, "destination_redis_update_ssl_modes_disable", value)

    @property
    @pulumi.getter(name="destinationRedisUpdateSslModesVerifyFull")
    def destination_redis_update_ssl_modes_verify_full(self) -> Optional[pulumi.Input['DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFullArgs']]:
        return pulumi.get(self, "destination_redis_update_ssl_modes_verify_full")

    @destination_redis_update_ssl_modes_verify_full.setter
    def destination_redis_update_ssl_modes_verify_full(self, value: Optional[pulumi.Input['DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFullArgs']]):
        pulumi.set(self, "destination_redis_update_ssl_modes_verify_full", value)


@pulumi.input_type
class DestinationRedisConfigurationSslModeDestinationRedisSslModesDisableArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationRedisConfigurationSslModeDestinationRedisSslModesVerifyFullArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 client_certificate: pulumi.Input[str],
                 client_key: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "mode", mode)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesDisableArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class DestinationRedisConfigurationSslModeDestinationRedisUpdateSslModesVerifyFullArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 client_certificate: pulumi.Input[str],
                 client_key: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "client_certificate", client_certificate)
        pulumi.set(__self__, "client_key", client_key)
        pulumi.set(__self__, "mode", mode)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class DestinationRedisConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 destination_redis_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnelArgs']] = None,
                 destination_redis_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_redis_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 destination_redis_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 destination_redis_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_redis_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if destination_redis_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_redis_ssh_tunnel_method_no_tunnel", destination_redis_ssh_tunnel_method_no_tunnel)
        if destination_redis_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_redis_ssh_tunnel_method_password_authentication", destination_redis_ssh_tunnel_method_password_authentication)
        if destination_redis_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_redis_ssh_tunnel_method_ssh_key_authentication", destination_redis_ssh_tunnel_method_ssh_key_authentication)
        if destination_redis_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_redis_update_ssh_tunnel_method_no_tunnel", destination_redis_update_ssh_tunnel_method_no_tunnel)
        if destination_redis_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_redis_update_ssh_tunnel_method_password_authentication", destination_redis_update_ssh_tunnel_method_password_authentication)
        if destination_redis_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_redis_update_ssh_tunnel_method_ssh_key_authentication", destination_redis_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationRedisSshTunnelMethodNoTunnel")
    def destination_redis_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_redis_ssh_tunnel_method_no_tunnel")

    @destination_redis_ssh_tunnel_method_no_tunnel.setter
    def destination_redis_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_redis_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationRedisSshTunnelMethodPasswordAuthentication")
    def destination_redis_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_redis_ssh_tunnel_method_password_authentication")

    @destination_redis_ssh_tunnel_method_password_authentication.setter
    def destination_redis_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_redis_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationRedisSshTunnelMethodSshKeyAuthentication")
    def destination_redis_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_redis_ssh_tunnel_method_ssh_key_authentication")

    @destination_redis_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_redis_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_redis_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="destinationRedisUpdateSshTunnelMethodNoTunnel")
    def destination_redis_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_redis_update_ssh_tunnel_method_no_tunnel")

    @destination_redis_update_ssh_tunnel_method_no_tunnel.setter
    def destination_redis_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_redis_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationRedisUpdateSshTunnelMethodPasswordAuthentication")
    def destination_redis_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_redis_update_ssh_tunnel_method_password_authentication")

    @destination_redis_update_ssh_tunnel_method_password_authentication.setter
    def destination_redis_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_redis_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationRedisUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_redis_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_redis_update_ssh_tunnel_method_ssh_key_authentication")

    @destination_redis_update_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_redis_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_redis_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationRedisConfigurationTunnelMethodDestinationRedisSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationRedisConfigurationTunnelMethodDestinationRedisUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationRedshiftConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 schema: pulumi.Input[str],
                 username: pulumi.Input[str],
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 tunnel_method: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodArgs']] = None,
                 uploading_method: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodArgs']] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)
        if uploading_method is not None:
            pulumi.set(__self__, "uploading_method", uploading_method)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="uploadingMethod")
    def uploading_method(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodArgs']]:
        return pulumi.get(self, "uploading_method")

    @uploading_method.setter
    def uploading_method(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodArgs']]):
        pulumi.set(self, "uploading_method", value)


@pulumi.input_type
class DestinationRedshiftConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 destination_redshift_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnelArgs']] = None,
                 destination_redshift_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_redshift_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 destination_redshift_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 destination_redshift_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_redshift_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if destination_redshift_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_redshift_ssh_tunnel_method_no_tunnel", destination_redshift_ssh_tunnel_method_no_tunnel)
        if destination_redshift_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_redshift_ssh_tunnel_method_password_authentication", destination_redshift_ssh_tunnel_method_password_authentication)
        if destination_redshift_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_redshift_ssh_tunnel_method_ssh_key_authentication", destination_redshift_ssh_tunnel_method_ssh_key_authentication)
        if destination_redshift_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_redshift_update_ssh_tunnel_method_no_tunnel", destination_redshift_update_ssh_tunnel_method_no_tunnel)
        if destination_redshift_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_redshift_update_ssh_tunnel_method_password_authentication", destination_redshift_update_ssh_tunnel_method_password_authentication)
        if destination_redshift_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_redshift_update_ssh_tunnel_method_ssh_key_authentication", destination_redshift_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationRedshiftSshTunnelMethodNoTunnel")
    def destination_redshift_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_redshift_ssh_tunnel_method_no_tunnel")

    @destination_redshift_ssh_tunnel_method_no_tunnel.setter
    def destination_redshift_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_redshift_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationRedshiftSshTunnelMethodPasswordAuthentication")
    def destination_redshift_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_redshift_ssh_tunnel_method_password_authentication")

    @destination_redshift_ssh_tunnel_method_password_authentication.setter
    def destination_redshift_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_redshift_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationRedshiftSshTunnelMethodSshKeyAuthentication")
    def destination_redshift_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_redshift_ssh_tunnel_method_ssh_key_authentication")

    @destination_redshift_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_redshift_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_redshift_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="destinationRedshiftUpdateSshTunnelMethodNoTunnel")
    def destination_redshift_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_redshift_update_ssh_tunnel_method_no_tunnel")

    @destination_redshift_update_ssh_tunnel_method_no_tunnel.setter
    def destination_redshift_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_redshift_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationRedshiftUpdateSshTunnelMethodPasswordAuthentication")
    def destination_redshift_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_redshift_update_ssh_tunnel_method_password_authentication")

    @destination_redshift_update_ssh_tunnel_method_password_authentication.setter
    def destination_redshift_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_redshift_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationRedshiftUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_redshift_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_redshift_update_ssh_tunnel_method_ssh_key_authentication")

    @destination_redshift_update_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_redshift_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_redshift_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationRedshiftConfigurationTunnelMethodDestinationRedshiftUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationRedshiftConfigurationUploadingMethodArgs:
    def __init__(__self__, *,
                 destination_redshift_update_uploading_method_s3_staging: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingArgs']] = None,
                 destination_redshift_update_uploading_method_standard: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandardArgs']] = None,
                 destination_redshift_uploading_method_s3_staging: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingArgs']] = None,
                 destination_redshift_uploading_method_standard: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandardArgs']] = None):
        if destination_redshift_update_uploading_method_s3_staging is not None:
            pulumi.set(__self__, "destination_redshift_update_uploading_method_s3_staging", destination_redshift_update_uploading_method_s3_staging)
        if destination_redshift_update_uploading_method_standard is not None:
            pulumi.set(__self__, "destination_redshift_update_uploading_method_standard", destination_redshift_update_uploading_method_standard)
        if destination_redshift_uploading_method_s3_staging is not None:
            pulumi.set(__self__, "destination_redshift_uploading_method_s3_staging", destination_redshift_uploading_method_s3_staging)
        if destination_redshift_uploading_method_standard is not None:
            pulumi.set(__self__, "destination_redshift_uploading_method_standard", destination_redshift_uploading_method_standard)

    @property
    @pulumi.getter(name="destinationRedshiftUpdateUploadingMethodS3Staging")
    def destination_redshift_update_uploading_method_s3_staging(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingArgs']]:
        return pulumi.get(self, "destination_redshift_update_uploading_method_s3_staging")

    @destination_redshift_update_uploading_method_s3_staging.setter
    def destination_redshift_update_uploading_method_s3_staging(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingArgs']]):
        pulumi.set(self, "destination_redshift_update_uploading_method_s3_staging", value)

    @property
    @pulumi.getter(name="destinationRedshiftUpdateUploadingMethodStandard")
    def destination_redshift_update_uploading_method_standard(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandardArgs']]:
        return pulumi.get(self, "destination_redshift_update_uploading_method_standard")

    @destination_redshift_update_uploading_method_standard.setter
    def destination_redshift_update_uploading_method_standard(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandardArgs']]):
        pulumi.set(self, "destination_redshift_update_uploading_method_standard", value)

    @property
    @pulumi.getter(name="destinationRedshiftUploadingMethodS3Staging")
    def destination_redshift_uploading_method_s3_staging(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingArgs']]:
        return pulumi.get(self, "destination_redshift_uploading_method_s3_staging")

    @destination_redshift_uploading_method_s3_staging.setter
    def destination_redshift_uploading_method_s3_staging(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingArgs']]):
        pulumi.set(self, "destination_redshift_uploading_method_s3_staging", value)

    @property
    @pulumi.getter(name="destinationRedshiftUploadingMethodStandard")
    def destination_redshift_uploading_method_standard(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandardArgs']]:
        return pulumi.get(self, "destination_redshift_uploading_method_standard")

    @destination_redshift_uploading_method_standard.setter
    def destination_redshift_uploading_method_standard(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandardArgs']]):
        pulumi.set(self, "destination_redshift_uploading_method_standard", value)


@pulumi.input_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingArgs:
    def __init__(__self__, *,
                 access_key_id: pulumi.Input[str],
                 method: pulumi.Input[str],
                 s3_bucket_name: pulumi.Input[str],
                 s3_bucket_region: pulumi.Input[str],
                 secret_access_key: pulumi.Input[str],
                 encryption: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionArgs']] = None,
                 file_buffer_count: Optional[pulumi.Input[int]] = None,
                 file_name_pattern: Optional[pulumi.Input[str]] = None,
                 purge_staging_data: Optional[pulumi.Input[bool]] = None,
                 s3_bucket_path: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if file_buffer_count is not None:
            pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        if file_name_pattern is not None:
            pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        if purge_staging_data is not None:
            pulumi.set(__self__, "purge_staging_data", purge_staging_data)
        if s3_bucket_path is not None:
            pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_name")

    @s3_bucket_name.setter
    def s3_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_name", value)

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_region")

    @s3_bucket_region.setter
    def s3_bucket_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_region", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionArgs']]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_buffer_count")

    @file_buffer_count.setter
    def file_buffer_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_buffer_count", value)

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_name_pattern")

    @file_name_pattern.setter
    def file_name_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name_pattern", value)

    @property
    @pulumi.getter(name="purgeStagingData")
    def purge_staging_data(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "purge_staging_data")

    @purge_staging_data.setter
    def purge_staging_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "purge_staging_data", value)

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_bucket_path")

    @s3_bucket_path.setter
    def s3_bucket_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_bucket_path", value)


@pulumi.input_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionArgs:
    def __init__(__self__, *,
                 destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionArgs']] = None,
                 destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryptionArgs']] = None):
        if destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption is not None:
            pulumi.set(__self__, "destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption", destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption)
        if destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption is not None:
            pulumi.set(__self__, "destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption", destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption)

    @property
    @pulumi.getter(name="destinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption")
    def destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionArgs']]:
        return pulumi.get(self, "destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption")

    @destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption.setter
    def destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionArgs']]):
        pulumi.set(self, "destination_redshift_update_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption", value)

    @property
    @pulumi.getter(name="destinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryption")
    def destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryptionArgs']]:
        return pulumi.get(self, "destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption")

    @destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption.setter
    def destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryptionArgs']]):
        pulumi.set(self, "destination_redshift_update_uploading_method_s3_staging_encryption_no_encryption", value)


@pulumi.input_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionArgs:
    def __init__(__self__, *,
                 encryption_type: pulumi.Input[str],
                 key_encrypting_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "encryption_type", encryption_type)
        if key_encrypting_key is not None:
            pulumi.set(__self__, "key_encrypting_key", key_encrypting_key)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "encryption_type", value)

    @property
    @pulumi.getter(name="keyEncryptingKey")
    def key_encrypting_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_encrypting_key")

    @key_encrypting_key.setter
    def key_encrypting_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_encrypting_key", value)


@pulumi.input_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionDestinationRedshiftUpdateUploadingMethodS3StagingEncryptionNoEncryptionArgs:
    def __init__(__self__, *,
                 encryption_type: pulumi.Input[str]):
        pulumi.set(__self__, "encryption_type", encryption_type)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "encryption_type", value)


@pulumi.input_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUpdateUploadingMethodStandardArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingArgs:
    def __init__(__self__, *,
                 access_key_id: pulumi.Input[str],
                 method: pulumi.Input[str],
                 s3_bucket_name: pulumi.Input[str],
                 s3_bucket_region: pulumi.Input[str],
                 secret_access_key: pulumi.Input[str],
                 encryption: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionArgs']] = None,
                 file_buffer_count: Optional[pulumi.Input[int]] = None,
                 file_name_pattern: Optional[pulumi.Input[str]] = None,
                 purge_staging_data: Optional[pulumi.Input[bool]] = None,
                 s3_bucket_path: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        if encryption is not None:
            pulumi.set(__self__, "encryption", encryption)
        if file_buffer_count is not None:
            pulumi.set(__self__, "file_buffer_count", file_buffer_count)
        if file_name_pattern is not None:
            pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        if purge_staging_data is not None:
            pulumi.set(__self__, "purge_staging_data", purge_staging_data)
        if s3_bucket_path is not None:
            pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_name")

    @s3_bucket_name.setter
    def s3_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_name", value)

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_region")

    @s3_bucket_region.setter
    def s3_bucket_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_region", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter
    def encryption(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionArgs']]:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionArgs']]):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter(name="fileBufferCount")
    def file_buffer_count(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "file_buffer_count")

    @file_buffer_count.setter
    def file_buffer_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "file_buffer_count", value)

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_name_pattern")

    @file_name_pattern.setter
    def file_name_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name_pattern", value)

    @property
    @pulumi.getter(name="purgeStagingData")
    def purge_staging_data(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "purge_staging_data")

    @purge_staging_data.setter
    def purge_staging_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "purge_staging_data", value)

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_bucket_path")

    @s3_bucket_path.setter
    def s3_bucket_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_bucket_path", value)


@pulumi.input_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionArgs:
    def __init__(__self__, *,
                 destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionArgs']] = None,
                 destination_redshift_uploading_method_s3_staging_encryption_no_encryption: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryptionArgs']] = None):
        if destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption is not None:
            pulumi.set(__self__, "destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption", destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption)
        if destination_redshift_uploading_method_s3_staging_encryption_no_encryption is not None:
            pulumi.set(__self__, "destination_redshift_uploading_method_s3_staging_encryption_no_encryption", destination_redshift_uploading_method_s3_staging_encryption_no_encryption)

    @property
    @pulumi.getter(name="destinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryption")
    def destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionArgs']]:
        return pulumi.get(self, "destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption")

    @destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption.setter
    def destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionArgs']]):
        pulumi.set(self, "destination_redshift_uploading_method_s3_staging_encryption_aes_cbc_envelope_encryption", value)

    @property
    @pulumi.getter(name="destinationRedshiftUploadingMethodS3StagingEncryptionNoEncryption")
    def destination_redshift_uploading_method_s3_staging_encryption_no_encryption(self) -> Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryptionArgs']]:
        return pulumi.get(self, "destination_redshift_uploading_method_s3_staging_encryption_no_encryption")

    @destination_redshift_uploading_method_s3_staging_encryption_no_encryption.setter
    def destination_redshift_uploading_method_s3_staging_encryption_no_encryption(self, value: Optional[pulumi.Input['DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryptionArgs']]):
        pulumi.set(self, "destination_redshift_uploading_method_s3_staging_encryption_no_encryption", value)


@pulumi.input_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionAesCbcEnvelopeEncryptionArgs:
    def __init__(__self__, *,
                 encryption_type: pulumi.Input[str],
                 key_encrypting_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "encryption_type", encryption_type)
        if key_encrypting_key is not None:
            pulumi.set(__self__, "key_encrypting_key", key_encrypting_key)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "encryption_type", value)

    @property
    @pulumi.getter(name="keyEncryptingKey")
    def key_encrypting_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "key_encrypting_key")

    @key_encrypting_key.setter
    def key_encrypting_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_encrypting_key", value)


@pulumi.input_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodS3StagingEncryptionDestinationRedshiftUploadingMethodS3StagingEncryptionNoEncryptionArgs:
    def __init__(__self__, *,
                 encryption_type: pulumi.Input[str]):
        pulumi.set(__self__, "encryption_type", encryption_type)

    @property
    @pulumi.getter(name="encryptionType")
    def encryption_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "encryption_type")

    @encryption_type.setter
    def encryption_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "encryption_type", value)


@pulumi.input_type
class DestinationRedshiftConfigurationUploadingMethodDestinationRedshiftUploadingMethodStandardArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class DestinationS3ConfigurationArgs:
    def __init__(__self__, *,
                 destination_type: pulumi.Input[str],
                 format: pulumi.Input['DestinationS3ConfigurationFormatArgs'],
                 s3_bucket_name: pulumi.Input[str],
                 s3_bucket_path: pulumi.Input[str],
                 s3_bucket_region: pulumi.Input[str],
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 file_name_pattern: Optional[pulumi.Input[str]] = None,
                 s3_endpoint: Optional[pulumi.Input[str]] = None,
                 s3_path_format: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if file_name_pattern is not None:
            pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        if s3_endpoint is not None:
            pulumi.set(__self__, "s3_endpoint", s3_endpoint)
        if s3_path_format is not None:
            pulumi.set(__self__, "s3_path_format", s3_path_format)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input['DestinationS3ConfigurationFormatArgs']:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input['DestinationS3ConfigurationFormatArgs']):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_name")

    @s3_bucket_name.setter
    def s3_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_name", value)

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_path")

    @s3_bucket_path.setter
    def s3_bucket_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_path", value)

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_region")

    @s3_bucket_region.setter
    def s3_bucket_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_region", value)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_name_pattern")

    @file_name_pattern.setter
    def file_name_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name_pattern", value)

    @property
    @pulumi.getter(name="s3Endpoint")
    def s3_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_endpoint")

    @s3_endpoint.setter
    def s3_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_endpoint", value)

    @property
    @pulumi.getter(name="s3PathFormat")
    def s3_path_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_path_format")

    @s3_path_format.setter
    def s3_path_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_path_format", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatArgs:
    def __init__(__self__, *,
                 destination_s3_output_format_avro_apache_avro: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroArgs']] = None,
                 destination_s3_output_format_csv_comma_separated_values: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesArgs']] = None,
                 destination_s3_output_format_json_lines_newline_delimited_json: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonArgs']] = None,
                 destination_s3_output_format_parquet_columnar_storage: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorageArgs']] = None,
                 destination_s3_update_output_format_avro_apache_avro: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroArgs']] = None,
                 destination_s3_update_output_format_csv_comma_separated_values: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesArgs']] = None,
                 destination_s3_update_output_format_json_lines_newline_delimited_json: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs']] = None,
                 destination_s3_update_output_format_parquet_columnar_storage: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorageArgs']] = None):
        if destination_s3_output_format_avro_apache_avro is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro", destination_s3_output_format_avro_apache_avro)
        if destination_s3_output_format_csv_comma_separated_values is not None:
            pulumi.set(__self__, "destination_s3_output_format_csv_comma_separated_values", destination_s3_output_format_csv_comma_separated_values)
        if destination_s3_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_s3_output_format_json_lines_newline_delimited_json", destination_s3_output_format_json_lines_newline_delimited_json)
        if destination_s3_output_format_parquet_columnar_storage is not None:
            pulumi.set(__self__, "destination_s3_output_format_parquet_columnar_storage", destination_s3_output_format_parquet_columnar_storage)
        if destination_s3_update_output_format_avro_apache_avro is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro", destination_s3_update_output_format_avro_apache_avro)
        if destination_s3_update_output_format_csv_comma_separated_values is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_csv_comma_separated_values", destination_s3_update_output_format_csv_comma_separated_values)
        if destination_s3_update_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_json_lines_newline_delimited_json", destination_s3_update_output_format_json_lines_newline_delimited_json)
        if destination_s3_update_output_format_parquet_columnar_storage is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_parquet_columnar_storage", destination_s3_update_output_format_parquet_columnar_storage)

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvro")
    def destination_s3_output_format_avro_apache_avro(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroArgs']]:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro")

    @destination_s3_output_format_avro_apache_avro.setter
    def destination_s3_output_format_avro_apache_avro(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroArgs']]):
        pulumi.set(self, "destination_s3_output_format_avro_apache_avro", value)

    @property
    @pulumi.getter(name="destinationS3OutputFormatCsvCommaSeparatedValues")
    def destination_s3_output_format_csv_comma_separated_values(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesArgs']]:
        return pulumi.get(self, "destination_s3_output_format_csv_comma_separated_values")

    @destination_s3_output_format_csv_comma_separated_values.setter
    def destination_s3_output_format_csv_comma_separated_values(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesArgs']]):
        pulumi.set(self, "destination_s3_output_format_csv_comma_separated_values", value)

    @property
    @pulumi.getter(name="destinationS3OutputFormatJsonLinesNewlineDelimitedJson")
    def destination_s3_output_format_json_lines_newline_delimited_json(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonArgs']]:
        return pulumi.get(self, "destination_s3_output_format_json_lines_newline_delimited_json")

    @destination_s3_output_format_json_lines_newline_delimited_json.setter
    def destination_s3_output_format_json_lines_newline_delimited_json(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonArgs']]):
        pulumi.set(self, "destination_s3_output_format_json_lines_newline_delimited_json", value)

    @property
    @pulumi.getter(name="destinationS3OutputFormatParquetColumnarStorage")
    def destination_s3_output_format_parquet_columnar_storage(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorageArgs']]:
        return pulumi.get(self, "destination_s3_output_format_parquet_columnar_storage")

    @destination_s3_output_format_parquet_columnar_storage.setter
    def destination_s3_output_format_parquet_columnar_storage(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorageArgs']]):
        pulumi.set(self, "destination_s3_output_format_parquet_columnar_storage", value)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvro")
    def destination_s3_update_output_format_avro_apache_avro(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroArgs']]:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro")

    @destination_s3_update_output_format_avro_apache_avro.setter
    def destination_s3_update_output_format_avro_apache_avro(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroArgs']]):
        pulumi.set(self, "destination_s3_update_output_format_avro_apache_avro", value)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatCsvCommaSeparatedValues")
    def destination_s3_update_output_format_csv_comma_separated_values(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesArgs']]:
        return pulumi.get(self, "destination_s3_update_output_format_csv_comma_separated_values")

    @destination_s3_update_output_format_csv_comma_separated_values.setter
    def destination_s3_update_output_format_csv_comma_separated_values(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesArgs']]):
        pulumi.set(self, "destination_s3_update_output_format_csv_comma_separated_values", value)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_s3_update_output_format_json_lines_newline_delimited_json(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs']]:
        return pulumi.get(self, "destination_s3_update_output_format_json_lines_newline_delimited_json")

    @destination_s3_update_output_format_json_lines_newline_delimited_json.setter
    def destination_s3_update_output_format_json_lines_newline_delimited_json(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs']]):
        pulumi.set(self, "destination_s3_update_output_format_json_lines_newline_delimited_json", value)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatParquetColumnarStorage")
    def destination_s3_update_output_format_parquet_columnar_storage(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorageArgs']]:
        return pulumi.get(self, "destination_s3_update_output_format_parquet_columnar_storage")

    @destination_s3_update_output_format_parquet_columnar_storage.setter
    def destination_s3_update_output_format_parquet_columnar_storage(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorageArgs']]):
        pulumi.set(self, "destination_s3_update_output_format_parquet_columnar_storage", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroArgs:
    def __init__(__self__, *,
                 compression_codec: pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecArgs'],
                 format_type: pulumi.Input[str]):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecArgs']:
        return pulumi.get(self, "compression_codec")

    @compression_codec.setter
    def compression_codec(self, value: pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecArgs']):
        pulumi.set(self, "compression_codec", value)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecArgs:
    def __init__(__self__, *,
                 destination_s3_output_format_avro_apache_avro_compression_codec_bzip2: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2Args']] = None,
                 destination_s3_output_format_avro_apache_avro_compression_codec_deflate: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflateArgs']] = None,
                 destination_s3_output_format_avro_apache_avro_compression_codec_no_compression: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs']] = None,
                 destination_s3_output_format_avro_apache_avro_compression_codec_snappy: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappyArgs']] = None,
                 destination_s3_output_format_avro_apache_avro_compression_codec_xz: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXzArgs']] = None,
                 destination_s3_output_format_avro_apache_avro_compression_codec_zstandard: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandardArgs']] = None):
        if destination_s3_output_format_avro_apache_avro_compression_codec_bzip2 is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_bzip2", destination_s3_output_format_avro_apache_avro_compression_codec_bzip2)
        if destination_s3_output_format_avro_apache_avro_compression_codec_deflate is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_deflate", destination_s3_output_format_avro_apache_avro_compression_codec_deflate)
        if destination_s3_output_format_avro_apache_avro_compression_codec_no_compression is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_no_compression", destination_s3_output_format_avro_apache_avro_compression_codec_no_compression)
        if destination_s3_output_format_avro_apache_avro_compression_codec_snappy is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_snappy", destination_s3_output_format_avro_apache_avro_compression_codec_snappy)
        if destination_s3_output_format_avro_apache_avro_compression_codec_xz is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_xz", destination_s3_output_format_avro_apache_avro_compression_codec_xz)
        if destination_s3_output_format_avro_apache_avro_compression_codec_zstandard is not None:
            pulumi.set(__self__, "destination_s3_output_format_avro_apache_avro_compression_codec_zstandard", destination_s3_output_format_avro_apache_avro_compression_codec_zstandard)

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2")
    def destination_s3_output_format_avro_apache_avro_compression_codec_bzip2(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2Args']]:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_bzip2")

    @destination_s3_output_format_avro_apache_avro_compression_codec_bzip2.setter
    def destination_s3_output_format_avro_apache_avro_compression_codec_bzip2(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2Args']]):
        pulumi.set(self, "destination_s3_output_format_avro_apache_avro_compression_codec_bzip2", value)

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecDeflate")
    def destination_s3_output_format_avro_apache_avro_compression_codec_deflate(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflateArgs']]:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_deflate")

    @destination_s3_output_format_avro_apache_avro_compression_codec_deflate.setter
    def destination_s3_output_format_avro_apache_avro_compression_codec_deflate(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflateArgs']]):
        pulumi.set(self, "destination_s3_output_format_avro_apache_avro_compression_codec_deflate", value)

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompression")
    def destination_s3_output_format_avro_apache_avro_compression_codec_no_compression(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs']]:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_no_compression")

    @destination_s3_output_format_avro_apache_avro_compression_codec_no_compression.setter
    def destination_s3_output_format_avro_apache_avro_compression_codec_no_compression(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs']]):
        pulumi.set(self, "destination_s3_output_format_avro_apache_avro_compression_codec_no_compression", value)

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecSnappy")
    def destination_s3_output_format_avro_apache_avro_compression_codec_snappy(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappyArgs']]:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_snappy")

    @destination_s3_output_format_avro_apache_avro_compression_codec_snappy.setter
    def destination_s3_output_format_avro_apache_avro_compression_codec_snappy(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappyArgs']]):
        pulumi.set(self, "destination_s3_output_format_avro_apache_avro_compression_codec_snappy", value)

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecXz")
    def destination_s3_output_format_avro_apache_avro_compression_codec_xz(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXzArgs']]:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_xz")

    @destination_s3_output_format_avro_apache_avro_compression_codec_xz.setter
    def destination_s3_output_format_avro_apache_avro_compression_codec_xz(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXzArgs']]):
        pulumi.set(self, "destination_s3_output_format_avro_apache_avro_compression_codec_xz", value)

    @property
    @pulumi.getter(name="destinationS3OutputFormatAvroApacheAvroCompressionCodecZstandard")
    def destination_s3_output_format_avro_apache_avro_compression_codec_zstandard(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandardArgs']]:
        return pulumi.get(self, "destination_s3_output_format_avro_apache_avro_compression_codec_zstandard")

    @destination_s3_output_format_avro_apache_avro_compression_codec_zstandard.setter
    def destination_s3_output_format_avro_apache_avro_compression_codec_zstandard(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandardArgs']]):
        pulumi.set(self, "destination_s3_output_format_avro_apache_avro_compression_codec_zstandard", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecBzip2Args:
    def __init__(__self__, *,
                 codec: pulumi.Input[str]):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecDeflateArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 compression_level: pulumi.Input[int]):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> pulumi.Input[int]:
        return pulumi.get(self, "compression_level")

    @compression_level.setter
    def compression_level(self, value: pulumi.Input[int]):
        pulumi.set(self, "compression_level", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str]):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecSnappyArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str]):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecXzArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 compression_level: pulumi.Input[int]):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> pulumi.Input[int]:
        return pulumi.get(self, "compression_level")

    @compression_level.setter
    def compression_level(self, value: pulumi.Input[int]):
        pulumi.set(self, "compression_level", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatAvroApacheAvroCompressionCodecDestinationS3OutputFormatAvroApacheAvroCompressionCodecZstandardArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 compression_level: pulumi.Input[int],
                 include_checksum: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)
        if include_checksum is not None:
            pulumi.set(__self__, "include_checksum", include_checksum)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> pulumi.Input[int]:
        return pulumi.get(self, "compression_level")

    @compression_level.setter
    def compression_level(self, value: pulumi.Input[int]):
        pulumi.set(self, "compression_level", value)

    @property
    @pulumi.getter(name="includeChecksum")
    def include_checksum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_checksum")

    @include_checksum.setter
    def include_checksum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_checksum", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesArgs:
    def __init__(__self__, *,
                 flattening: pulumi.Input[str],
                 format_type: pulumi.Input[str],
                 compression: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionArgs']] = None):
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)

    @property
    @pulumi.getter
    def flattening(self) -> pulumi.Input[str]:
        return pulumi.get(self, "flattening")

    @flattening.setter
    def flattening(self, value: pulumi.Input[str]):
        pulumi.set(self, "flattening", value)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionArgs']]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionArgs']]):
        pulumi.set(self, "compression", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionArgs:
    def __init__(__self__, *,
                 destination_s3_output_format_csv_comma_separated_values_compression_gzip: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzipArgs']] = None,
                 destination_s3_output_format_csv_comma_separated_values_compression_no_compression: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs']] = None):
        if destination_s3_output_format_csv_comma_separated_values_compression_gzip is not None:
            pulumi.set(__self__, "destination_s3_output_format_csv_comma_separated_values_compression_gzip", destination_s3_output_format_csv_comma_separated_values_compression_gzip)
        if destination_s3_output_format_csv_comma_separated_values_compression_no_compression is not None:
            pulumi.set(__self__, "destination_s3_output_format_csv_comma_separated_values_compression_no_compression", destination_s3_output_format_csv_comma_separated_values_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzip")
    def destination_s3_output_format_csv_comma_separated_values_compression_gzip(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzipArgs']]:
        return pulumi.get(self, "destination_s3_output_format_csv_comma_separated_values_compression_gzip")

    @destination_s3_output_format_csv_comma_separated_values_compression_gzip.setter
    def destination_s3_output_format_csv_comma_separated_values_compression_gzip(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzipArgs']]):
        pulumi.set(self, "destination_s3_output_format_csv_comma_separated_values_compression_gzip", value)

    @property
    @pulumi.getter(name="destinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompression")
    def destination_s3_output_format_csv_comma_separated_values_compression_no_compression(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs']]:
        return pulumi.get(self, "destination_s3_output_format_csv_comma_separated_values_compression_no_compression")

    @destination_s3_output_format_csv_comma_separated_values_compression_no_compression.setter
    def destination_s3_output_format_csv_comma_separated_values_compression_no_compression(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs']]):
        pulumi.set(self, "destination_s3_output_format_csv_comma_separated_values_compression_no_compression", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionGzipArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionDestinationS3OutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 compression: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']] = None,
                 flattening: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if flattening is not None:
            pulumi.set(__self__, "flattening", flattening)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter
    def flattening(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flattening")

    @flattening.setter
    def flattening(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flattening", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs:
    def __init__(__self__, *,
                 destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']] = None,
                 destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']] = None):
        if destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip is not None:
            pulumi.set(__self__, "destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip", destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip)
        if destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression is not None:
            pulumi.set(__self__, "destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']]:
        return pulumi.get(self, "destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip")

    @destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip.setter
    def destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']]):
        pulumi.set(self, "destination_s3_output_format_json_lines_newline_delimited_json_compression_gzip", value)

    @property
    @pulumi.getter(name="destinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']]:
        return pulumi.get(self, "destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression")

    @destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression.setter
    def destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']]):
        pulumi.set(self, "destination_s3_output_format_json_lines_newline_delimited_json_compression_no_compression", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3OutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3OutputFormatParquetColumnarStorageArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 block_size_mb: Optional[pulumi.Input[int]] = None,
                 compression_codec: Optional[pulumi.Input[str]] = None,
                 dictionary_encoding: Optional[pulumi.Input[bool]] = None,
                 dictionary_page_size_kb: Optional[pulumi.Input[int]] = None,
                 max_padding_size_mb: Optional[pulumi.Input[int]] = None,
                 page_size_kb: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if block_size_mb is not None:
            pulumi.set(__self__, "block_size_mb", block_size_mb)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)
        if dictionary_encoding is not None:
            pulumi.set(__self__, "dictionary_encoding", dictionary_encoding)
        if dictionary_page_size_kb is not None:
            pulumi.set(__self__, "dictionary_page_size_kb", dictionary_page_size_kb)
        if max_padding_size_mb is not None:
            pulumi.set(__self__, "max_padding_size_mb", max_padding_size_mb)
        if page_size_kb is not None:
            pulumi.set(__self__, "page_size_kb", page_size_kb)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter(name="blockSizeMb")
    def block_size_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_size_mb")

    @block_size_mb.setter
    def block_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_size_mb", value)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_codec")

    @compression_codec.setter
    def compression_codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_codec", value)

    @property
    @pulumi.getter(name="dictionaryEncoding")
    def dictionary_encoding(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dictionary_encoding")

    @dictionary_encoding.setter
    def dictionary_encoding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dictionary_encoding", value)

    @property
    @pulumi.getter(name="dictionaryPageSizeKb")
    def dictionary_page_size_kb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dictionary_page_size_kb")

    @dictionary_page_size_kb.setter
    def dictionary_page_size_kb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dictionary_page_size_kb", value)

    @property
    @pulumi.getter(name="maxPaddingSizeMb")
    def max_padding_size_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_padding_size_mb")

    @max_padding_size_mb.setter
    def max_padding_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_padding_size_mb", value)

    @property
    @pulumi.getter(name="pageSizeKb")
    def page_size_kb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "page_size_kb")

    @page_size_kb.setter
    def page_size_kb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_size_kb", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroArgs:
    def __init__(__self__, *,
                 compression_codec: pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecArgs'],
                 format_type: pulumi.Input[str]):
        pulumi.set(__self__, "compression_codec", compression_codec)
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecArgs']:
        return pulumi.get(self, "compression_codec")

    @compression_codec.setter
    def compression_codec(self, value: pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecArgs']):
        pulumi.set(self, "compression_codec", value)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecArgs:
    def __init__(__self__, *,
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Args']] = None,
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflateArgs']] = None,
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs']] = None,
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappyArgs']] = None,
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_xz: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXzArgs']] = None,
                 destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandardArgs']] = None):
        if destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2 is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2", destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2)
        if destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate", destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate)
        if destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression", destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression)
        if destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy", destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy)
        if destination_s3_update_output_format_avro_apache_avro_compression_codec_xz is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_xz", destination_s3_update_output_format_avro_apache_avro_compression_codec_xz)
        if destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard", destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Args']]:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2")

    @destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2.setter
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Args']]):
        pulumi.set(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_bzip2", value)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflate")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflateArgs']]:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate")

    @destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate.setter
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflateArgs']]):
        pulumi.set(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_deflate", value)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompression")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs']]:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression")

    @destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression.setter
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs']]):
        pulumi.set(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_no_compression", value)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappy")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappyArgs']]:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy")

    @destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy.setter
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappyArgs']]):
        pulumi.set(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_snappy", value)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXz")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_xz(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXzArgs']]:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_xz")

    @destination_s3_update_output_format_avro_apache_avro_compression_codec_xz.setter
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_xz(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXzArgs']]):
        pulumi.set(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_xz", value)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandard")
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandardArgs']]:
        return pulumi.get(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard")

    @destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard.setter
    def destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandardArgs']]):
        pulumi.set(self, "destination_s3_update_output_format_avro_apache_avro_compression_codec_zstandard", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecBzip2Args:
    def __init__(__self__, *,
                 codec: pulumi.Input[str]):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDeflateArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 compression_level: pulumi.Input[int]):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> pulumi.Input[int]:
        return pulumi.get(self, "compression_level")

    @compression_level.setter
    def compression_level(self, value: pulumi.Input[int]):
        pulumi.set(self, "compression_level", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecNoCompressionArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str]):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecSnappyArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str]):
        pulumi.set(__self__, "codec", codec)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecXzArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 compression_level: pulumi.Input[int]):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> pulumi.Input[int]:
        return pulumi.get(self, "compression_level")

    @compression_level.setter
    def compression_level(self, value: pulumi.Input[int]):
        pulumi.set(self, "compression_level", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecDestinationS3UpdateOutputFormatAvroApacheAvroCompressionCodecZstandardArgs:
    def __init__(__self__, *,
                 codec: pulumi.Input[str],
                 compression_level: pulumi.Input[int],
                 include_checksum: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "codec", codec)
        pulumi.set(__self__, "compression_level", compression_level)
        if include_checksum is not None:
            pulumi.set(__self__, "include_checksum", include_checksum)

    @property
    @pulumi.getter
    def codec(self) -> pulumi.Input[str]:
        return pulumi.get(self, "codec")

    @codec.setter
    def codec(self, value: pulumi.Input[str]):
        pulumi.set(self, "codec", value)

    @property
    @pulumi.getter(name="compressionLevel")
    def compression_level(self) -> pulumi.Input[int]:
        return pulumi.get(self, "compression_level")

    @compression_level.setter
    def compression_level(self, value: pulumi.Input[int]):
        pulumi.set(self, "compression_level", value)

    @property
    @pulumi.getter(name="includeChecksum")
    def include_checksum(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_checksum")

    @include_checksum.setter
    def include_checksum(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_checksum", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesArgs:
    def __init__(__self__, *,
                 flattening: pulumi.Input[str],
                 format_type: pulumi.Input[str],
                 compression: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionArgs']] = None):
        pulumi.set(__self__, "flattening", flattening)
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)

    @property
    @pulumi.getter
    def flattening(self) -> pulumi.Input[str]:
        return pulumi.get(self, "flattening")

    @flattening.setter
    def flattening(self, value: pulumi.Input[str]):
        pulumi.set(self, "flattening", value)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionArgs']]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionArgs']]):
        pulumi.set(self, "compression", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionArgs:
    def __init__(__self__, *,
                 destination_s3_update_output_format_csv_comma_separated_values_compression_gzip: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs']] = None,
                 destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs']] = None):
        if destination_s3_update_output_format_csv_comma_separated_values_compression_gzip is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_csv_comma_separated_values_compression_gzip", destination_s3_update_output_format_csv_comma_separated_values_compression_gzip)
        if destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression", destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzip")
    def destination_s3_update_output_format_csv_comma_separated_values_compression_gzip(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs']]:
        return pulumi.get(self, "destination_s3_update_output_format_csv_comma_separated_values_compression_gzip")

    @destination_s3_update_output_format_csv_comma_separated_values_compression_gzip.setter
    def destination_s3_update_output_format_csv_comma_separated_values_compression_gzip(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs']]):
        pulumi.set(self, "destination_s3_update_output_format_csv_comma_separated_values_compression_gzip", value)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompression")
    def destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs']]:
        return pulumi.get(self, "destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression")

    @destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression.setter
    def destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs']]):
        pulumi.set(self, "destination_s3_update_output_format_csv_comma_separated_values_compression_no_compression", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionGzipArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionDestinationS3UpdateOutputFormatCsvCommaSeparatedValuesCompressionNoCompressionArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 compression: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']] = None,
                 flattening: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if flattening is not None:
            pulumi.set(__self__, "flattening", flattening)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter
    def flattening(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flattening")

    @flattening.setter
    def flattening(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flattening", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs:
    def __init__(__self__, *,
                 destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']] = None,
                 destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']] = None):
        if destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip", destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip)
        if destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression is not None:
            pulumi.set(__self__, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']]:
        return pulumi.get(self, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip")

    @destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip.setter
    def destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']]):
        pulumi.set(self, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_gzip", value)

    @property
    @pulumi.getter(name="destinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']]:
        return pulumi.get(self, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression")

    @destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression.setter
    def destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression(self, value: Optional[pulumi.Input['DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']]):
        pulumi.set(self, "destination_s3_update_output_format_json_lines_newline_delimited_json_compression_no_compression", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3UpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationS3ConfigurationFormatDestinationS3UpdateOutputFormatParquetColumnarStorageArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 block_size_mb: Optional[pulumi.Input[int]] = None,
                 compression_codec: Optional[pulumi.Input[str]] = None,
                 dictionary_encoding: Optional[pulumi.Input[bool]] = None,
                 dictionary_page_size_kb: Optional[pulumi.Input[int]] = None,
                 max_padding_size_mb: Optional[pulumi.Input[int]] = None,
                 page_size_kb: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if block_size_mb is not None:
            pulumi.set(__self__, "block_size_mb", block_size_mb)
        if compression_codec is not None:
            pulumi.set(__self__, "compression_codec", compression_codec)
        if dictionary_encoding is not None:
            pulumi.set(__self__, "dictionary_encoding", dictionary_encoding)
        if dictionary_page_size_kb is not None:
            pulumi.set(__self__, "dictionary_page_size_kb", dictionary_page_size_kb)
        if max_padding_size_mb is not None:
            pulumi.set(__self__, "max_padding_size_mb", max_padding_size_mb)
        if page_size_kb is not None:
            pulumi.set(__self__, "page_size_kb", page_size_kb)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter(name="blockSizeMb")
    def block_size_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_size_mb")

    @block_size_mb.setter
    def block_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_size_mb", value)

    @property
    @pulumi.getter(name="compressionCodec")
    def compression_codec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_codec")

    @compression_codec.setter
    def compression_codec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_codec", value)

    @property
    @pulumi.getter(name="dictionaryEncoding")
    def dictionary_encoding(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "dictionary_encoding")

    @dictionary_encoding.setter
    def dictionary_encoding(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dictionary_encoding", value)

    @property
    @pulumi.getter(name="dictionaryPageSizeKb")
    def dictionary_page_size_kb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dictionary_page_size_kb")

    @dictionary_page_size_kb.setter
    def dictionary_page_size_kb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dictionary_page_size_kb", value)

    @property
    @pulumi.getter(name="maxPaddingSizeMb")
    def max_padding_size_mb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_padding_size_mb")

    @max_padding_size_mb.setter
    def max_padding_size_mb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_padding_size_mb", value)

    @property
    @pulumi.getter(name="pageSizeKb")
    def page_size_kb(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "page_size_kb")

    @page_size_kb.setter
    def page_size_kb(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_size_kb", value)


@pulumi.input_type
class DestinationS3GlueConfigurationArgs:
    def __init__(__self__, *,
                 destination_type: pulumi.Input[str],
                 format: pulumi.Input['DestinationS3GlueConfigurationFormatArgs'],
                 glue_database: pulumi.Input[str],
                 glue_serialization_library: pulumi.Input[str],
                 s3_bucket_name: pulumi.Input[str],
                 s3_bucket_path: pulumi.Input[str],
                 s3_bucket_region: pulumi.Input[str],
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 file_name_pattern: Optional[pulumi.Input[str]] = None,
                 s3_endpoint: Optional[pulumi.Input[str]] = None,
                 s3_path_format: Optional[pulumi.Input[str]] = None,
                 secret_access_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "glue_database", glue_database)
        pulumi.set(__self__, "glue_serialization_library", glue_serialization_library)
        pulumi.set(__self__, "s3_bucket_name", s3_bucket_name)
        pulumi.set(__self__, "s3_bucket_path", s3_bucket_path)
        pulumi.set(__self__, "s3_bucket_region", s3_bucket_region)
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if file_name_pattern is not None:
            pulumi.set(__self__, "file_name_pattern", file_name_pattern)
        if s3_endpoint is not None:
            pulumi.set(__self__, "s3_endpoint", s3_endpoint)
        if s3_path_format is not None:
            pulumi.set(__self__, "s3_path_format", s3_path_format)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input['DestinationS3GlueConfigurationFormatArgs']:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input['DestinationS3GlueConfigurationFormatArgs']):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="glueDatabase")
    def glue_database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "glue_database")

    @glue_database.setter
    def glue_database(self, value: pulumi.Input[str]):
        pulumi.set(self, "glue_database", value)

    @property
    @pulumi.getter(name="glueSerializationLibrary")
    def glue_serialization_library(self) -> pulumi.Input[str]:
        return pulumi.get(self, "glue_serialization_library")

    @glue_serialization_library.setter
    def glue_serialization_library(self, value: pulumi.Input[str]):
        pulumi.set(self, "glue_serialization_library", value)

    @property
    @pulumi.getter(name="s3BucketName")
    def s3_bucket_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_name")

    @s3_bucket_name.setter
    def s3_bucket_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_name", value)

    @property
    @pulumi.getter(name="s3BucketPath")
    def s3_bucket_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_path")

    @s3_bucket_path.setter
    def s3_bucket_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_path", value)

    @property
    @pulumi.getter(name="s3BucketRegion")
    def s3_bucket_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "s3_bucket_region")

    @s3_bucket_region.setter
    def s3_bucket_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "s3_bucket_region", value)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="fileNamePattern")
    def file_name_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_name_pattern")

    @file_name_pattern.setter
    def file_name_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_name_pattern", value)

    @property
    @pulumi.getter(name="s3Endpoint")
    def s3_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_endpoint")

    @s3_endpoint.setter
    def s3_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_endpoint", value)

    @property
    @pulumi.getter(name="s3PathFormat")
    def s3_path_format(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "s3_path_format")

    @s3_path_format.setter
    def s3_path_format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "s3_path_format", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_access_key", value)


@pulumi.input_type
class DestinationS3GlueConfigurationFormatArgs:
    def __init__(__self__, *,
                 destination_s3_glue_output_format_json_lines_newline_delimited_json: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonArgs']] = None,
                 destination_s3_glue_update_output_format_json_lines_newline_delimited_json: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs']] = None):
        if destination_s3_glue_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_s3_glue_output_format_json_lines_newline_delimited_json", destination_s3_glue_output_format_json_lines_newline_delimited_json)
        if destination_s3_glue_update_output_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json", destination_s3_glue_update_output_format_json_lines_newline_delimited_json)

    @property
    @pulumi.getter(name="destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_s3_glue_output_format_json_lines_newline_delimited_json(self) -> Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonArgs']]:
        return pulumi.get(self, "destination_s3_glue_output_format_json_lines_newline_delimited_json")

    @destination_s3_glue_output_format_json_lines_newline_delimited_json.setter
    def destination_s3_glue_output_format_json_lines_newline_delimited_json(self, value: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonArgs']]):
        pulumi.set(self, "destination_s3_glue_output_format_json_lines_newline_delimited_json", value)

    @property
    @pulumi.getter(name="destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJson")
    def destination_s3_glue_update_output_format_json_lines_newline_delimited_json(self) -> Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs']]:
        return pulumi.get(self, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json")

    @destination_s3_glue_update_output_format_json_lines_newline_delimited_json.setter
    def destination_s3_glue_update_output_format_json_lines_newline_delimited_json(self, value: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs']]):
        pulumi.set(self, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json", value)


@pulumi.input_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 compression: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']] = None,
                 flattening: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if flattening is not None:
            pulumi.set(__self__, "flattening", flattening)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter
    def flattening(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flattening")

    @flattening.setter
    def flattening(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flattening", value)


@pulumi.input_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs:
    def __init__(__self__, *,
                 destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']] = None,
                 destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']] = None):
        if destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip is not None:
            pulumi.set(__self__, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip", destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip)
        if destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression is not None:
            pulumi.set(__self__, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']]:
        return pulumi.get(self, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip")

    @destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip.setter
    def destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip(self, value: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']]):
        pulumi.set(self, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_gzip", value)

    @property
    @pulumi.getter(name="destinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']]:
        return pulumi.get(self, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression")

    @destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression.setter
    def destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression(self, value: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']]):
        pulumi.set(self, "destination_s3_glue_output_format_json_lines_newline_delimited_json_compression_no_compression", value)


@pulumi.input_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str],
                 compression: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']] = None,
                 flattening: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "format_type", format_type)
        if compression is not None:
            pulumi.set(__self__, "compression", compression)
        if flattening is not None:
            pulumi.set(__self__, "flattening", flattening)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)

    @property
    @pulumi.getter
    def compression(self) -> Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']]:
        return pulumi.get(self, "compression")

    @compression.setter
    def compression(self, value: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs']]):
        pulumi.set(self, "compression", value)

    @property
    @pulumi.getter
    def flattening(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "flattening")

    @flattening.setter
    def flattening(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "flattening", value)


@pulumi.input_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionArgs:
    def __init__(__self__, *,
                 destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']] = None,
                 destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']] = None):
        if destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip is not None:
            pulumi.set(__self__, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip", destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip)
        if destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression is not None:
            pulumi.set(__self__, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression", destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression)

    @property
    @pulumi.getter(name="destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzip")
    def destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip(self) -> Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']]:
        return pulumi.get(self, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip")

    @destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip.setter
    def destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip(self, value: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs']]):
        pulumi.set(self, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_gzip", value)

    @property
    @pulumi.getter(name="destinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompression")
    def destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression(self) -> Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']]:
        return pulumi.get(self, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression")

    @destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression.setter
    def destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression(self, value: Optional[pulumi.Input['DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs']]):
        pulumi.set(self, "destination_s3_glue_update_output_format_json_lines_newline_delimited_json_compression_no_compression", value)


@pulumi.input_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionGzipArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationS3GlueConfigurationFormatDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionDestinationS3GlueUpdateOutputFormatJsonLinesNewlineDelimitedJsonCompressionNoCompressionArgs:
    def __init__(__self__, *,
                 compression_type: Optional[pulumi.Input[str]] = None):
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "compression_type")

    @compression_type.setter
    def compression_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "compression_type", value)


@pulumi.input_type
class DestinationSftpJsonConfigurationArgs:
    def __init__(__self__, *,
                 destination_path: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 port: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "destination_path", destination_path)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter(name="destinationPath")
    def destination_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_path")

    @destination_path.setter
    def destination_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_path", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 role: pulumi.Input[str],
                 schema: pulumi.Input[str],
                 username: pulumi.Input[str],
                 warehouse: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsArgs']] = None,
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 raw_data_schema: Optional[pulumi.Input[str]] = None,
                 use1s1t_format: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "warehouse", warehouse)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if raw_data_schema is not None:
            pulumi.set(__self__, "raw_data_schema", raw_data_schema)
        if use1s1t_format is not None:
            pulumi.set(__self__, "use1s1t_format", use1s1t_format)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def warehouse(self) -> pulumi.Input[str]:
        return pulumi.get(self, "warehouse")

    @warehouse.setter
    def warehouse(self, value: pulumi.Input[str]):
        pulumi.set(self, "warehouse", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter(name="rawDataSchema")
    def raw_data_schema(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "raw_data_schema")

    @raw_data_schema.setter
    def raw_data_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_data_schema", value)

    @property
    @pulumi.getter(name="use1s1tFormat")
    def use1s1t_format(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use1s1t_format")

    @use1s1t_format.setter
    def use1s1t_format(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use1s1t_format", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 destination_snowflake_authorization_method_key_pair_authentication: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationArgs']] = None,
                 destination_snowflake_authorization_method_o_auth20: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Args']] = None,
                 destination_snowflake_authorization_method_username_and_password: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordArgs']] = None,
                 destination_snowflake_update_authorization_method_key_pair_authentication: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationArgs']] = None,
                 destination_snowflake_update_authorization_method_o_auth20: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Args']] = None,
                 destination_snowflake_update_authorization_method_username_and_password: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs']] = None):
        if destination_snowflake_authorization_method_key_pair_authentication is not None:
            pulumi.set(__self__, "destination_snowflake_authorization_method_key_pair_authentication", destination_snowflake_authorization_method_key_pair_authentication)
        if destination_snowflake_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "destination_snowflake_authorization_method_o_auth20", destination_snowflake_authorization_method_o_auth20)
        if destination_snowflake_authorization_method_username_and_password is not None:
            pulumi.set(__self__, "destination_snowflake_authorization_method_username_and_password", destination_snowflake_authorization_method_username_and_password)
        if destination_snowflake_update_authorization_method_key_pair_authentication is not None:
            pulumi.set(__self__, "destination_snowflake_update_authorization_method_key_pair_authentication", destination_snowflake_update_authorization_method_key_pair_authentication)
        if destination_snowflake_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "destination_snowflake_update_authorization_method_o_auth20", destination_snowflake_update_authorization_method_o_auth20)
        if destination_snowflake_update_authorization_method_username_and_password is not None:
            pulumi.set(__self__, "destination_snowflake_update_authorization_method_username_and_password", destination_snowflake_update_authorization_method_username_and_password)

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodKeyPairAuthentication")
    def destination_snowflake_authorization_method_key_pair_authentication(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationArgs']]:
        return pulumi.get(self, "destination_snowflake_authorization_method_key_pair_authentication")

    @destination_snowflake_authorization_method_key_pair_authentication.setter
    def destination_snowflake_authorization_method_key_pair_authentication(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationArgs']]):
        pulumi.set(self, "destination_snowflake_authorization_method_key_pair_authentication", value)

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodOAuth20")
    def destination_snowflake_authorization_method_o_auth20(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "destination_snowflake_authorization_method_o_auth20")

    @destination_snowflake_authorization_method_o_auth20.setter
    def destination_snowflake_authorization_method_o_auth20(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "destination_snowflake_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodUsernameAndPassword")
    def destination_snowflake_authorization_method_username_and_password(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordArgs']]:
        return pulumi.get(self, "destination_snowflake_authorization_method_username_and_password")

    @destination_snowflake_authorization_method_username_and_password.setter
    def destination_snowflake_authorization_method_username_and_password(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordArgs']]):
        pulumi.set(self, "destination_snowflake_authorization_method_username_and_password", value)

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication")
    def destination_snowflake_update_authorization_method_key_pair_authentication(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationArgs']]:
        return pulumi.get(self, "destination_snowflake_update_authorization_method_key_pair_authentication")

    @destination_snowflake_update_authorization_method_key_pair_authentication.setter
    def destination_snowflake_update_authorization_method_key_pair_authentication(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationArgs']]):
        pulumi.set(self, "destination_snowflake_update_authorization_method_key_pair_authentication", value)

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodOAuth20")
    def destination_snowflake_update_authorization_method_o_auth20(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "destination_snowflake_update_authorization_method_o_auth20")

    @destination_snowflake_update_authorization_method_o_auth20.setter
    def destination_snowflake_update_authorization_method_o_auth20(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "destination_snowflake_update_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword")
    def destination_snowflake_update_authorization_method_username_and_password(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs']]:
        return pulumi.get(self, "destination_snowflake_update_authorization_method_username_and_password")

    @destination_snowflake_update_authorization_method_username_and_password.setter
    def destination_snowflake_update_authorization_method_username_and_password(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs']]):
        pulumi.set(self, "destination_snowflake_update_authorization_method_username_and_password", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationArgs:
    def __init__(__self__, *,
                 private_key: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 private_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "private_key", private_key)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if private_key_password is not None:
            pulumi.set(__self__, "private_key_password", private_key_password)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key_password")

    @private_key_password.setter
    def private_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_password", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationArgs:
    def __init__(__self__, *,
                 private_key: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 private_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "private_key", private_key)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if private_key_password is not None:
            pulumi.set(__self__, "private_key_password", private_key_password)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key_password")

    @private_key_password.setter
    def private_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_password", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class DestinationTimeplusConfigurationArgs:
    def __init__(__self__, *,
                 apikey: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 endpoint: pulumi.Input[str]):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "endpoint", endpoint)

    @property
    @pulumi.getter
    def apikey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "apikey")

    @apikey.setter
    def apikey(self, value: pulumi.Input[str]):
        pulumi.set(self, "apikey", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "endpoint", value)


@pulumi.input_type
class DestinationTypesenseConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 batch_size: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None,
                 protocol: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "protocol", value)


@pulumi.input_type
class DestinationVerticaConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 schema: pulumi.Input[str],
                 username: pulumi.Input[str],
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 tunnel_method: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationVerticaConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 destination_vertica_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnelArgs']] = None,
                 destination_vertica_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_vertica_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 destination_vertica_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 destination_vertica_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 destination_vertica_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if destination_vertica_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_vertica_ssh_tunnel_method_no_tunnel", destination_vertica_ssh_tunnel_method_no_tunnel)
        if destination_vertica_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_vertica_ssh_tunnel_method_password_authentication", destination_vertica_ssh_tunnel_method_password_authentication)
        if destination_vertica_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_vertica_ssh_tunnel_method_ssh_key_authentication", destination_vertica_ssh_tunnel_method_ssh_key_authentication)
        if destination_vertica_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "destination_vertica_update_ssh_tunnel_method_no_tunnel", destination_vertica_update_ssh_tunnel_method_no_tunnel)
        if destination_vertica_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "destination_vertica_update_ssh_tunnel_method_password_authentication", destination_vertica_update_ssh_tunnel_method_password_authentication)
        if destination_vertica_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "destination_vertica_update_ssh_tunnel_method_ssh_key_authentication", destination_vertica_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="destinationVerticaSshTunnelMethodNoTunnel")
    def destination_vertica_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_vertica_ssh_tunnel_method_no_tunnel")

    @destination_vertica_ssh_tunnel_method_no_tunnel.setter
    def destination_vertica_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_vertica_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationVerticaSshTunnelMethodPasswordAuthentication")
    def destination_vertica_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_vertica_ssh_tunnel_method_password_authentication")

    @destination_vertica_ssh_tunnel_method_password_authentication.setter
    def destination_vertica_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_vertica_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationVerticaSshTunnelMethodSshKeyAuthentication")
    def destination_vertica_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_vertica_ssh_tunnel_method_ssh_key_authentication")

    @destination_vertica_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_vertica_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_vertica_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="destinationVerticaUpdateSshTunnelMethodNoTunnel")
    def destination_vertica_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "destination_vertica_update_ssh_tunnel_method_no_tunnel")

    @destination_vertica_update_ssh_tunnel_method_no_tunnel.setter
    def destination_vertica_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "destination_vertica_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="destinationVerticaUpdateSshTunnelMethodPasswordAuthentication")
    def destination_vertica_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "destination_vertica_update_ssh_tunnel_method_password_authentication")

    @destination_vertica_update_ssh_tunnel_method_password_authentication.setter
    def destination_vertica_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "destination_vertica_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="destinationVerticaUpdateSshTunnelMethodSshKeyAuthentication")
    def destination_vertica_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "destination_vertica_update_ssh_tunnel_method_ssh_key_authentication")

    @destination_vertica_update_ssh_tunnel_method_ssh_key_authentication.setter
    def destination_vertica_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "destination_vertica_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationVerticaConfigurationTunnelMethodDestinationVerticaSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class DestinationVerticaConfigurationTunnelMethodDestinationVerticaUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class DestinationXataConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 db_url: pulumi.Input[str],
                 destination_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "db_url", db_url)
        pulumi.set(__self__, "destination_type", destination_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="dbUrl")
    def db_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "db_url")

    @db_url.setter
    def db_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "db_url", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)


@pulumi.input_type
class SourceAhaConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SourceAircallConfigurationArgs:
    def __init__(__self__, *,
                 api_id: pulumi.Input[str],
                 api_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "api_id", api_id)
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiId")
    def api_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_id")

    @api_id.setter
    def api_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_id", value)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceAirtableConfigurationArgs:
    def __init__(__self__, *,
                 credentials: Optional[pulumi.Input['SourceAirtableConfigurationCredentialsArgs']] = None,
                 source_type: Optional[pulumi.Input[str]] = None):
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceAirtableConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceAirtableConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceAirtableConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_airtable_authentication_o_auth20: Optional[pulumi.Input['SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20Args']] = None,
                 source_airtable_authentication_personal_access_token: Optional[pulumi.Input['SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessTokenArgs']] = None,
                 source_airtable_update_authentication_o_auth20: Optional[pulumi.Input['SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20Args']] = None,
                 source_airtable_update_authentication_personal_access_token: Optional[pulumi.Input['SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessTokenArgs']] = None):
        if source_airtable_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_airtable_authentication_o_auth20", source_airtable_authentication_o_auth20)
        if source_airtable_authentication_personal_access_token is not None:
            pulumi.set(__self__, "source_airtable_authentication_personal_access_token", source_airtable_authentication_personal_access_token)
        if source_airtable_update_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_airtable_update_authentication_o_auth20", source_airtable_update_authentication_o_auth20)
        if source_airtable_update_authentication_personal_access_token is not None:
            pulumi.set(__self__, "source_airtable_update_authentication_personal_access_token", source_airtable_update_authentication_personal_access_token)

    @property
    @pulumi.getter(name="sourceAirtableAuthenticationOAuth20")
    def source_airtable_authentication_o_auth20(self) -> Optional[pulumi.Input['SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20Args']]:
        return pulumi.get(self, "source_airtable_authentication_o_auth20")

    @source_airtable_authentication_o_auth20.setter
    def source_airtable_authentication_o_auth20(self, value: Optional[pulumi.Input['SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20Args']]):
        pulumi.set(self, "source_airtable_authentication_o_auth20", value)

    @property
    @pulumi.getter(name="sourceAirtableAuthenticationPersonalAccessToken")
    def source_airtable_authentication_personal_access_token(self) -> Optional[pulumi.Input['SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessTokenArgs']]:
        return pulumi.get(self, "source_airtable_authentication_personal_access_token")

    @source_airtable_authentication_personal_access_token.setter
    def source_airtable_authentication_personal_access_token(self, value: Optional[pulumi.Input['SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessTokenArgs']]):
        pulumi.set(self, "source_airtable_authentication_personal_access_token", value)

    @property
    @pulumi.getter(name="sourceAirtableUpdateAuthenticationOAuth20")
    def source_airtable_update_authentication_o_auth20(self) -> Optional[pulumi.Input['SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20Args']]:
        return pulumi.get(self, "source_airtable_update_authentication_o_auth20")

    @source_airtable_update_authentication_o_auth20.setter
    def source_airtable_update_authentication_o_auth20(self, value: Optional[pulumi.Input['SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20Args']]):
        pulumi.set(self, "source_airtable_update_authentication_o_auth20", value)

    @property
    @pulumi.getter(name="sourceAirtableUpdateAuthenticationPersonalAccessToken")
    def source_airtable_update_authentication_personal_access_token(self) -> Optional[pulumi.Input['SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessTokenArgs']]:
        return pulumi.get(self, "source_airtable_update_authentication_personal_access_token")

    @source_airtable_update_authentication_personal_access_token.setter
    def source_airtable_update_authentication_personal_access_token(self, value: Optional[pulumi.Input['SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessTokenArgs']]):
        pulumi.set(self, "source_airtable_update_authentication_personal_access_token", value)


@pulumi.input_type
class SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationOAuth20Args:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 token_expiry_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if token_expiry_date is not None:
            pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_expiry_date", value)


@pulumi.input_type
class SourceAirtableConfigurationCredentialsSourceAirtableAuthenticationPersonalAccessTokenArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 auth_method: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationOAuth20Args:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 auth_method: Optional[pulumi.Input[str]] = None,
                 token_expiry_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if token_expiry_date is not None:
            pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_expiry_date", value)


@pulumi.input_type
class SourceAirtableConfigurationCredentialsSourceAirtableUpdateAuthenticationPersonalAccessTokenArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 auth_method: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourceAlloydbConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 source_type: pulumi.Input[str],
                 username: pulumi.Input[str],
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 replication_method: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodArgs']] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_mode: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeArgs']] = None,
                 tunnel_method: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if replication_method is not None:
            pulumi.set(__self__, "replication_method", replication_method)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="replicationMethod")
    def replication_method(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodArgs']]:
        return pulumi.get(self, "replication_method")

    @replication_method.setter
    def replication_method(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodArgs']]):
        pulumi.set(self, "replication_method", value)

    @property
    @pulumi.getter
    def schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "schemas", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationSslModeArgs']]:
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeArgs']]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceAlloydbConfigurationReplicationMethodArgs:
    def __init__(__self__, *,
                 source_alloydb_replication_method_logical_replication_cdc: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdcArgs']] = None,
                 source_alloydb_replication_method_standard: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardArgs']] = None,
                 source_alloydb_replication_method_standard_xmin: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXminArgs']] = None,
                 source_alloydb_update_replication_method_logical_replication_cdc: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdcArgs']] = None,
                 source_alloydb_update_replication_method_standard: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardArgs']] = None,
                 source_alloydb_update_replication_method_standard_xmin: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXminArgs']] = None):
        if source_alloydb_replication_method_logical_replication_cdc is not None:
            pulumi.set(__self__, "source_alloydb_replication_method_logical_replication_cdc", source_alloydb_replication_method_logical_replication_cdc)
        if source_alloydb_replication_method_standard is not None:
            pulumi.set(__self__, "source_alloydb_replication_method_standard", source_alloydb_replication_method_standard)
        if source_alloydb_replication_method_standard_xmin is not None:
            pulumi.set(__self__, "source_alloydb_replication_method_standard_xmin", source_alloydb_replication_method_standard_xmin)
        if source_alloydb_update_replication_method_logical_replication_cdc is not None:
            pulumi.set(__self__, "source_alloydb_update_replication_method_logical_replication_cdc", source_alloydb_update_replication_method_logical_replication_cdc)
        if source_alloydb_update_replication_method_standard is not None:
            pulumi.set(__self__, "source_alloydb_update_replication_method_standard", source_alloydb_update_replication_method_standard)
        if source_alloydb_update_replication_method_standard_xmin is not None:
            pulumi.set(__self__, "source_alloydb_update_replication_method_standard_xmin", source_alloydb_update_replication_method_standard_xmin)

    @property
    @pulumi.getter(name="sourceAlloydbReplicationMethodLogicalReplicationCdc")
    def source_alloydb_replication_method_logical_replication_cdc(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdcArgs']]:
        return pulumi.get(self, "source_alloydb_replication_method_logical_replication_cdc")

    @source_alloydb_replication_method_logical_replication_cdc.setter
    def source_alloydb_replication_method_logical_replication_cdc(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdcArgs']]):
        pulumi.set(self, "source_alloydb_replication_method_logical_replication_cdc", value)

    @property
    @pulumi.getter(name="sourceAlloydbReplicationMethodStandard")
    def source_alloydb_replication_method_standard(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardArgs']]:
        return pulumi.get(self, "source_alloydb_replication_method_standard")

    @source_alloydb_replication_method_standard.setter
    def source_alloydb_replication_method_standard(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardArgs']]):
        pulumi.set(self, "source_alloydb_replication_method_standard", value)

    @property
    @pulumi.getter(name="sourceAlloydbReplicationMethodStandardXmin")
    def source_alloydb_replication_method_standard_xmin(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXminArgs']]:
        return pulumi.get(self, "source_alloydb_replication_method_standard_xmin")

    @source_alloydb_replication_method_standard_xmin.setter
    def source_alloydb_replication_method_standard_xmin(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXminArgs']]):
        pulumi.set(self, "source_alloydb_replication_method_standard_xmin", value)

    @property
    @pulumi.getter(name="sourceAlloydbUpdateReplicationMethodLogicalReplicationCdc")
    def source_alloydb_update_replication_method_logical_replication_cdc(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdcArgs']]:
        return pulumi.get(self, "source_alloydb_update_replication_method_logical_replication_cdc")

    @source_alloydb_update_replication_method_logical_replication_cdc.setter
    def source_alloydb_update_replication_method_logical_replication_cdc(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdcArgs']]):
        pulumi.set(self, "source_alloydb_update_replication_method_logical_replication_cdc", value)

    @property
    @pulumi.getter(name="sourceAlloydbUpdateReplicationMethodStandard")
    def source_alloydb_update_replication_method_standard(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardArgs']]:
        return pulumi.get(self, "source_alloydb_update_replication_method_standard")

    @source_alloydb_update_replication_method_standard.setter
    def source_alloydb_update_replication_method_standard(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardArgs']]):
        pulumi.set(self, "source_alloydb_update_replication_method_standard", value)

    @property
    @pulumi.getter(name="sourceAlloydbUpdateReplicationMethodStandardXmin")
    def source_alloydb_update_replication_method_standard_xmin(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXminArgs']]:
        return pulumi.get(self, "source_alloydb_update_replication_method_standard_xmin")

    @source_alloydb_update_replication_method_standard_xmin.setter
    def source_alloydb_update_replication_method_standard_xmin(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXminArgs']]):
        pulumi.set(self, "source_alloydb_update_replication_method_standard_xmin", value)


@pulumi.input_type
class SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodLogicalReplicationCdcArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 publication: pulumi.Input[str],
                 replication_slot: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 initial_waiting_seconds: Optional[pulumi.Input[int]] = None,
                 lsn_commit_behaviour: Optional[pulumi.Input[str]] = None,
                 plugin: Optional[pulumi.Input[str]] = None,
                 queue_size: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "publication", publication)
        pulumi.set(__self__, "replication_slot", replication_slot)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if lsn_commit_behaviour is not None:
            pulumi.set(__self__, "lsn_commit_behaviour", lsn_commit_behaviour)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if queue_size is not None:
            pulumi.set(__self__, "queue_size", queue_size)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def publication(self) -> pulumi.Input[str]:
        return pulumi.get(self, "publication")

    @publication.setter
    def publication(self, value: pulumi.Input[str]):
        pulumi.set(self, "publication", value)

    @property
    @pulumi.getter(name="replicationSlot")
    def replication_slot(self) -> pulumi.Input[str]:
        return pulumi.get(self, "replication_slot")

    @replication_slot.setter
    def replication_slot(self, value: pulumi.Input[str]):
        pulumi.set(self, "replication_slot", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_waiting_seconds")

    @initial_waiting_seconds.setter
    def initial_waiting_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_waiting_seconds", value)

    @property
    @pulumi.getter(name="lsnCommitBehaviour")
    def lsn_commit_behaviour(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lsn_commit_behaviour")

    @lsn_commit_behaviour.setter
    def lsn_commit_behaviour(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lsn_commit_behaviour", value)

    @property
    @pulumi.getter
    def plugin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plugin")

    @plugin.setter
    def plugin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin", value)

    @property
    @pulumi.getter(name="queueSize")
    def queue_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "queue_size")

    @queue_size.setter
    def queue_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "queue_size", value)


@pulumi.input_type
class SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class SourceAlloydbConfigurationReplicationMethodSourceAlloydbReplicationMethodStandardXminArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodLogicalReplicationCdcArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 publication: pulumi.Input[str],
                 replication_slot: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 initial_waiting_seconds: Optional[pulumi.Input[int]] = None,
                 lsn_commit_behaviour: Optional[pulumi.Input[str]] = None,
                 plugin: Optional[pulumi.Input[str]] = None,
                 queue_size: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "publication", publication)
        pulumi.set(__self__, "replication_slot", replication_slot)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if lsn_commit_behaviour is not None:
            pulumi.set(__self__, "lsn_commit_behaviour", lsn_commit_behaviour)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if queue_size is not None:
            pulumi.set(__self__, "queue_size", queue_size)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def publication(self) -> pulumi.Input[str]:
        return pulumi.get(self, "publication")

    @publication.setter
    def publication(self, value: pulumi.Input[str]):
        pulumi.set(self, "publication", value)

    @property
    @pulumi.getter(name="replicationSlot")
    def replication_slot(self) -> pulumi.Input[str]:
        return pulumi.get(self, "replication_slot")

    @replication_slot.setter
    def replication_slot(self, value: pulumi.Input[str]):
        pulumi.set(self, "replication_slot", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_waiting_seconds")

    @initial_waiting_seconds.setter
    def initial_waiting_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_waiting_seconds", value)

    @property
    @pulumi.getter(name="lsnCommitBehaviour")
    def lsn_commit_behaviour(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lsn_commit_behaviour")

    @lsn_commit_behaviour.setter
    def lsn_commit_behaviour(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lsn_commit_behaviour", value)

    @property
    @pulumi.getter
    def plugin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plugin")

    @plugin.setter
    def plugin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin", value)

    @property
    @pulumi.getter(name="queueSize")
    def queue_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "queue_size")

    @queue_size.setter
    def queue_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "queue_size", value)


@pulumi.input_type
class SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class SourceAlloydbConfigurationReplicationMethodSourceAlloydbUpdateReplicationMethodStandardXminArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class SourceAlloydbConfigurationSslModeArgs:
    def __init__(__self__, *,
                 source_alloydb_ssl_modes_allow: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllowArgs']] = None,
                 source_alloydb_ssl_modes_disable: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisableArgs']] = None,
                 source_alloydb_ssl_modes_prefer: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPreferArgs']] = None,
                 source_alloydb_ssl_modes_require: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequireArgs']] = None,
                 source_alloydb_ssl_modes_verify_ca: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCaArgs']] = None,
                 source_alloydb_ssl_modes_verify_full: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFullArgs']] = None,
                 source_alloydb_update_ssl_modes_allow: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllowArgs']] = None,
                 source_alloydb_update_ssl_modes_disable: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisableArgs']] = None,
                 source_alloydb_update_ssl_modes_prefer: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPreferArgs']] = None,
                 source_alloydb_update_ssl_modes_require: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequireArgs']] = None,
                 source_alloydb_update_ssl_modes_verify_ca: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCaArgs']] = None,
                 source_alloydb_update_ssl_modes_verify_full: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFullArgs']] = None):
        if source_alloydb_ssl_modes_allow is not None:
            pulumi.set(__self__, "source_alloydb_ssl_modes_allow", source_alloydb_ssl_modes_allow)
        if source_alloydb_ssl_modes_disable is not None:
            pulumi.set(__self__, "source_alloydb_ssl_modes_disable", source_alloydb_ssl_modes_disable)
        if source_alloydb_ssl_modes_prefer is not None:
            pulumi.set(__self__, "source_alloydb_ssl_modes_prefer", source_alloydb_ssl_modes_prefer)
        if source_alloydb_ssl_modes_require is not None:
            pulumi.set(__self__, "source_alloydb_ssl_modes_require", source_alloydb_ssl_modes_require)
        if source_alloydb_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "source_alloydb_ssl_modes_verify_ca", source_alloydb_ssl_modes_verify_ca)
        if source_alloydb_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "source_alloydb_ssl_modes_verify_full", source_alloydb_ssl_modes_verify_full)
        if source_alloydb_update_ssl_modes_allow is not None:
            pulumi.set(__self__, "source_alloydb_update_ssl_modes_allow", source_alloydb_update_ssl_modes_allow)
        if source_alloydb_update_ssl_modes_disable is not None:
            pulumi.set(__self__, "source_alloydb_update_ssl_modes_disable", source_alloydb_update_ssl_modes_disable)
        if source_alloydb_update_ssl_modes_prefer is not None:
            pulumi.set(__self__, "source_alloydb_update_ssl_modes_prefer", source_alloydb_update_ssl_modes_prefer)
        if source_alloydb_update_ssl_modes_require is not None:
            pulumi.set(__self__, "source_alloydb_update_ssl_modes_require", source_alloydb_update_ssl_modes_require)
        if source_alloydb_update_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "source_alloydb_update_ssl_modes_verify_ca", source_alloydb_update_ssl_modes_verify_ca)
        if source_alloydb_update_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "source_alloydb_update_ssl_modes_verify_full", source_alloydb_update_ssl_modes_verify_full)

    @property
    @pulumi.getter(name="sourceAlloydbSslModesAllow")
    def source_alloydb_ssl_modes_allow(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllowArgs']]:
        return pulumi.get(self, "source_alloydb_ssl_modes_allow")

    @source_alloydb_ssl_modes_allow.setter
    def source_alloydb_ssl_modes_allow(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllowArgs']]):
        pulumi.set(self, "source_alloydb_ssl_modes_allow", value)

    @property
    @pulumi.getter(name="sourceAlloydbSslModesDisable")
    def source_alloydb_ssl_modes_disable(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisableArgs']]:
        return pulumi.get(self, "source_alloydb_ssl_modes_disable")

    @source_alloydb_ssl_modes_disable.setter
    def source_alloydb_ssl_modes_disable(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisableArgs']]):
        pulumi.set(self, "source_alloydb_ssl_modes_disable", value)

    @property
    @pulumi.getter(name="sourceAlloydbSslModesPrefer")
    def source_alloydb_ssl_modes_prefer(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPreferArgs']]:
        return pulumi.get(self, "source_alloydb_ssl_modes_prefer")

    @source_alloydb_ssl_modes_prefer.setter
    def source_alloydb_ssl_modes_prefer(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPreferArgs']]):
        pulumi.set(self, "source_alloydb_ssl_modes_prefer", value)

    @property
    @pulumi.getter(name="sourceAlloydbSslModesRequire")
    def source_alloydb_ssl_modes_require(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequireArgs']]:
        return pulumi.get(self, "source_alloydb_ssl_modes_require")

    @source_alloydb_ssl_modes_require.setter
    def source_alloydb_ssl_modes_require(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequireArgs']]):
        pulumi.set(self, "source_alloydb_ssl_modes_require", value)

    @property
    @pulumi.getter(name="sourceAlloydbSslModesVerifyCa")
    def source_alloydb_ssl_modes_verify_ca(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCaArgs']]:
        return pulumi.get(self, "source_alloydb_ssl_modes_verify_ca")

    @source_alloydb_ssl_modes_verify_ca.setter
    def source_alloydb_ssl_modes_verify_ca(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCaArgs']]):
        pulumi.set(self, "source_alloydb_ssl_modes_verify_ca", value)

    @property
    @pulumi.getter(name="sourceAlloydbSslModesVerifyFull")
    def source_alloydb_ssl_modes_verify_full(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFullArgs']]:
        return pulumi.get(self, "source_alloydb_ssl_modes_verify_full")

    @source_alloydb_ssl_modes_verify_full.setter
    def source_alloydb_ssl_modes_verify_full(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFullArgs']]):
        pulumi.set(self, "source_alloydb_ssl_modes_verify_full", value)

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesAllow")
    def source_alloydb_update_ssl_modes_allow(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllowArgs']]:
        return pulumi.get(self, "source_alloydb_update_ssl_modes_allow")

    @source_alloydb_update_ssl_modes_allow.setter
    def source_alloydb_update_ssl_modes_allow(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllowArgs']]):
        pulumi.set(self, "source_alloydb_update_ssl_modes_allow", value)

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesDisable")
    def source_alloydb_update_ssl_modes_disable(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisableArgs']]:
        return pulumi.get(self, "source_alloydb_update_ssl_modes_disable")

    @source_alloydb_update_ssl_modes_disable.setter
    def source_alloydb_update_ssl_modes_disable(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisableArgs']]):
        pulumi.set(self, "source_alloydb_update_ssl_modes_disable", value)

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesPrefer")
    def source_alloydb_update_ssl_modes_prefer(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPreferArgs']]:
        return pulumi.get(self, "source_alloydb_update_ssl_modes_prefer")

    @source_alloydb_update_ssl_modes_prefer.setter
    def source_alloydb_update_ssl_modes_prefer(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPreferArgs']]):
        pulumi.set(self, "source_alloydb_update_ssl_modes_prefer", value)

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesRequire")
    def source_alloydb_update_ssl_modes_require(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequireArgs']]:
        return pulumi.get(self, "source_alloydb_update_ssl_modes_require")

    @source_alloydb_update_ssl_modes_require.setter
    def source_alloydb_update_ssl_modes_require(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequireArgs']]):
        pulumi.set(self, "source_alloydb_update_ssl_modes_require", value)

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesVerifyCa")
    def source_alloydb_update_ssl_modes_verify_ca(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCaArgs']]:
        return pulumi.get(self, "source_alloydb_update_ssl_modes_verify_ca")

    @source_alloydb_update_ssl_modes_verify_ca.setter
    def source_alloydb_update_ssl_modes_verify_ca(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCaArgs']]):
        pulumi.set(self, "source_alloydb_update_ssl_modes_verify_ca", value)

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSslModesVerifyFull")
    def source_alloydb_update_ssl_modes_verify_full(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFullArgs']]:
        return pulumi.get(self, "source_alloydb_update_ssl_modes_verify_full")

    @source_alloydb_update_ssl_modes_verify_full.setter
    def source_alloydb_update_ssl_modes_verify_full(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFullArgs']]):
        pulumi.set(self, "source_alloydb_update_ssl_modes_verify_full", value)


@pulumi.input_type
class SourceAlloydbConfigurationSslModeSourceAlloydbSslModesAllowArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceAlloydbConfigurationSslModeSourceAlloydbSslModesDisableArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceAlloydbConfigurationSslModeSourceAlloydbSslModesPreferArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceAlloydbConfigurationSslModeSourceAlloydbSslModesRequireArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyCaArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class SourceAlloydbConfigurationSslModeSourceAlloydbSslModesVerifyFullArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesAllowArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesDisableArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesPreferArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesRequireArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyCaArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class SourceAlloydbConfigurationSslModeSourceAlloydbUpdateSslModesVerifyFullArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class SourceAlloydbConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 source_alloydb_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnelArgs']] = None,
                 source_alloydb_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 source_alloydb_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 source_alloydb_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 source_alloydb_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 source_alloydb_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if source_alloydb_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_alloydb_ssh_tunnel_method_no_tunnel", source_alloydb_ssh_tunnel_method_no_tunnel)
        if source_alloydb_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_alloydb_ssh_tunnel_method_password_authentication", source_alloydb_ssh_tunnel_method_password_authentication)
        if source_alloydb_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_alloydb_ssh_tunnel_method_ssh_key_authentication", source_alloydb_ssh_tunnel_method_ssh_key_authentication)
        if source_alloydb_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_alloydb_update_ssh_tunnel_method_no_tunnel", source_alloydb_update_ssh_tunnel_method_no_tunnel)
        if source_alloydb_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_alloydb_update_ssh_tunnel_method_password_authentication", source_alloydb_update_ssh_tunnel_method_password_authentication)
        if source_alloydb_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_alloydb_update_ssh_tunnel_method_ssh_key_authentication", source_alloydb_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceAlloydbSshTunnelMethodNoTunnel")
    def source_alloydb_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "source_alloydb_ssh_tunnel_method_no_tunnel")

    @source_alloydb_ssh_tunnel_method_no_tunnel.setter
    def source_alloydb_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "source_alloydb_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="sourceAlloydbSshTunnelMethodPasswordAuthentication")
    def source_alloydb_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_alloydb_ssh_tunnel_method_password_authentication")

    @source_alloydb_ssh_tunnel_method_password_authentication.setter
    def source_alloydb_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_alloydb_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="sourceAlloydbSshTunnelMethodSshKeyAuthentication")
    def source_alloydb_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_alloydb_ssh_tunnel_method_ssh_key_authentication")

    @source_alloydb_ssh_tunnel_method_ssh_key_authentication.setter
    def source_alloydb_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_alloydb_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSshTunnelMethodNoTunnel")
    def source_alloydb_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "source_alloydb_update_ssh_tunnel_method_no_tunnel")

    @source_alloydb_update_ssh_tunnel_method_no_tunnel.setter
    def source_alloydb_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "source_alloydb_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSshTunnelMethodPasswordAuthentication")
    def source_alloydb_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_alloydb_update_ssh_tunnel_method_password_authentication")

    @source_alloydb_update_ssh_tunnel_method_password_authentication.setter
    def source_alloydb_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_alloydb_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="sourceAlloydbUpdateSshTunnelMethodSshKeyAuthentication")
    def source_alloydb_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_alloydb_update_ssh_tunnel_method_ssh_key_authentication")

    @source_alloydb_update_ssh_tunnel_method_ssh_key_authentication.setter
    def source_alloydb_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_alloydb_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class SourceAlloydbConfigurationTunnelMethodSourceAlloydbSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class SourceAlloydbConfigurationTunnelMethodSourceAlloydbUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class SourceAmazonAdsConfigurationArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 look_back_window: Optional[pulumi.Input[int]] = None,
                 profiles: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 report_record_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 state_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if look_back_window is not None:
            pulumi.set(__self__, "look_back_window", look_back_window)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if report_record_types is not None:
            pulumi.set(__self__, "report_record_types", report_record_types)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if state_filters is not None:
            pulumi.set(__self__, "state_filters", state_filters)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="lookBackWindow")
    def look_back_window(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "look_back_window")

    @look_back_window.setter
    def look_back_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "look_back_window", value)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "profiles", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="reportRecordTypes")
    def report_record_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "report_record_types")

    @report_record_types.setter
    def report_record_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "report_record_types", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="stateFilters")
    def state_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "state_filters")

    @state_filters.setter
    def state_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "state_filters", value)


@pulumi.input_type
class SourceAmazonSellerPartnerConfigurationArgs:
    def __init__(__self__, *,
                 aws_environment: pulumi.Input[str],
                 lwa_app_id: pulumi.Input[str],
                 lwa_client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 region: pulumi.Input[str],
                 replication_start_date: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 advanced_stream_options: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 aws_access_key: Optional[pulumi.Input[str]] = None,
                 aws_secret_key: Optional[pulumi.Input[str]] = None,
                 max_wait_seconds: Optional[pulumi.Input[int]] = None,
                 period_in_days: Optional[pulumi.Input[int]] = None,
                 replication_end_date: Optional[pulumi.Input[str]] = None,
                 report_options: Optional[pulumi.Input[str]] = None,
                 role_arn: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "aws_environment", aws_environment)
        pulumi.set(__self__, "lwa_app_id", lwa_app_id)
        pulumi.set(__self__, "lwa_client_secret", lwa_client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "replication_start_date", replication_start_date)
        pulumi.set(__self__, "source_type", source_type)
        if advanced_stream_options is not None:
            pulumi.set(__self__, "advanced_stream_options", advanced_stream_options)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if aws_access_key is not None:
            pulumi.set(__self__, "aws_access_key", aws_access_key)
        if aws_secret_key is not None:
            pulumi.set(__self__, "aws_secret_key", aws_secret_key)
        if max_wait_seconds is not None:
            pulumi.set(__self__, "max_wait_seconds", max_wait_seconds)
        if period_in_days is not None:
            pulumi.set(__self__, "period_in_days", period_in_days)
        if replication_end_date is not None:
            pulumi.set(__self__, "replication_end_date", replication_end_date)
        if report_options is not None:
            pulumi.set(__self__, "report_options", report_options)
        if role_arn is not None:
            pulumi.set(__self__, "role_arn", role_arn)

    @property
    @pulumi.getter(name="awsEnvironment")
    def aws_environment(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_environment")

    @aws_environment.setter
    def aws_environment(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_environment", value)

    @property
    @pulumi.getter(name="lwaAppId")
    def lwa_app_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lwa_app_id")

    @lwa_app_id.setter
    def lwa_app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "lwa_app_id", value)

    @property
    @pulumi.getter(name="lwaClientSecret")
    def lwa_client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lwa_client_secret")

    @lwa_client_secret.setter
    def lwa_client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "lwa_client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="replicationStartDate")
    def replication_start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "replication_start_date")

    @replication_start_date.setter
    def replication_start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "replication_start_date", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="advancedStreamOptions")
    def advanced_stream_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advanced_stream_options")

    @advanced_stream_options.setter
    def advanced_stream_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advanced_stream_options", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="awsAccessKey")
    def aws_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_access_key")

    @aws_access_key.setter
    def aws_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_access_key", value)

    @property
    @pulumi.getter(name="awsSecretKey")
    def aws_secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_secret_key")

    @aws_secret_key.setter
    def aws_secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_secret_key", value)

    @property
    @pulumi.getter(name="maxWaitSeconds")
    def max_wait_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_wait_seconds")

    @max_wait_seconds.setter
    def max_wait_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_wait_seconds", value)

    @property
    @pulumi.getter(name="periodInDays")
    def period_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "period_in_days")

    @period_in_days.setter
    def period_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "period_in_days", value)

    @property
    @pulumi.getter(name="replicationEndDate")
    def replication_end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replication_end_date")

    @replication_end_date.setter
    def replication_end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replication_end_date", value)

    @property
    @pulumi.getter(name="reportOptions")
    def report_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "report_options")

    @report_options.setter
    def report_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_options", value)

    @property
    @pulumi.getter(name="roleArn")
    def role_arn(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role_arn")

    @role_arn.setter
    def role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_arn", value)


@pulumi.input_type
class SourceAmazonSqsConfigurationArgs:
    def __init__(__self__, *,
                 delete_messages: pulumi.Input[bool],
                 queue_url: pulumi.Input[str],
                 region: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 access_key: Optional[pulumi.Input[str]] = None,
                 attributes_to_return: Optional[pulumi.Input[str]] = None,
                 max_batch_size: Optional[pulumi.Input[int]] = None,
                 max_wait_time: Optional[pulumi.Input[int]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 visibility_timeout: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "delete_messages", delete_messages)
        pulumi.set(__self__, "queue_url", queue_url)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "source_type", source_type)
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if attributes_to_return is not None:
            pulumi.set(__self__, "attributes_to_return", attributes_to_return)
        if max_batch_size is not None:
            pulumi.set(__self__, "max_batch_size", max_batch_size)
        if max_wait_time is not None:
            pulumi.set(__self__, "max_wait_time", max_wait_time)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if visibility_timeout is not None:
            pulumi.set(__self__, "visibility_timeout", visibility_timeout)

    @property
    @pulumi.getter(name="deleteMessages")
    def delete_messages(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "delete_messages")

    @delete_messages.setter
    def delete_messages(self, value: pulumi.Input[bool]):
        pulumi.set(self, "delete_messages", value)

    @property
    @pulumi.getter(name="queueUrl")
    def queue_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "queue_url")

    @queue_url.setter
    def queue_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "queue_url", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="attributesToReturn")
    def attributes_to_return(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "attributes_to_return")

    @attributes_to_return.setter
    def attributes_to_return(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attributes_to_return", value)

    @property
    @pulumi.getter(name="maxBatchSize")
    def max_batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_batch_size")

    @max_batch_size.setter
    def max_batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_batch_size", value)

    @property
    @pulumi.getter(name="maxWaitTime")
    def max_wait_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_wait_time")

    @max_wait_time.setter
    def max_wait_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_wait_time", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="visibilityTimeout")
    def visibility_timeout(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "visibility_timeout")

    @visibility_timeout.setter
    def visibility_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "visibility_timeout", value)


@pulumi.input_type
class SourceAmplitudeConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 data_region: Optional[pulumi.Input[str]] = None,
                 request_time_range: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if data_region is not None:
            pulumi.set(__self__, "data_region", data_region)
        if request_time_range is not None:
            pulumi.set(__self__, "request_time_range", request_time_range)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="dataRegion")
    def data_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_region")

    @data_region.setter
    def data_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_region", value)

    @property
    @pulumi.getter(name="requestTimeRange")
    def request_time_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "request_time_range")

    @request_time_range.setter
    def request_time_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "request_time_range", value)


@pulumi.input_type
class SourceApifyDatasetConfigurationArgs:
    def __init__(__self__, *,
                 dataset_id: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 clean: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "source_type", source_type)
        if clean is not None:
            pulumi.set(__self__, "clean", clean)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def clean(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "clean")

    @clean.setter
    def clean(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "clean", value)


@pulumi.input_type
class SourceAppfollowConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 api_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        if api_secret is not None:
            pulumi.set(__self__, "api_secret", api_secret)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_secret")

    @api_secret.setter
    def api_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_secret", value)


@pulumi.input_type
class SourceAsanaConfigurationArgs:
    def __init__(__self__, *,
                 credentials: Optional[pulumi.Input['SourceAsanaConfigurationCredentialsArgs']] = None,
                 source_type: Optional[pulumi.Input[str]] = None):
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceAsanaConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceAsanaConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceAsanaConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_asana_authentication_mechanism_authenticate_via_asana_oauth: Optional[pulumi.Input['SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthArgs']] = None,
                 source_asana_authentication_mechanism_authenticate_with_personal_access_token: Optional[pulumi.Input['SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs']] = None,
                 source_asana_update_authentication_mechanism_authenticate_via_asana_oauth: Optional[pulumi.Input['SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauthArgs']] = None,
                 source_asana_update_authentication_mechanism_authenticate_with_personal_access_token: Optional[pulumi.Input['SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs']] = None):
        if source_asana_authentication_mechanism_authenticate_via_asana_oauth is not None:
            pulumi.set(__self__, "source_asana_authentication_mechanism_authenticate_via_asana_oauth", source_asana_authentication_mechanism_authenticate_via_asana_oauth)
        if source_asana_authentication_mechanism_authenticate_with_personal_access_token is not None:
            pulumi.set(__self__, "source_asana_authentication_mechanism_authenticate_with_personal_access_token", source_asana_authentication_mechanism_authenticate_with_personal_access_token)
        if source_asana_update_authentication_mechanism_authenticate_via_asana_oauth is not None:
            pulumi.set(__self__, "source_asana_update_authentication_mechanism_authenticate_via_asana_oauth", source_asana_update_authentication_mechanism_authenticate_via_asana_oauth)
        if source_asana_update_authentication_mechanism_authenticate_with_personal_access_token is not None:
            pulumi.set(__self__, "source_asana_update_authentication_mechanism_authenticate_with_personal_access_token", source_asana_update_authentication_mechanism_authenticate_with_personal_access_token)

    @property
    @pulumi.getter(name="sourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauth")
    def source_asana_authentication_mechanism_authenticate_via_asana_oauth(self) -> Optional[pulumi.Input['SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthArgs']]:
        return pulumi.get(self, "source_asana_authentication_mechanism_authenticate_via_asana_oauth")

    @source_asana_authentication_mechanism_authenticate_via_asana_oauth.setter
    def source_asana_authentication_mechanism_authenticate_via_asana_oauth(self, value: Optional[pulumi.Input['SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthArgs']]):
        pulumi.set(self, "source_asana_authentication_mechanism_authenticate_via_asana_oauth", value)

    @property
    @pulumi.getter(name="sourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessToken")
    def source_asana_authentication_mechanism_authenticate_with_personal_access_token(self) -> Optional[pulumi.Input['SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs']]:
        return pulumi.get(self, "source_asana_authentication_mechanism_authenticate_with_personal_access_token")

    @source_asana_authentication_mechanism_authenticate_with_personal_access_token.setter
    def source_asana_authentication_mechanism_authenticate_with_personal_access_token(self, value: Optional[pulumi.Input['SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs']]):
        pulumi.set(self, "source_asana_authentication_mechanism_authenticate_with_personal_access_token", value)

    @property
    @pulumi.getter(name="sourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauth")
    def source_asana_update_authentication_mechanism_authenticate_via_asana_oauth(self) -> Optional[pulumi.Input['SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauthArgs']]:
        return pulumi.get(self, "source_asana_update_authentication_mechanism_authenticate_via_asana_oauth")

    @source_asana_update_authentication_mechanism_authenticate_via_asana_oauth.setter
    def source_asana_update_authentication_mechanism_authenticate_via_asana_oauth(self, value: Optional[pulumi.Input['SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauthArgs']]):
        pulumi.set(self, "source_asana_update_authentication_mechanism_authenticate_via_asana_oauth", value)

    @property
    @pulumi.getter(name="sourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken")
    def source_asana_update_authentication_mechanism_authenticate_with_personal_access_token(self) -> Optional[pulumi.Input['SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs']]:
        return pulumi.get(self, "source_asana_update_authentication_mechanism_authenticate_with_personal_access_token")

    @source_asana_update_authentication_mechanism_authenticate_with_personal_access_token.setter
    def source_asana_update_authentication_mechanism_authenticate_with_personal_access_token(self, value: Optional[pulumi.Input['SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs']]):
        pulumi.set(self, "source_asana_update_authentication_mechanism_authenticate_with_personal_access_token", value)


@pulumi.input_type
class SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateViaAsanaOauthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceAsanaConfigurationCredentialsSourceAsanaAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs:
    def __init__(__self__, *,
                 personal_access_token: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "personal_access_token", personal_access_token)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="personalAccessToken")
    def personal_access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "personal_access_token")

    @personal_access_token.setter
    def personal_access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "personal_access_token", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateViaAsanaOauthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceAsanaConfigurationCredentialsSourceAsanaUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs:
    def __init__(__self__, *,
                 personal_access_token: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "personal_access_token", personal_access_token)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="personalAccessToken")
    def personal_access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "personal_access_token")

    @personal_access_token.setter
    def personal_access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "personal_access_token", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceAuth0ConfigurationArgs:
    def __init__(__self__, *,
                 base_url: pulumi.Input[str],
                 credentials: pulumi.Input['SourceAuth0ConfigurationCredentialsArgs'],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['SourceAuth0ConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['SourceAuth0ConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceAuth0ConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_auth0_authentication_method_o_auth2_access_token: Optional[pulumi.Input['SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessTokenArgs']] = None,
                 source_auth0_authentication_method_o_auth2_confidential_application: Optional[pulumi.Input['SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplicationArgs']] = None,
                 source_auth0_update_authentication_method_o_auth2_access_token: Optional[pulumi.Input['SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenArgs']] = None,
                 source_auth0_update_authentication_method_o_auth2_confidential_application: Optional[pulumi.Input['SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationArgs']] = None):
        if source_auth0_authentication_method_o_auth2_access_token is not None:
            pulumi.set(__self__, "source_auth0_authentication_method_o_auth2_access_token", source_auth0_authentication_method_o_auth2_access_token)
        if source_auth0_authentication_method_o_auth2_confidential_application is not None:
            pulumi.set(__self__, "source_auth0_authentication_method_o_auth2_confidential_application", source_auth0_authentication_method_o_auth2_confidential_application)
        if source_auth0_update_authentication_method_o_auth2_access_token is not None:
            pulumi.set(__self__, "source_auth0_update_authentication_method_o_auth2_access_token", source_auth0_update_authentication_method_o_auth2_access_token)
        if source_auth0_update_authentication_method_o_auth2_confidential_application is not None:
            pulumi.set(__self__, "source_auth0_update_authentication_method_o_auth2_confidential_application", source_auth0_update_authentication_method_o_auth2_confidential_application)

    @property
    @pulumi.getter(name="sourceAuth0AuthenticationMethodOAuth2AccessToken")
    def source_auth0_authentication_method_o_auth2_access_token(self) -> Optional[pulumi.Input['SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessTokenArgs']]:
        return pulumi.get(self, "source_auth0_authentication_method_o_auth2_access_token")

    @source_auth0_authentication_method_o_auth2_access_token.setter
    def source_auth0_authentication_method_o_auth2_access_token(self, value: Optional[pulumi.Input['SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessTokenArgs']]):
        pulumi.set(self, "source_auth0_authentication_method_o_auth2_access_token", value)

    @property
    @pulumi.getter(name="sourceAuth0AuthenticationMethodOAuth2ConfidentialApplication")
    def source_auth0_authentication_method_o_auth2_confidential_application(self) -> Optional[pulumi.Input['SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplicationArgs']]:
        return pulumi.get(self, "source_auth0_authentication_method_o_auth2_confidential_application")

    @source_auth0_authentication_method_o_auth2_confidential_application.setter
    def source_auth0_authentication_method_o_auth2_confidential_application(self, value: Optional[pulumi.Input['SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplicationArgs']]):
        pulumi.set(self, "source_auth0_authentication_method_o_auth2_confidential_application", value)

    @property
    @pulumi.getter(name="sourceAuth0UpdateAuthenticationMethodOAuth2AccessToken")
    def source_auth0_update_authentication_method_o_auth2_access_token(self) -> Optional[pulumi.Input['SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenArgs']]:
        return pulumi.get(self, "source_auth0_update_authentication_method_o_auth2_access_token")

    @source_auth0_update_authentication_method_o_auth2_access_token.setter
    def source_auth0_update_authentication_method_o_auth2_access_token(self, value: Optional[pulumi.Input['SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenArgs']]):
        pulumi.set(self, "source_auth0_update_authentication_method_o_auth2_access_token", value)

    @property
    @pulumi.getter(name="sourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplication")
    def source_auth0_update_authentication_method_o_auth2_confidential_application(self) -> Optional[pulumi.Input['SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationArgs']]:
        return pulumi.get(self, "source_auth0_update_authentication_method_o_auth2_confidential_application")

    @source_auth0_update_authentication_method_o_auth2_confidential_application.setter
    def source_auth0_update_authentication_method_o_auth2_confidential_application(self, value: Optional[pulumi.Input['SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationArgs']]):
        pulumi.set(self, "source_auth0_update_authentication_method_o_auth2_confidential_application", value)


@pulumi.input_type
class SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2AccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceAuth0ConfigurationCredentialsSourceAuth0AuthenticationMethodOAuth2ConfidentialApplicationArgs:
    def __init__(__self__, *,
                 audience: pulumi.Input[str],
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str]):
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter
    def audience(self) -> pulumi.Input[str]:
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: pulumi.Input[str]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2AccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceAuth0ConfigurationCredentialsSourceAuth0UpdateAuthenticationMethodOAuth2ConfidentialApplicationArgs:
    def __init__(__self__, *,
                 audience: pulumi.Input[str],
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str]):
        pulumi.set(__self__, "audience", audience)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter
    def audience(self) -> pulumi.Input[str]:
        return pulumi.get(self, "audience")

    @audience.setter
    def audience(self, value: pulumi.Input[str]):
        pulumi.set(self, "audience", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceAwsCloudtrailConfigurationArgs:
    def __init__(__self__, *,
                 aws_key_id: pulumi.Input[str],
                 aws_region_name: pulumi.Input[str],
                 aws_secret_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "aws_key_id", aws_key_id)
        pulumi.set(__self__, "aws_region_name", aws_region_name)
        pulumi.set(__self__, "aws_secret_key", aws_secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="awsKeyId")
    def aws_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_key_id")

    @aws_key_id.setter
    def aws_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_key_id", value)

    @property
    @pulumi.getter(name="awsRegionName")
    def aws_region_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_region_name")

    @aws_region_name.setter
    def aws_region_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_region_name", value)

    @property
    @pulumi.getter(name="awsSecretKey")
    def aws_secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "aws_secret_key")

    @aws_secret_key.setter
    def aws_secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "aws_secret_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceAzureBlobStorageConfigurationArgs:
    def __init__(__self__, *,
                 azure_blob_storage_account_key: pulumi.Input[str],
                 azure_blob_storage_account_name: pulumi.Input[str],
                 azure_blob_storage_container_name: pulumi.Input[str],
                 format: pulumi.Input['SourceAzureBlobStorageConfigurationFormatArgs'],
                 source_type: pulumi.Input[str],
                 azure_blob_storage_blobs_prefix: Optional[pulumi.Input[str]] = None,
                 azure_blob_storage_endpoint: Optional[pulumi.Input[str]] = None,
                 azure_blob_storage_schema_inference_limit: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "azure_blob_storage_account_key", azure_blob_storage_account_key)
        pulumi.set(__self__, "azure_blob_storage_account_name", azure_blob_storage_account_name)
        pulumi.set(__self__, "azure_blob_storage_container_name", azure_blob_storage_container_name)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "source_type", source_type)
        if azure_blob_storage_blobs_prefix is not None:
            pulumi.set(__self__, "azure_blob_storage_blobs_prefix", azure_blob_storage_blobs_prefix)
        if azure_blob_storage_endpoint is not None:
            pulumi.set(__self__, "azure_blob_storage_endpoint", azure_blob_storage_endpoint)
        if azure_blob_storage_schema_inference_limit is not None:
            pulumi.set(__self__, "azure_blob_storage_schema_inference_limit", azure_blob_storage_schema_inference_limit)

    @property
    @pulumi.getter(name="azureBlobStorageAccountKey")
    def azure_blob_storage_account_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "azure_blob_storage_account_key")

    @azure_blob_storage_account_key.setter
    def azure_blob_storage_account_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_blob_storage_account_key", value)

    @property
    @pulumi.getter(name="azureBlobStorageAccountName")
    def azure_blob_storage_account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "azure_blob_storage_account_name")

    @azure_blob_storage_account_name.setter
    def azure_blob_storage_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_blob_storage_account_name", value)

    @property
    @pulumi.getter(name="azureBlobStorageContainerName")
    def azure_blob_storage_container_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "azure_blob_storage_container_name")

    @azure_blob_storage_container_name.setter
    def azure_blob_storage_container_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "azure_blob_storage_container_name", value)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input['SourceAzureBlobStorageConfigurationFormatArgs']:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input['SourceAzureBlobStorageConfigurationFormatArgs']):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="azureBlobStorageBlobsPrefix")
    def azure_blob_storage_blobs_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_blob_storage_blobs_prefix")

    @azure_blob_storage_blobs_prefix.setter
    def azure_blob_storage_blobs_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_blob_storage_blobs_prefix", value)

    @property
    @pulumi.getter(name="azureBlobStorageEndpoint")
    def azure_blob_storage_endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "azure_blob_storage_endpoint")

    @azure_blob_storage_endpoint.setter
    def azure_blob_storage_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "azure_blob_storage_endpoint", value)

    @property
    @pulumi.getter(name="azureBlobStorageSchemaInferenceLimit")
    def azure_blob_storage_schema_inference_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "azure_blob_storage_schema_inference_limit")

    @azure_blob_storage_schema_inference_limit.setter
    def azure_blob_storage_schema_inference_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "azure_blob_storage_schema_inference_limit", value)


@pulumi.input_type
class SourceAzureBlobStorageConfigurationFormatArgs:
    def __init__(__self__, *,
                 source_azure_blob_storage_input_format_json_lines_newline_delimited_json: Optional[pulumi.Input['SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJsonArgs']] = None,
                 source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json: Optional[pulumi.Input['SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJsonArgs']] = None):
        if source_azure_blob_storage_input_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "source_azure_blob_storage_input_format_json_lines_newline_delimited_json", source_azure_blob_storage_input_format_json_lines_newline_delimited_json)
        if source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json is not None:
            pulumi.set(__self__, "source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json", source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json)

    @property
    @pulumi.getter(name="sourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJson")
    def source_azure_blob_storage_input_format_json_lines_newline_delimited_json(self) -> Optional[pulumi.Input['SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJsonArgs']]:
        return pulumi.get(self, "source_azure_blob_storage_input_format_json_lines_newline_delimited_json")

    @source_azure_blob_storage_input_format_json_lines_newline_delimited_json.setter
    def source_azure_blob_storage_input_format_json_lines_newline_delimited_json(self, value: Optional[pulumi.Input['SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJsonArgs']]):
        pulumi.set(self, "source_azure_blob_storage_input_format_json_lines_newline_delimited_json", value)

    @property
    @pulumi.getter(name="sourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJson")
    def source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json(self) -> Optional[pulumi.Input['SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJsonArgs']]:
        return pulumi.get(self, "source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json")

    @source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json.setter
    def source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json(self, value: Optional[pulumi.Input['SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJsonArgs']]):
        pulumi.set(self, "source_azure_blob_storage_update_input_format_json_lines_newline_delimited_json", value)


@pulumi.input_type
class SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageInputFormatJsonLinesNewlineDelimitedJsonArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str]):
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)


@pulumi.input_type
class SourceAzureBlobStorageConfigurationFormatSourceAzureBlobStorageUpdateInputFormatJsonLinesNewlineDelimitedJsonArgs:
    def __init__(__self__, *,
                 format_type: pulumi.Input[str]):
        pulumi.set(__self__, "format_type", format_type)

    @property
    @pulumi.getter(name="formatType")
    def format_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format_type")

    @format_type.setter
    def format_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "format_type", value)


@pulumi.input_type
class SourceAzureTableConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 storage_access_key: pulumi.Input[str],
                 storage_account_name: pulumi.Input[str],
                 storage_endpoint_suffix: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "storage_access_key", storage_access_key)
        pulumi.set(__self__, "storage_account_name", storage_account_name)
        if storage_endpoint_suffix is not None:
            pulumi.set(__self__, "storage_endpoint_suffix", storage_endpoint_suffix)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="storageAccessKey")
    def storage_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_access_key")

    @storage_access_key.setter
    def storage_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_access_key", value)

    @property
    @pulumi.getter(name="storageAccountName")
    def storage_account_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_account_name")

    @storage_account_name.setter
    def storage_account_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account_name", value)

    @property
    @pulumi.getter(name="storageEndpointSuffix")
    def storage_endpoint_suffix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "storage_endpoint_suffix")

    @storage_endpoint_suffix.setter
    def storage_endpoint_suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "storage_endpoint_suffix", value)


@pulumi.input_type
class SourceBambooHrConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 subdomain: pulumi.Input[str],
                 custom_reports_fields: Optional[pulumi.Input[str]] = None,
                 custom_reports_include_default_fields: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "subdomain", subdomain)
        if custom_reports_fields is not None:
            pulumi.set(__self__, "custom_reports_fields", custom_reports_fields)
        if custom_reports_include_default_fields is not None:
            pulumi.set(__self__, "custom_reports_include_default_fields", custom_reports_include_default_fields)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter(name="customReportsFields")
    def custom_reports_fields(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_reports_fields")

    @custom_reports_fields.setter
    def custom_reports_fields(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_reports_fields", value)

    @property
    @pulumi.getter(name="customReportsIncludeDefaultFields")
    def custom_reports_include_default_fields(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "custom_reports_include_default_fields")

    @custom_reports_include_default_fields.setter
    def custom_reports_include_default_fields(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_reports_include_default_fields", value)


@pulumi.input_type
class SourceBigcommerceConfigurationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 store_hash: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "store_hash", store_hash)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="storeHash")
    def store_hash(self) -> pulumi.Input[str]:
        return pulumi.get(self, "store_hash")

    @store_hash.setter
    def store_hash(self, value: pulumi.Input[str]):
        pulumi.set(self, "store_hash", value)


@pulumi.input_type
class SourceBigqueryConfigurationArgs:
    def __init__(__self__, *,
                 credentials_json: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 dataset_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "source_type", source_type)
        if dataset_id is not None:
            pulumi.set(__self__, "dataset_id", dataset_id)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_json", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset_id", value)


@pulumi.input_type
class SourceBingAdsConfigurationArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 developer_token: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 reports_start_date: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 auth_method: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 lookback_window: Optional[pulumi.Input[int]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "developer_token", developer_token)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "reports_start_date", reports_start_date)
        pulumi.set(__self__, "source_type", source_type)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if lookback_window is not None:
            pulumi.set(__self__, "lookback_window", lookback_window)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="developerToken")
    def developer_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "developer_token")

    @developer_token.setter
    def developer_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "developer_token", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="reportsStartDate")
    def reports_start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "reports_start_date")

    @reports_start_date.setter
    def reports_start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "reports_start_date", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="lookbackWindow")
    def lookback_window(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lookback_window")

    @lookback_window.setter
    def lookback_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lookback_window", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class SourceBraintreeConfigurationArgs:
    def __init__(__self__, *,
                 environment: pulumi.Input[str],
                 merchant_id: pulumi.Input[str],
                 private_key: pulumi.Input[str],
                 public_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "merchant_id", merchant_id)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "public_key", public_key)
        pulumi.set(__self__, "source_type", source_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[str]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="merchantId")
    def merchant_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "merchant_id")

    @merchant_id.setter
    def merchant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "merchant_id", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="publicKey")
    def public_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "public_key")

    @public_key.setter
    def public_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceBrazeConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SourceChargebeeConfigurationArgs:
    def __init__(__self__, *,
                 product_catalog: pulumi.Input[str],
                 site: pulumi.Input[str],
                 site_api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "product_catalog", product_catalog)
        pulumi.set(__self__, "site", site)
        pulumi.set(__self__, "site_api_key", site_api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="productCatalog")
    def product_catalog(self) -> pulumi.Input[str]:
        return pulumi.get(self, "product_catalog")

    @product_catalog.setter
    def product_catalog(self, value: pulumi.Input[str]):
        pulumi.set(self, "product_catalog", value)

    @property
    @pulumi.getter
    def site(self) -> pulumi.Input[str]:
        return pulumi.get(self, "site")

    @site.setter
    def site(self, value: pulumi.Input[str]):
        pulumi.set(self, "site", value)

    @property
    @pulumi.getter(name="siteApiKey")
    def site_api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "site_api_key")

    @site_api_key.setter
    def site_api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "site_api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceChartmogulConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 interval: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Input[str]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[str]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceClickhouseConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 source_type: pulumi.Input[str],
                 username: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 tunnel_method: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceClickhouseConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 source_clickhouse_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnelArgs']] = None,
                 source_clickhouse_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 source_clickhouse_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 source_clickhouse_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 source_clickhouse_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if source_clickhouse_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_clickhouse_ssh_tunnel_method_no_tunnel", source_clickhouse_ssh_tunnel_method_no_tunnel)
        if source_clickhouse_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_clickhouse_ssh_tunnel_method_password_authentication", source_clickhouse_ssh_tunnel_method_password_authentication)
        if source_clickhouse_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_clickhouse_ssh_tunnel_method_ssh_key_authentication", source_clickhouse_ssh_tunnel_method_ssh_key_authentication)
        if source_clickhouse_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_clickhouse_update_ssh_tunnel_method_no_tunnel", source_clickhouse_update_ssh_tunnel_method_no_tunnel)
        if source_clickhouse_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_clickhouse_update_ssh_tunnel_method_password_authentication", source_clickhouse_update_ssh_tunnel_method_password_authentication)
        if source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication", source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceClickhouseSshTunnelMethodNoTunnel")
    def source_clickhouse_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "source_clickhouse_ssh_tunnel_method_no_tunnel")

    @source_clickhouse_ssh_tunnel_method_no_tunnel.setter
    def source_clickhouse_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "source_clickhouse_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="sourceClickhouseSshTunnelMethodPasswordAuthentication")
    def source_clickhouse_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_clickhouse_ssh_tunnel_method_password_authentication")

    @source_clickhouse_ssh_tunnel_method_password_authentication.setter
    def source_clickhouse_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_clickhouse_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="sourceClickhouseSshTunnelMethodSshKeyAuthentication")
    def source_clickhouse_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_clickhouse_ssh_tunnel_method_ssh_key_authentication")

    @source_clickhouse_ssh_tunnel_method_ssh_key_authentication.setter
    def source_clickhouse_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_clickhouse_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="sourceClickhouseUpdateSshTunnelMethodNoTunnel")
    def source_clickhouse_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "source_clickhouse_update_ssh_tunnel_method_no_tunnel")

    @source_clickhouse_update_ssh_tunnel_method_no_tunnel.setter
    def source_clickhouse_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "source_clickhouse_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="sourceClickhouseUpdateSshTunnelMethodPasswordAuthentication")
    def source_clickhouse_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_clickhouse_update_ssh_tunnel_method_password_authentication")

    @source_clickhouse_update_ssh_tunnel_method_password_authentication.setter
    def source_clickhouse_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_clickhouse_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="sourceClickhouseUpdateSshTunnelMethodSshKeyAuthentication")
    def source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication")

    @source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication.setter
    def source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_clickhouse_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class SourceClickhouseConfigurationTunnelMethodSourceClickhouseSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class SourceClickhouseConfigurationTunnelMethodSourceClickhouseUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class SourceClickupApiConfigurationArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 folder_id: Optional[pulumi.Input[str]] = None,
                 include_closed_tasks: Optional[pulumi.Input[bool]] = None,
                 list_id: Optional[pulumi.Input[str]] = None,
                 space_id: Optional[pulumi.Input[str]] = None,
                 team_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if include_closed_tasks is not None:
            pulumi.set(__self__, "include_closed_tasks", include_closed_tasks)
        if list_id is not None:
            pulumi.set(__self__, "list_id", list_id)
        if space_id is not None:
            pulumi.set(__self__, "space_id", space_id)
        if team_id is not None:
            pulumi.set(__self__, "team_id", team_id)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter(name="includeClosedTasks")
    def include_closed_tasks(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_closed_tasks")

    @include_closed_tasks.setter
    def include_closed_tasks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_closed_tasks", value)

    @property
    @pulumi.getter(name="listId")
    def list_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "list_id")

    @list_id.setter
    def list_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "list_id", value)

    @property
    @pulumi.getter(name="spaceId")
    def space_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "space_id")

    @space_id.setter
    def space_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "space_id", value)

    @property
    @pulumi.getter(name="teamId")
    def team_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "team_id")

    @team_id.setter
    def team_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "team_id", value)


@pulumi.input_type
class SourceClockifyConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 workspace_id: pulumi.Input[str],
                 api_url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "workspace_id", workspace_id)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="workspaceId")
    def workspace_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "workspace_id")

    @workspace_id.setter
    def workspace_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace_id", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)


@pulumi.input_type
class SourceCloseComConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceCodaConfigurationArgs:
    def __init__(__self__, *,
                 auth_token: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceCoinApiConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 environment: pulumi.Input[str],
                 period: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 symbol_id: pulumi.Input[str],
                 end_date: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "symbol_id", symbol_id)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[str]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[str]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[str]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="symbolId")
    def symbol_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "symbol_id")

    @symbol_id.setter
    def symbol_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "symbol_id", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)


@pulumi.input_type
class SourceCoinmarketcapConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 data_type: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 symbols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "data_type", data_type)
        pulumi.set(__self__, "source_type", source_type)
        if symbols is not None:
            pulumi.set(__self__, "symbols", symbols)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="dataType")
    def data_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_type")

    @data_type.setter
    def data_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_type", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def symbols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "symbols")

    @symbols.setter
    def symbols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "symbols", value)


@pulumi.input_type
class SourceConfigcatConfigurationArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class SourceConfluenceConfigurationArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 domain_name: pulumi.Input[str],
                 email: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceConvexConfigurationArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 deployment_url: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "deployment_url", deployment_url)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="deploymentUrl")
    def deployment_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deployment_url")

    @deployment_url.setter
    def deployment_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "deployment_url", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceDatadogConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 application_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 end_date: Optional[pulumi.Input[str]] = None,
                 max_records_per_request: Optional[pulumi.Input[int]] = None,
                 queries: Optional[pulumi.Input[Sequence[pulumi.Input['SourceDatadogConfigurationQueryArgs']]]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 site: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "application_key", application_key)
        pulumi.set(__self__, "source_type", source_type)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if max_records_per_request is not None:
            pulumi.set(__self__, "max_records_per_request", max_records_per_request)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if site is not None:
            pulumi.set(__self__, "site", site)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="applicationKey")
    def application_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "application_key")

    @application_key.setter
    def application_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="maxRecordsPerRequest")
    def max_records_per_request(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_records_per_request")

    @max_records_per_request.setter
    def max_records_per_request(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_records_per_request", value)

    @property
    @pulumi.getter
    def queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceDatadogConfigurationQueryArgs']]]]:
        return pulumi.get(self, "queries")

    @queries.setter
    def queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceDatadogConfigurationQueryArgs']]]]):
        pulumi.set(self, "queries", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def site(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "site")

    @site.setter
    def site(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "site", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceDatadogConfigurationQueryArgs:
    def __init__(__self__, *,
                 data_source: pulumi.Input[str],
                 name: pulumi.Input[str],
                 query: pulumi.Input[str]):
        pulumi.set(__self__, "data_source", data_source)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "query", query)

    @property
    @pulumi.getter(name="dataSource")
    def data_source(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_source")

    @data_source.setter
    def data_source(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_source", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)


@pulumi.input_type
class SourceDatascopeConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceDelightedConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 since: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "since", since)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def since(self) -> pulumi.Input[str]:
        return pulumi.get(self, "since")

    @since.setter
    def since(self, value: pulumi.Input[str]):
        pulumi.set(self, "since", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceDixaConfigurationArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 batch_size: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)


@pulumi.input_type
class SourceDockerhubConfigurationArgs:
    def __init__(__self__, *,
                 docker_username: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "docker_username", docker_username)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="dockerUsername")
    def docker_username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "docker_username")

    @docker_username.setter
    def docker_username(self, value: pulumi.Input[str]):
        pulumi.set(self, "docker_username", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceDremioConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 base_url: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "base_url", base_url)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_url", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceDynamodbConfigurationArgs:
    def __init__(__self__, *,
                 access_key_id: pulumi.Input[str],
                 secret_access_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 endpoint: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 reserved_attribute_names: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "secret_access_key", secret_access_key)
        pulumi.set(__self__, "source_type", source_type)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if reserved_attribute_names is not None:
            pulumi.set(__self__, "reserved_attribute_names", reserved_attribute_names)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_access_key")

    @secret_access_key.setter
    def secret_access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_access_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="reservedAttributeNames")
    def reserved_attribute_names(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reserved_attribute_names")

    @reserved_attribute_names.setter
    def reserved_attribute_names(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reserved_attribute_names", value)


@pulumi.input_type
class SourceE2eTestCloudConfigurationArgs:
    def __init__(__self__, *,
                 max_messages: pulumi.Input[int],
                 mock_catalog: pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogArgs'],
                 source_type: pulumi.Input[str],
                 message_interval_ms: Optional[pulumi.Input[int]] = None,
                 seed: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "max_messages", max_messages)
        pulumi.set(__self__, "mock_catalog", mock_catalog)
        pulumi.set(__self__, "source_type", source_type)
        if message_interval_ms is not None:
            pulumi.set(__self__, "message_interval_ms", message_interval_ms)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="maxMessages")
    def max_messages(self) -> pulumi.Input[int]:
        return pulumi.get(self, "max_messages")

    @max_messages.setter
    def max_messages(self, value: pulumi.Input[int]):
        pulumi.set(self, "max_messages", value)

    @property
    @pulumi.getter(name="mockCatalog")
    def mock_catalog(self) -> pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogArgs']:
        return pulumi.get(self, "mock_catalog")

    @mock_catalog.setter
    def mock_catalog(self, value: pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogArgs']):
        pulumi.set(self, "mock_catalog", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="messageIntervalMs")
    def message_interval_ms(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "message_interval_ms")

    @message_interval_ms.setter
    def message_interval_ms(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "message_interval_ms", value)

    @property
    @pulumi.getter
    def seed(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seed")

    @seed.setter
    def seed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seed", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SourceE2eTestCloudConfigurationMockCatalogArgs:
    def __init__(__self__, *,
                 source_e2e_test_cloud_mock_catalog_multi_schema: Optional[pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchemaArgs']] = None,
                 source_e2e_test_cloud_mock_catalog_single_schema: Optional[pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchemaArgs']] = None,
                 source_e2e_test_cloud_update_mock_catalog_multi_schema: Optional[pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchemaArgs']] = None,
                 source_e2e_test_cloud_update_mock_catalog_single_schema: Optional[pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchemaArgs']] = None):
        if source_e2e_test_cloud_mock_catalog_multi_schema is not None:
            pulumi.set(__self__, "source_e2e_test_cloud_mock_catalog_multi_schema", source_e2e_test_cloud_mock_catalog_multi_schema)
        if source_e2e_test_cloud_mock_catalog_single_schema is not None:
            pulumi.set(__self__, "source_e2e_test_cloud_mock_catalog_single_schema", source_e2e_test_cloud_mock_catalog_single_schema)
        if source_e2e_test_cloud_update_mock_catalog_multi_schema is not None:
            pulumi.set(__self__, "source_e2e_test_cloud_update_mock_catalog_multi_schema", source_e2e_test_cloud_update_mock_catalog_multi_schema)
        if source_e2e_test_cloud_update_mock_catalog_single_schema is not None:
            pulumi.set(__self__, "source_e2e_test_cloud_update_mock_catalog_single_schema", source_e2e_test_cloud_update_mock_catalog_single_schema)

    @property
    @pulumi.getter(name="sourceE2eTestCloudMockCatalogMultiSchema")
    def source_e2e_test_cloud_mock_catalog_multi_schema(self) -> Optional[pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchemaArgs']]:
        return pulumi.get(self, "source_e2e_test_cloud_mock_catalog_multi_schema")

    @source_e2e_test_cloud_mock_catalog_multi_schema.setter
    def source_e2e_test_cloud_mock_catalog_multi_schema(self, value: Optional[pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchemaArgs']]):
        pulumi.set(self, "source_e2e_test_cloud_mock_catalog_multi_schema", value)

    @property
    @pulumi.getter(name="sourceE2eTestCloudMockCatalogSingleSchema")
    def source_e2e_test_cloud_mock_catalog_single_schema(self) -> Optional[pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchemaArgs']]:
        return pulumi.get(self, "source_e2e_test_cloud_mock_catalog_single_schema")

    @source_e2e_test_cloud_mock_catalog_single_schema.setter
    def source_e2e_test_cloud_mock_catalog_single_schema(self, value: Optional[pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchemaArgs']]):
        pulumi.set(self, "source_e2e_test_cloud_mock_catalog_single_schema", value)

    @property
    @pulumi.getter(name="sourceE2eTestCloudUpdateMockCatalogMultiSchema")
    def source_e2e_test_cloud_update_mock_catalog_multi_schema(self) -> Optional[pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchemaArgs']]:
        return pulumi.get(self, "source_e2e_test_cloud_update_mock_catalog_multi_schema")

    @source_e2e_test_cloud_update_mock_catalog_multi_schema.setter
    def source_e2e_test_cloud_update_mock_catalog_multi_schema(self, value: Optional[pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchemaArgs']]):
        pulumi.set(self, "source_e2e_test_cloud_update_mock_catalog_multi_schema", value)

    @property
    @pulumi.getter(name="sourceE2eTestCloudUpdateMockCatalogSingleSchema")
    def source_e2e_test_cloud_update_mock_catalog_single_schema(self) -> Optional[pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchemaArgs']]:
        return pulumi.get(self, "source_e2e_test_cloud_update_mock_catalog_single_schema")

    @source_e2e_test_cloud_update_mock_catalog_single_schema.setter
    def source_e2e_test_cloud_update_mock_catalog_single_schema(self, value: Optional[pulumi.Input['SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchemaArgs']]):
        pulumi.set(self, "source_e2e_test_cloud_update_mock_catalog_single_schema", value)


@pulumi.input_type
class SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogMultiSchemaArgs:
    def __init__(__self__, *,
                 stream_schemas: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "stream_schemas", stream_schemas)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="streamSchemas")
    def stream_schemas(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_schemas")

    @stream_schemas.setter
    def stream_schemas(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_schemas", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudMockCatalogSingleSchemaArgs:
    def __init__(__self__, *,
                 stream_name: pulumi.Input[str],
                 stream_schema: pulumi.Input[str],
                 type: pulumi.Input[str],
                 stream_duplication: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "stream_name", stream_name)
        pulumi.set(__self__, "stream_schema", stream_schema)
        pulumi.set(__self__, "type", type)
        if stream_duplication is not None:
            pulumi.set(__self__, "stream_duplication", stream_duplication)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_name", value)

    @property
    @pulumi.getter(name="streamSchema")
    def stream_schema(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_schema")

    @stream_schema.setter
    def stream_schema(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_schema", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="streamDuplication")
    def stream_duplication(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stream_duplication")

    @stream_duplication.setter
    def stream_duplication(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_duplication", value)


@pulumi.input_type
class SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogMultiSchemaArgs:
    def __init__(__self__, *,
                 stream_schemas: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "stream_schemas", stream_schemas)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="streamSchemas")
    def stream_schemas(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_schemas")

    @stream_schemas.setter
    def stream_schemas(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_schemas", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SourceE2eTestCloudConfigurationMockCatalogSourceE2eTestCloudUpdateMockCatalogSingleSchemaArgs:
    def __init__(__self__, *,
                 stream_name: pulumi.Input[str],
                 stream_schema: pulumi.Input[str],
                 type: pulumi.Input[str],
                 stream_duplication: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "stream_name", stream_name)
        pulumi.set(__self__, "stream_schema", stream_schema)
        pulumi.set(__self__, "type", type)
        if stream_duplication is not None:
            pulumi.set(__self__, "stream_duplication", stream_duplication)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_name", value)

    @property
    @pulumi.getter(name="streamSchema")
    def stream_schema(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_schema")

    @stream_schema.setter
    def stream_schema(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_schema", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="streamDuplication")
    def stream_duplication(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "stream_duplication")

    @stream_duplication.setter
    def stream_duplication(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "stream_duplication", value)


@pulumi.input_type
class SourceEmailoctopusConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceExchangeRatesConfigurationArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 base: Optional[pulumi.Input[str]] = None,
                 ignore_weekends: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if base is not None:
            pulumi.set(__self__, "base", base)
        if ignore_weekends is not None:
            pulumi.set(__self__, "ignore_weekends", ignore_weekends)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def base(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base", value)

    @property
    @pulumi.getter(name="ignoreWeekends")
    def ignore_weekends(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_weekends")

    @ignore_weekends.setter
    def ignore_weekends(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_weekends", value)


@pulumi.input_type
class SourceFacebookMarketingConfigurationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 account_id: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 action_breakdowns_allow_empty: Optional[pulumi.Input[bool]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 custom_insights: Optional[pulumi.Input[Sequence[pulumi.Input['SourceFacebookMarketingConfigurationCustomInsightArgs']]]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 fetch_thumbnail_images: Optional[pulumi.Input[bool]] = None,
                 include_deleted: Optional[pulumi.Input[bool]] = None,
                 insights_lookback_window: Optional[pulumi.Input[int]] = None,
                 max_batch_size: Optional[pulumi.Input[int]] = None,
                 page_size: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if action_breakdowns_allow_empty is not None:
            pulumi.set(__self__, "action_breakdowns_allow_empty", action_breakdowns_allow_empty)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if custom_insights is not None:
            pulumi.set(__self__, "custom_insights", custom_insights)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if fetch_thumbnail_images is not None:
            pulumi.set(__self__, "fetch_thumbnail_images", fetch_thumbnail_images)
        if include_deleted is not None:
            pulumi.set(__self__, "include_deleted", include_deleted)
        if insights_lookback_window is not None:
            pulumi.set(__self__, "insights_lookback_window", insights_lookback_window)
        if max_batch_size is not None:
            pulumi.set(__self__, "max_batch_size", max_batch_size)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="actionBreakdownsAllowEmpty")
    def action_breakdowns_allow_empty(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "action_breakdowns_allow_empty")

    @action_breakdowns_allow_empty.setter
    def action_breakdowns_allow_empty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "action_breakdowns_allow_empty", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="customInsights")
    def custom_insights(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceFacebookMarketingConfigurationCustomInsightArgs']]]]:
        return pulumi.get(self, "custom_insights")

    @custom_insights.setter
    def custom_insights(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceFacebookMarketingConfigurationCustomInsightArgs']]]]):
        pulumi.set(self, "custom_insights", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="fetchThumbnailImages")
    def fetch_thumbnail_images(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "fetch_thumbnail_images")

    @fetch_thumbnail_images.setter
    def fetch_thumbnail_images(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fetch_thumbnail_images", value)

    @property
    @pulumi.getter(name="includeDeleted")
    def include_deleted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_deleted")

    @include_deleted.setter
    def include_deleted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_deleted", value)

    @property
    @pulumi.getter(name="insightsLookbackWindow")
    def insights_lookback_window(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "insights_lookback_window")

    @insights_lookback_window.setter
    def insights_lookback_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "insights_lookback_window", value)

    @property
    @pulumi.getter(name="maxBatchSize")
    def max_batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_batch_size")

    @max_batch_size.setter
    def max_batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_batch_size", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_size", value)


@pulumi.input_type
class SourceFacebookMarketingConfigurationCustomInsightArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 action_breakdowns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 action_report_time: Optional[pulumi.Input[str]] = None,
                 breakdowns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 insights_lookback_window: Optional[pulumi.Input[int]] = None,
                 level: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 time_increment: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "name", name)
        if action_breakdowns is not None:
            pulumi.set(__self__, "action_breakdowns", action_breakdowns)
        if action_report_time is not None:
            pulumi.set(__self__, "action_report_time", action_report_time)
        if breakdowns is not None:
            pulumi.set(__self__, "breakdowns", breakdowns)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if insights_lookback_window is not None:
            pulumi.set(__self__, "insights_lookback_window", insights_lookback_window)
        if level is not None:
            pulumi.set(__self__, "level", level)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if time_increment is not None:
            pulumi.set(__self__, "time_increment", time_increment)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="actionBreakdowns")
    def action_breakdowns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "action_breakdowns")

    @action_breakdowns.setter
    def action_breakdowns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "action_breakdowns", value)

    @property
    @pulumi.getter(name="actionReportTime")
    def action_report_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "action_report_time")

    @action_report_time.setter
    def action_report_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action_report_time", value)

    @property
    @pulumi.getter
    def breakdowns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "breakdowns")

    @breakdowns.setter
    def breakdowns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "breakdowns", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter
    def fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "fields")

    @fields.setter
    def fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "fields", value)

    @property
    @pulumi.getter(name="insightsLookbackWindow")
    def insights_lookback_window(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "insights_lookback_window")

    @insights_lookback_window.setter
    def insights_lookback_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "insights_lookback_window", value)

    @property
    @pulumi.getter
    def level(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "level")

    @level.setter
    def level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "level", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="timeIncrement")
    def time_increment(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "time_increment")

    @time_increment.setter
    def time_increment(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "time_increment", value)


@pulumi.input_type
class SourceFacebookPagesConfigurationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 page_id: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "page_id", page_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="pageId")
    def page_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "page_id")

    @page_id.setter
    def page_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "page_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceFakerConfigurationArgs:
    def __init__(__self__, *,
                 count: pulumi.Input[int],
                 source_type: pulumi.Input[str],
                 always_updated: Optional[pulumi.Input[bool]] = None,
                 parallelism: Optional[pulumi.Input[int]] = None,
                 records_per_slice: Optional[pulumi.Input[int]] = None,
                 seed: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "count", count)
        pulumi.set(__self__, "source_type", source_type)
        if always_updated is not None:
            pulumi.set(__self__, "always_updated", always_updated)
        if parallelism is not None:
            pulumi.set(__self__, "parallelism", parallelism)
        if records_per_slice is not None:
            pulumi.set(__self__, "records_per_slice", records_per_slice)
        if seed is not None:
            pulumi.set(__self__, "seed", seed)

    @property
    @pulumi.getter
    def count(self) -> pulumi.Input[int]:
        return pulumi.get(self, "count")

    @count.setter
    def count(self, value: pulumi.Input[int]):
        pulumi.set(self, "count", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="alwaysUpdated")
    def always_updated(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "always_updated")

    @always_updated.setter
    def always_updated(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "always_updated", value)

    @property
    @pulumi.getter
    def parallelism(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "parallelism")

    @parallelism.setter
    def parallelism(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "parallelism", value)

    @property
    @pulumi.getter(name="recordsPerSlice")
    def records_per_slice(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "records_per_slice")

    @records_per_slice.setter
    def records_per_slice(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "records_per_slice", value)

    @property
    @pulumi.getter
    def seed(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "seed")

    @seed.setter
    def seed(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "seed", value)


@pulumi.input_type
class SourceFaunaConfigurationArgs:
    def __init__(__self__, *,
                 domain: pulumi.Input[str],
                 port: pulumi.Input[int],
                 scheme: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 collection: Optional[pulumi.Input['SourceFaunaConfigurationCollectionArgs']] = None):
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "scheme", scheme)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "source_type", source_type)
        if collection is not None:
            pulumi.set(__self__, "collection", collection)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def scheme(self) -> pulumi.Input[str]:
        return pulumi.get(self, "scheme")

    @scheme.setter
    def scheme(self, value: pulumi.Input[str]):
        pulumi.set(self, "scheme", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def collection(self) -> Optional[pulumi.Input['SourceFaunaConfigurationCollectionArgs']]:
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: Optional[pulumi.Input['SourceFaunaConfigurationCollectionArgs']]):
        pulumi.set(self, "collection", value)


@pulumi.input_type
class SourceFaunaConfigurationCollectionArgs:
    def __init__(__self__, *,
                 deletions: pulumi.Input['SourceFaunaConfigurationCollectionDeletionsArgs'],
                 page_size: pulumi.Input[int]):
        pulumi.set(__self__, "deletions", deletions)
        pulumi.set(__self__, "page_size", page_size)

    @property
    @pulumi.getter
    def deletions(self) -> pulumi.Input['SourceFaunaConfigurationCollectionDeletionsArgs']:
        return pulumi.get(self, "deletions")

    @deletions.setter
    def deletions(self, value: pulumi.Input['SourceFaunaConfigurationCollectionDeletionsArgs']):
        pulumi.set(self, "deletions", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> pulumi.Input[int]:
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: pulumi.Input[int]):
        pulumi.set(self, "page_size", value)


@pulumi.input_type
class SourceFaunaConfigurationCollectionDeletionsArgs:
    def __init__(__self__, *,
                 source_fauna_collection_deletion_mode_disabled: Optional[pulumi.Input['SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabledArgs']] = None,
                 source_fauna_collection_deletion_mode_enabled: Optional[pulumi.Input['SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabledArgs']] = None,
                 source_fauna_update_collection_deletion_mode_disabled: Optional[pulumi.Input['SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabledArgs']] = None,
                 source_fauna_update_collection_deletion_mode_enabled: Optional[pulumi.Input['SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabledArgs']] = None):
        if source_fauna_collection_deletion_mode_disabled is not None:
            pulumi.set(__self__, "source_fauna_collection_deletion_mode_disabled", source_fauna_collection_deletion_mode_disabled)
        if source_fauna_collection_deletion_mode_enabled is not None:
            pulumi.set(__self__, "source_fauna_collection_deletion_mode_enabled", source_fauna_collection_deletion_mode_enabled)
        if source_fauna_update_collection_deletion_mode_disabled is not None:
            pulumi.set(__self__, "source_fauna_update_collection_deletion_mode_disabled", source_fauna_update_collection_deletion_mode_disabled)
        if source_fauna_update_collection_deletion_mode_enabled is not None:
            pulumi.set(__self__, "source_fauna_update_collection_deletion_mode_enabled", source_fauna_update_collection_deletion_mode_enabled)

    @property
    @pulumi.getter(name="sourceFaunaCollectionDeletionModeDisabled")
    def source_fauna_collection_deletion_mode_disabled(self) -> Optional[pulumi.Input['SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabledArgs']]:
        return pulumi.get(self, "source_fauna_collection_deletion_mode_disabled")

    @source_fauna_collection_deletion_mode_disabled.setter
    def source_fauna_collection_deletion_mode_disabled(self, value: Optional[pulumi.Input['SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabledArgs']]):
        pulumi.set(self, "source_fauna_collection_deletion_mode_disabled", value)

    @property
    @pulumi.getter(name="sourceFaunaCollectionDeletionModeEnabled")
    def source_fauna_collection_deletion_mode_enabled(self) -> Optional[pulumi.Input['SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabledArgs']]:
        return pulumi.get(self, "source_fauna_collection_deletion_mode_enabled")

    @source_fauna_collection_deletion_mode_enabled.setter
    def source_fauna_collection_deletion_mode_enabled(self, value: Optional[pulumi.Input['SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabledArgs']]):
        pulumi.set(self, "source_fauna_collection_deletion_mode_enabled", value)

    @property
    @pulumi.getter(name="sourceFaunaUpdateCollectionDeletionModeDisabled")
    def source_fauna_update_collection_deletion_mode_disabled(self) -> Optional[pulumi.Input['SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabledArgs']]:
        return pulumi.get(self, "source_fauna_update_collection_deletion_mode_disabled")

    @source_fauna_update_collection_deletion_mode_disabled.setter
    def source_fauna_update_collection_deletion_mode_disabled(self, value: Optional[pulumi.Input['SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabledArgs']]):
        pulumi.set(self, "source_fauna_update_collection_deletion_mode_disabled", value)

    @property
    @pulumi.getter(name="sourceFaunaUpdateCollectionDeletionModeEnabled")
    def source_fauna_update_collection_deletion_mode_enabled(self) -> Optional[pulumi.Input['SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabledArgs']]:
        return pulumi.get(self, "source_fauna_update_collection_deletion_mode_enabled")

    @source_fauna_update_collection_deletion_mode_enabled.setter
    def source_fauna_update_collection_deletion_mode_enabled(self, value: Optional[pulumi.Input['SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabledArgs']]):
        pulumi.set(self, "source_fauna_update_collection_deletion_mode_enabled", value)


@pulumi.input_type
class SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeDisabledArgs:
    def __init__(__self__, *,
                 deletion_mode: pulumi.Input[str]):
        pulumi.set(__self__, "deletion_mode", deletion_mode)

    @property
    @pulumi.getter(name="deletionMode")
    def deletion_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deletion_mode")

    @deletion_mode.setter
    def deletion_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "deletion_mode", value)


@pulumi.input_type
class SourceFaunaConfigurationCollectionDeletionsSourceFaunaCollectionDeletionModeEnabledArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[str],
                 deletion_mode: pulumi.Input[str]):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "deletion_mode", deletion_mode)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[str]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="deletionMode")
    def deletion_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deletion_mode")

    @deletion_mode.setter
    def deletion_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "deletion_mode", value)


@pulumi.input_type
class SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeDisabledArgs:
    def __init__(__self__, *,
                 deletion_mode: pulumi.Input[str]):
        pulumi.set(__self__, "deletion_mode", deletion_mode)

    @property
    @pulumi.getter(name="deletionMode")
    def deletion_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deletion_mode")

    @deletion_mode.setter
    def deletion_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "deletion_mode", value)


@pulumi.input_type
class SourceFaunaConfigurationCollectionDeletionsSourceFaunaUpdateCollectionDeletionModeEnabledArgs:
    def __init__(__self__, *,
                 column: pulumi.Input[str],
                 deletion_mode: pulumi.Input[str]):
        pulumi.set(__self__, "column", column)
        pulumi.set(__self__, "deletion_mode", deletion_mode)

    @property
    @pulumi.getter
    def column(self) -> pulumi.Input[str]:
        return pulumi.get(self, "column")

    @column.setter
    def column(self, value: pulumi.Input[str]):
        pulumi.set(self, "column", value)

    @property
    @pulumi.getter(name="deletionMode")
    def deletion_mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "deletion_mode")

    @deletion_mode.setter
    def deletion_mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "deletion_mode", value)


@pulumi.input_type
class SourceFileSecureConfigurationArgs:
    def __init__(__self__, *,
                 dataset_name: pulumi.Input[str],
                 format: pulumi.Input[str],
                 provider: pulumi.Input['SourceFileSecureConfigurationProviderArgs'],
                 source_type: pulumi.Input[str],
                 url: pulumi.Input[str],
                 reader_options: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "dataset_name", dataset_name)
        pulumi.set(__self__, "format", format)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "url", url)
        if reader_options is not None:
            pulumi.set(__self__, "reader_options", reader_options)

    @property
    @pulumi.getter(name="datasetName")
    def dataset_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dataset_name")

    @dataset_name.setter
    def dataset_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset_name", value)

    @property
    @pulumi.getter
    def format(self) -> pulumi.Input[str]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: pulumi.Input[str]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def provider(self) -> pulumi.Input['SourceFileSecureConfigurationProviderArgs']:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: pulumi.Input['SourceFileSecureConfigurationProviderArgs']):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="readerOptions")
    def reader_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "reader_options")

    @reader_options.setter
    def reader_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reader_options", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderArgs:
    def __init__(__self__, *,
                 source_file_secure_storage_provider_az_blob_azure_blob_storage: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorageArgs']] = None,
                 source_file_secure_storage_provider_gcs_google_cloud_storage: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorageArgs']] = None,
                 source_file_secure_storage_provider_https_public_web: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWebArgs']] = None,
                 source_file_secure_storage_provider_s3_amazon_web_services: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServicesArgs']] = None,
                 source_file_secure_storage_provider_scp_secure_copy_protocol: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocolArgs']] = None,
                 source_file_secure_storage_provider_sftp_secure_file_transfer_protocol: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocolArgs']] = None,
                 source_file_secure_storage_provider_ssh_secure_shell: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShellArgs']] = None,
                 source_file_secure_update_storage_provider_az_blob_azure_blob_storage: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorageArgs']] = None,
                 source_file_secure_update_storage_provider_gcs_google_cloud_storage: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorageArgs']] = None,
                 source_file_secure_update_storage_provider_https_public_web: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWebArgs']] = None,
                 source_file_secure_update_storage_provider_s3_amazon_web_services: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServicesArgs']] = None,
                 source_file_secure_update_storage_provider_scp_secure_copy_protocol: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocolArgs']] = None,
                 source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocolArgs']] = None,
                 source_file_secure_update_storage_provider_ssh_secure_shell: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShellArgs']] = None):
        if source_file_secure_storage_provider_az_blob_azure_blob_storage is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_az_blob_azure_blob_storage", source_file_secure_storage_provider_az_blob_azure_blob_storage)
        if source_file_secure_storage_provider_gcs_google_cloud_storage is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_gcs_google_cloud_storage", source_file_secure_storage_provider_gcs_google_cloud_storage)
        if source_file_secure_storage_provider_https_public_web is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_https_public_web", source_file_secure_storage_provider_https_public_web)
        if source_file_secure_storage_provider_s3_amazon_web_services is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_s3_amazon_web_services", source_file_secure_storage_provider_s3_amazon_web_services)
        if source_file_secure_storage_provider_scp_secure_copy_protocol is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_scp_secure_copy_protocol", source_file_secure_storage_provider_scp_secure_copy_protocol)
        if source_file_secure_storage_provider_sftp_secure_file_transfer_protocol is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_sftp_secure_file_transfer_protocol", source_file_secure_storage_provider_sftp_secure_file_transfer_protocol)
        if source_file_secure_storage_provider_ssh_secure_shell is not None:
            pulumi.set(__self__, "source_file_secure_storage_provider_ssh_secure_shell", source_file_secure_storage_provider_ssh_secure_shell)
        if source_file_secure_update_storage_provider_az_blob_azure_blob_storage is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_az_blob_azure_blob_storage", source_file_secure_update_storage_provider_az_blob_azure_blob_storage)
        if source_file_secure_update_storage_provider_gcs_google_cloud_storage is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_gcs_google_cloud_storage", source_file_secure_update_storage_provider_gcs_google_cloud_storage)
        if source_file_secure_update_storage_provider_https_public_web is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_https_public_web", source_file_secure_update_storage_provider_https_public_web)
        if source_file_secure_update_storage_provider_s3_amazon_web_services is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_s3_amazon_web_services", source_file_secure_update_storage_provider_s3_amazon_web_services)
        if source_file_secure_update_storage_provider_scp_secure_copy_protocol is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_scp_secure_copy_protocol", source_file_secure_update_storage_provider_scp_secure_copy_protocol)
        if source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol", source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol)
        if source_file_secure_update_storage_provider_ssh_secure_shell is not None:
            pulumi.set(__self__, "source_file_secure_update_storage_provider_ssh_secure_shell", source_file_secure_update_storage_provider_ssh_secure_shell)

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderAzBlobAzureBlobStorage")
    def source_file_secure_storage_provider_az_blob_azure_blob_storage(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorageArgs']]:
        return pulumi.get(self, "source_file_secure_storage_provider_az_blob_azure_blob_storage")

    @source_file_secure_storage_provider_az_blob_azure_blob_storage.setter
    def source_file_secure_storage_provider_az_blob_azure_blob_storage(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorageArgs']]):
        pulumi.set(self, "source_file_secure_storage_provider_az_blob_azure_blob_storage", value)

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderGcsGoogleCloudStorage")
    def source_file_secure_storage_provider_gcs_google_cloud_storage(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorageArgs']]:
        return pulumi.get(self, "source_file_secure_storage_provider_gcs_google_cloud_storage")

    @source_file_secure_storage_provider_gcs_google_cloud_storage.setter
    def source_file_secure_storage_provider_gcs_google_cloud_storage(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorageArgs']]):
        pulumi.set(self, "source_file_secure_storage_provider_gcs_google_cloud_storage", value)

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderHttpsPublicWeb")
    def source_file_secure_storage_provider_https_public_web(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWebArgs']]:
        return pulumi.get(self, "source_file_secure_storage_provider_https_public_web")

    @source_file_secure_storage_provider_https_public_web.setter
    def source_file_secure_storage_provider_https_public_web(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWebArgs']]):
        pulumi.set(self, "source_file_secure_storage_provider_https_public_web", value)

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderS3AmazonWebServices")
    def source_file_secure_storage_provider_s3_amazon_web_services(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServicesArgs']]:
        return pulumi.get(self, "source_file_secure_storage_provider_s3_amazon_web_services")

    @source_file_secure_storage_provider_s3_amazon_web_services.setter
    def source_file_secure_storage_provider_s3_amazon_web_services(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServicesArgs']]):
        pulumi.set(self, "source_file_secure_storage_provider_s3_amazon_web_services", value)

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderScpSecureCopyProtocol")
    def source_file_secure_storage_provider_scp_secure_copy_protocol(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocolArgs']]:
        return pulumi.get(self, "source_file_secure_storage_provider_scp_secure_copy_protocol")

    @source_file_secure_storage_provider_scp_secure_copy_protocol.setter
    def source_file_secure_storage_provider_scp_secure_copy_protocol(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocolArgs']]):
        pulumi.set(self, "source_file_secure_storage_provider_scp_secure_copy_protocol", value)

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderSftpSecureFileTransferProtocol")
    def source_file_secure_storage_provider_sftp_secure_file_transfer_protocol(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocolArgs']]:
        return pulumi.get(self, "source_file_secure_storage_provider_sftp_secure_file_transfer_protocol")

    @source_file_secure_storage_provider_sftp_secure_file_transfer_protocol.setter
    def source_file_secure_storage_provider_sftp_secure_file_transfer_protocol(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocolArgs']]):
        pulumi.set(self, "source_file_secure_storage_provider_sftp_secure_file_transfer_protocol", value)

    @property
    @pulumi.getter(name="sourceFileSecureStorageProviderSshSecureShell")
    def source_file_secure_storage_provider_ssh_secure_shell(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShellArgs']]:
        return pulumi.get(self, "source_file_secure_storage_provider_ssh_secure_shell")

    @source_file_secure_storage_provider_ssh_secure_shell.setter
    def source_file_secure_storage_provider_ssh_secure_shell(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShellArgs']]):
        pulumi.set(self, "source_file_secure_storage_provider_ssh_secure_shell", value)

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorage")
    def source_file_secure_update_storage_provider_az_blob_azure_blob_storage(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorageArgs']]:
        return pulumi.get(self, "source_file_secure_update_storage_provider_az_blob_azure_blob_storage")

    @source_file_secure_update_storage_provider_az_blob_azure_blob_storage.setter
    def source_file_secure_update_storage_provider_az_blob_azure_blob_storage(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorageArgs']]):
        pulumi.set(self, "source_file_secure_update_storage_provider_az_blob_azure_blob_storage", value)

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderGcsGoogleCloudStorage")
    def source_file_secure_update_storage_provider_gcs_google_cloud_storage(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorageArgs']]:
        return pulumi.get(self, "source_file_secure_update_storage_provider_gcs_google_cloud_storage")

    @source_file_secure_update_storage_provider_gcs_google_cloud_storage.setter
    def source_file_secure_update_storage_provider_gcs_google_cloud_storage(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorageArgs']]):
        pulumi.set(self, "source_file_secure_update_storage_provider_gcs_google_cloud_storage", value)

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderHttpsPublicWeb")
    def source_file_secure_update_storage_provider_https_public_web(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWebArgs']]:
        return pulumi.get(self, "source_file_secure_update_storage_provider_https_public_web")

    @source_file_secure_update_storage_provider_https_public_web.setter
    def source_file_secure_update_storage_provider_https_public_web(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWebArgs']]):
        pulumi.set(self, "source_file_secure_update_storage_provider_https_public_web", value)

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderS3AmazonWebServices")
    def source_file_secure_update_storage_provider_s3_amazon_web_services(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServicesArgs']]:
        return pulumi.get(self, "source_file_secure_update_storage_provider_s3_amazon_web_services")

    @source_file_secure_update_storage_provider_s3_amazon_web_services.setter
    def source_file_secure_update_storage_provider_s3_amazon_web_services(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServicesArgs']]):
        pulumi.set(self, "source_file_secure_update_storage_provider_s3_amazon_web_services", value)

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderScpSecureCopyProtocol")
    def source_file_secure_update_storage_provider_scp_secure_copy_protocol(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocolArgs']]:
        return pulumi.get(self, "source_file_secure_update_storage_provider_scp_secure_copy_protocol")

    @source_file_secure_update_storage_provider_scp_secure_copy_protocol.setter
    def source_file_secure_update_storage_provider_scp_secure_copy_protocol(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocolArgs']]):
        pulumi.set(self, "source_file_secure_update_storage_provider_scp_secure_copy_protocol", value)

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocol")
    def source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocolArgs']]:
        return pulumi.get(self, "source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol")

    @source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol.setter
    def source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocolArgs']]):
        pulumi.set(self, "source_file_secure_update_storage_provider_sftp_secure_file_transfer_protocol", value)

    @property
    @pulumi.getter(name="sourceFileSecureUpdateStorageProviderSshSecureShell")
    def source_file_secure_update_storage_provider_ssh_secure_shell(self) -> Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShellArgs']]:
        return pulumi.get(self, "source_file_secure_update_storage_provider_ssh_secure_shell")

    @source_file_secure_update_storage_provider_ssh_secure_shell.setter
    def source_file_secure_update_storage_provider_ssh_secure_shell(self, value: Optional[pulumi.Input['SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShellArgs']]):
        pulumi.set(self, "source_file_secure_update_storage_provider_ssh_secure_shell", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderAzBlobAzureBlobStorageArgs:
    def __init__(__self__, *,
                 storage: pulumi.Input[str],
                 storage_account: pulumi.Input[str],
                 sas_token: Optional[pulumi.Input[str]] = None,
                 shared_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "storage_account", storage_account)
        if sas_token is not None:
            pulumi.set(__self__, "sas_token", sas_token)
        if shared_key is not None:
            pulumi.set(__self__, "shared_key", shared_key)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_account")

    @storage_account.setter
    def storage_account(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account", value)

    @property
    @pulumi.getter(name="sasToken")
    def sas_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sas_token")

    @sas_token.setter
    def sas_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sas_token", value)

    @property
    @pulumi.getter(name="sharedKey")
    def shared_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_key")

    @shared_key.setter
    def shared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_key", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderGcsGoogleCloudStorageArgs:
    def __init__(__self__, *,
                 storage: pulumi.Input[str],
                 service_account_json: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "storage", storage)
        if service_account_json is not None:
            pulumi.set(__self__, "service_account_json", service_account_json)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="serviceAccountJson")
    def service_account_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_json")

    @service_account_json.setter
    def service_account_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_json", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderHttpsPublicWebArgs:
    def __init__(__self__, *,
                 storage: pulumi.Input[str],
                 user_agent: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "storage", storage)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_agent", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderS3AmazonWebServicesArgs:
    def __init__(__self__, *,
                 storage: pulumi.Input[str],
                 aws_access_key_id: Optional[pulumi.Input[str]] = None,
                 aws_secret_access_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "storage", storage)
        if aws_access_key_id is not None:
            pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_secret_access_key is not None:
            pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_access_key_id", value)

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_secret_access_key", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderScpSecureCopyProtocolArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 storage: pulumi.Input[str],
                 user: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSftpSecureFileTransferProtocolArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 storage: pulumi.Input[str],
                 user: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureStorageProviderSshSecureShellArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 storage: pulumi.Input[str],
                 user: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderAzBlobAzureBlobStorageArgs:
    def __init__(__self__, *,
                 storage: pulumi.Input[str],
                 storage_account: pulumi.Input[str],
                 sas_token: Optional[pulumi.Input[str]] = None,
                 shared_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "storage_account", storage_account)
        if sas_token is not None:
            pulumi.set(__self__, "sas_token", sas_token)
        if shared_key is not None:
            pulumi.set(__self__, "shared_key", shared_key)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="storageAccount")
    def storage_account(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage_account")

    @storage_account.setter
    def storage_account(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage_account", value)

    @property
    @pulumi.getter(name="sasToken")
    def sas_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sas_token")

    @sas_token.setter
    def sas_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sas_token", value)

    @property
    @pulumi.getter(name="sharedKey")
    def shared_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shared_key")

    @shared_key.setter
    def shared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shared_key", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderGcsGoogleCloudStorageArgs:
    def __init__(__self__, *,
                 storage: pulumi.Input[str],
                 service_account_json: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "storage", storage)
        if service_account_json is not None:
            pulumi.set(__self__, "service_account_json", service_account_json)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="serviceAccountJson")
    def service_account_json(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "service_account_json")

    @service_account_json.setter
    def service_account_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_json", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderHttpsPublicWebArgs:
    def __init__(__self__, *,
                 storage: pulumi.Input[str],
                 user_agent: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "storage", storage)
        if user_agent is not None:
            pulumi.set(__self__, "user_agent", user_agent)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="userAgent")
    def user_agent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "user_agent")

    @user_agent.setter
    def user_agent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "user_agent", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderS3AmazonWebServicesArgs:
    def __init__(__self__, *,
                 storage: pulumi.Input[str],
                 aws_access_key_id: Optional[pulumi.Input[str]] = None,
                 aws_secret_access_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "storage", storage)
        if aws_access_key_id is not None:
            pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_secret_access_key is not None:
            pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_access_key_id", value)

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_secret_access_key", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderScpSecureCopyProtocolArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 storage: pulumi.Input[str],
                 user: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSftpSecureFileTransferProtocolArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 storage: pulumi.Input[str],
                 user: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class SourceFileSecureConfigurationProviderSourceFileSecureUpdateStorageProviderSshSecureShellArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 storage: pulumi.Input[str],
                 user: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 port: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "storage", storage)
        pulumi.set(__self__, "user", user)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if port is not None:
            pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Input[str]:
        return pulumi.get(self, "storage")

    @storage.setter
    def storage(self, value: pulumi.Input[str]):
        pulumi.set(self, "storage", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class SourceFireboltConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 password: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 username: pulumi.Input[str],
                 account: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if account is not None:
            pulumi.set(__self__, "account", account)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if host is not None:
            pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def account(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account")

    @account.setter
    def account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class SourceFreshcallerConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 domain: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 requests_per_minute: Optional[pulumi.Input[int]] = None,
                 sync_lag_minutes: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if requests_per_minute is not None:
            pulumi.set(__self__, "requests_per_minute", requests_per_minute)
        if sync_lag_minutes is not None:
            pulumi.set(__self__, "sync_lag_minutes", sync_lag_minutes)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "requests_per_minute")

    @requests_per_minute.setter
    def requests_per_minute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "requests_per_minute", value)

    @property
    @pulumi.getter(name="syncLagMinutes")
    def sync_lag_minutes(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "sync_lag_minutes")

    @sync_lag_minutes.setter
    def sync_lag_minutes(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "sync_lag_minutes", value)


@pulumi.input_type
class SourceFreshdeskConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 domain: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 requests_per_minute: Optional[pulumi.Input[int]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "source_type", source_type)
        if requests_per_minute is not None:
            pulumi.set(__self__, "requests_per_minute", requests_per_minute)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="requestsPerMinute")
    def requests_per_minute(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "requests_per_minute")

    @requests_per_minute.setter
    def requests_per_minute(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "requests_per_minute", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceFreshsalesConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 domain_name: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain_name")

    @domain_name.setter
    def domain_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceGainsightPxConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceGcsConfigurationArgs:
    def __init__(__self__, *,
                 gcs_bucket: pulumi.Input[str],
                 gcs_path: pulumi.Input[str],
                 service_account: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "gcs_bucket", gcs_bucket)
        pulumi.set(__self__, "gcs_path", gcs_path)
        pulumi.set(__self__, "service_account", service_account)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="gcsBucket")
    def gcs_bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gcs_bucket")

    @gcs_bucket.setter
    def gcs_bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcs_bucket", value)

    @property
    @pulumi.getter(name="gcsPath")
    def gcs_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "gcs_path")

    @gcs_path.setter
    def gcs_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "gcs_path", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceGetlagoConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceGithubConfigurationArgs:
    def __init__(__self__, *,
                 repository: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 branch: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input['SourceGithubConfigurationCredentialsArgs']] = None,
                 requests_per_hour: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if branch is not None:
            pulumi.set(__self__, "branch", branch)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if requests_per_hour is not None:
            pulumi.set(__self__, "requests_per_hour", requests_per_hour)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[str]:
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[str]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def branch(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceGithubConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceGithubConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="requestsPerHour")
    def requests_per_hour(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "requests_per_hour")

    @requests_per_hour.setter
    def requests_per_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "requests_per_hour", value)


@pulumi.input_type
class SourceGithubConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_github_authentication_o_auth: Optional[pulumi.Input['SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuthArgs']] = None,
                 source_github_authentication_personal_access_token: Optional[pulumi.Input['SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessTokenArgs']] = None,
                 source_github_update_authentication_o_auth: Optional[pulumi.Input['SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuthArgs']] = None,
                 source_github_update_authentication_personal_access_token: Optional[pulumi.Input['SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessTokenArgs']] = None):
        if source_github_authentication_o_auth is not None:
            pulumi.set(__self__, "source_github_authentication_o_auth", source_github_authentication_o_auth)
        if source_github_authentication_personal_access_token is not None:
            pulumi.set(__self__, "source_github_authentication_personal_access_token", source_github_authentication_personal_access_token)
        if source_github_update_authentication_o_auth is not None:
            pulumi.set(__self__, "source_github_update_authentication_o_auth", source_github_update_authentication_o_auth)
        if source_github_update_authentication_personal_access_token is not None:
            pulumi.set(__self__, "source_github_update_authentication_personal_access_token", source_github_update_authentication_personal_access_token)

    @property
    @pulumi.getter(name="sourceGithubAuthenticationOAuth")
    def source_github_authentication_o_auth(self) -> Optional[pulumi.Input['SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuthArgs']]:
        return pulumi.get(self, "source_github_authentication_o_auth")

    @source_github_authentication_o_auth.setter
    def source_github_authentication_o_auth(self, value: Optional[pulumi.Input['SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuthArgs']]):
        pulumi.set(self, "source_github_authentication_o_auth", value)

    @property
    @pulumi.getter(name="sourceGithubAuthenticationPersonalAccessToken")
    def source_github_authentication_personal_access_token(self) -> Optional[pulumi.Input['SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessTokenArgs']]:
        return pulumi.get(self, "source_github_authentication_personal_access_token")

    @source_github_authentication_personal_access_token.setter
    def source_github_authentication_personal_access_token(self, value: Optional[pulumi.Input['SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessTokenArgs']]):
        pulumi.set(self, "source_github_authentication_personal_access_token", value)

    @property
    @pulumi.getter(name="sourceGithubUpdateAuthenticationOAuth")
    def source_github_update_authentication_o_auth(self) -> Optional[pulumi.Input['SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuthArgs']]:
        return pulumi.get(self, "source_github_update_authentication_o_auth")

    @source_github_update_authentication_o_auth.setter
    def source_github_update_authentication_o_auth(self, value: Optional[pulumi.Input['SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuthArgs']]):
        pulumi.set(self, "source_github_update_authentication_o_auth", value)

    @property
    @pulumi.getter(name="sourceGithubUpdateAuthenticationPersonalAccessToken")
    def source_github_update_authentication_personal_access_token(self) -> Optional[pulumi.Input['SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessTokenArgs']]:
        return pulumi.get(self, "source_github_update_authentication_personal_access_token")

    @source_github_update_authentication_personal_access_token.setter
    def source_github_update_authentication_personal_access_token(self, value: Optional[pulumi.Input['SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessTokenArgs']]):
        pulumi.set(self, "source_github_update_authentication_personal_access_token", value)


@pulumi.input_type
class SourceGithubConfigurationCredentialsSourceGithubAuthenticationOAuthArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceGithubConfigurationCredentialsSourceGithubAuthenticationPersonalAccessTokenArgs:
    def __init__(__self__, *,
                 personal_access_token: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "personal_access_token", personal_access_token)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="personalAccessToken")
    def personal_access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "personal_access_token")

    @personal_access_token.setter
    def personal_access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "personal_access_token", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationOAuthArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceGithubConfigurationCredentialsSourceGithubUpdateAuthenticationPersonalAccessTokenArgs:
    def __init__(__self__, *,
                 personal_access_token: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "personal_access_token", personal_access_token)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="personalAccessToken")
    def personal_access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "personal_access_token")

    @personal_access_token.setter
    def personal_access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "personal_access_token", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceGitlabConfigurationArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['SourceGitlabConfigurationCredentialsArgs'],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 api_url: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[str]] = None,
                 projects: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if api_url is not None:
            pulumi.set(__self__, "api_url", api_url)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['SourceGitlabConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['SourceGitlabConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="apiUrl")
    def api_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_url")

    @api_url.setter
    def api_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def projects(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "projects")

    @projects.setter
    def projects(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "projects", value)


@pulumi.input_type
class SourceGitlabConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_gitlab_authorization_method_o_auth20: Optional[pulumi.Input['SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20Args']] = None,
                 source_gitlab_authorization_method_private_token: Optional[pulumi.Input['SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateTokenArgs']] = None,
                 source_gitlab_update_authorization_method_o_auth20: Optional[pulumi.Input['SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20Args']] = None,
                 source_gitlab_update_authorization_method_private_token: Optional[pulumi.Input['SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateTokenArgs']] = None):
        if source_gitlab_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_gitlab_authorization_method_o_auth20", source_gitlab_authorization_method_o_auth20)
        if source_gitlab_authorization_method_private_token is not None:
            pulumi.set(__self__, "source_gitlab_authorization_method_private_token", source_gitlab_authorization_method_private_token)
        if source_gitlab_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_gitlab_update_authorization_method_o_auth20", source_gitlab_update_authorization_method_o_auth20)
        if source_gitlab_update_authorization_method_private_token is not None:
            pulumi.set(__self__, "source_gitlab_update_authorization_method_private_token", source_gitlab_update_authorization_method_private_token)

    @property
    @pulumi.getter(name="sourceGitlabAuthorizationMethodOAuth20")
    def source_gitlab_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_gitlab_authorization_method_o_auth20")

    @source_gitlab_authorization_method_o_auth20.setter
    def source_gitlab_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_gitlab_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceGitlabAuthorizationMethodPrivateToken")
    def source_gitlab_authorization_method_private_token(self) -> Optional[pulumi.Input['SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateTokenArgs']]:
        return pulumi.get(self, "source_gitlab_authorization_method_private_token")

    @source_gitlab_authorization_method_private_token.setter
    def source_gitlab_authorization_method_private_token(self, value: Optional[pulumi.Input['SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateTokenArgs']]):
        pulumi.set(self, "source_gitlab_authorization_method_private_token", value)

    @property
    @pulumi.getter(name="sourceGitlabUpdateAuthorizationMethodOAuth20")
    def source_gitlab_update_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_gitlab_update_authorization_method_o_auth20")

    @source_gitlab_update_authorization_method_o_auth20.setter
    def source_gitlab_update_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_gitlab_update_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceGitlabUpdateAuthorizationMethodPrivateToken")
    def source_gitlab_update_authorization_method_private_token(self) -> Optional[pulumi.Input['SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateTokenArgs']]:
        return pulumi.get(self, "source_gitlab_update_authorization_method_private_token")

    @source_gitlab_update_authorization_method_private_token.setter
    def source_gitlab_update_authorization_method_private_token(self, value: Optional[pulumi.Input['SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateTokenArgs']]):
        pulumi.set(self, "source_gitlab_update_authorization_method_private_token", value)


@pulumi.input_type
class SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_expiry_date: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_expiry_date", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceGitlabConfigurationCredentialsSourceGitlabAuthorizationMethodPrivateTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_expiry_date: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_expiry_date", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceGitlabConfigurationCredentialsSourceGitlabUpdateAuthorizationMethodPrivateTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceGlassfrogConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceGnewsConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 query: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 country: Optional[pulumi.Input[str]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 ins: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 language: Optional[pulumi.Input[str]] = None,
                 nullables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sortby: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 top_headlines_query: Optional[pulumi.Input[str]] = None,
                 top_headlines_topic: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "source_type", source_type)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if ins is not None:
            pulumi.set(__self__, "ins", ins)
        if language is not None:
            pulumi.set(__self__, "language", language)
        if nullables is not None:
            pulumi.set(__self__, "nullables", nullables)
        if sortby is not None:
            pulumi.set(__self__, "sortby", sortby)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if top_headlines_query is not None:
            pulumi.set(__self__, "top_headlines_query", top_headlines_query)
        if top_headlines_topic is not None:
            pulumi.set(__self__, "top_headlines_topic", top_headlines_topic)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter
    def ins(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ins")

    @ins.setter
    def ins(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ins", value)

    @property
    @pulumi.getter
    def language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "language")

    @language.setter
    def language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language", value)

    @property
    @pulumi.getter
    def nullables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "nullables")

    @nullables.setter
    def nullables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nullables", value)

    @property
    @pulumi.getter
    def sortby(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sortby")

    @sortby.setter
    def sortby(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sortby", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="topHeadlinesQuery")
    def top_headlines_query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "top_headlines_query")

    @top_headlines_query.setter
    def top_headlines_query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "top_headlines_query", value)

    @property
    @pulumi.getter(name="topHeadlinesTopic")
    def top_headlines_topic(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "top_headlines_topic")

    @top_headlines_topic.setter
    def top_headlines_topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "top_headlines_topic", value)


@pulumi.input_type
class SourceGoogleAdsConfigurationArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['SourceGoogleAdsConfigurationCredentialsArgs'],
                 customer_id: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 conversion_window_days: Optional[pulumi.Input[int]] = None,
                 custom_queries: Optional[pulumi.Input[Sequence[pulumi.Input['SourceGoogleAdsConfigurationCustomQueryArgs']]]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 login_customer_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if conversion_window_days is not None:
            pulumi.set(__self__, "conversion_window_days", conversion_window_days)
        if custom_queries is not None:
            pulumi.set(__self__, "custom_queries", custom_queries)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if login_customer_id is not None:
            pulumi.set(__self__, "login_customer_id", login_customer_id)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['SourceGoogleAdsConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['SourceGoogleAdsConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "customer_id")

    @customer_id.setter
    def customer_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "customer_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="conversionWindowDays")
    def conversion_window_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "conversion_window_days")

    @conversion_window_days.setter
    def conversion_window_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "conversion_window_days", value)

    @property
    @pulumi.getter(name="customQueries")
    def custom_queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceGoogleAdsConfigurationCustomQueryArgs']]]]:
        return pulumi.get(self, "custom_queries")

    @custom_queries.setter
    def custom_queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceGoogleAdsConfigurationCustomQueryArgs']]]]):
        pulumi.set(self, "custom_queries", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="loginCustomerId")
    def login_customer_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "login_customer_id")

    @login_customer_id.setter
    def login_customer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "login_customer_id", value)


@pulumi.input_type
class SourceGoogleAdsConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 developer_token: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "developer_token", developer_token)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="developerToken")
    def developer_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "developer_token")

    @developer_token.setter
    def developer_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "developer_token", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)


@pulumi.input_type
class SourceGoogleAdsConfigurationCustomQueryArgs:
    def __init__(__self__, *,
                 query: pulumi.Input[str],
                 table_name: pulumi.Input[str]):
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "table_name", table_name)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)


@pulumi.input_type
class SourceGoogleAnalyticsDataApiConfigurationArgs:
    def __init__(__self__, *,
                 date_ranges_start_date: pulumi.Input[str],
                 property_id: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsArgs']] = None,
                 custom_reports: Optional[pulumi.Input[str]] = None,
                 window_in_days: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "date_ranges_start_date", date_ranges_start_date)
        pulumi.set(__self__, "property_id", property_id)
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if custom_reports is not None:
            pulumi.set(__self__, "custom_reports", custom_reports)
        if window_in_days is not None:
            pulumi.set(__self__, "window_in_days", window_in_days)

    @property
    @pulumi.getter(name="dateRangesStartDate")
    def date_ranges_start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "date_ranges_start_date")

    @date_ranges_start_date.setter
    def date_ranges_start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "date_ranges_start_date", value)

    @property
    @pulumi.getter(name="propertyId")
    def property_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "property_id")

    @property_id.setter
    def property_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "property_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="customReports")
    def custom_reports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_reports")

    @custom_reports.setter
    def custom_reports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_reports", value)

    @property
    @pulumi.getter(name="windowInDays")
    def window_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "window_in_days")

    @window_in_days.setter
    def window_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "window_in_days", value)


@pulumi.input_type
class SourceGoogleAnalyticsDataApiConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_google_analytics_data_api_credentials_authenticate_via_google_oauth: Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauthArgs']] = None,
                 source_google_analytics_data_api_credentials_service_account_key_authentication: Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthenticationArgs']] = None,
                 source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth: Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauthArgs']] = None,
                 source_google_analytics_data_api_update_credentials_service_account_key_authentication: Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthenticationArgs']] = None):
        if source_google_analytics_data_api_credentials_authenticate_via_google_oauth is not None:
            pulumi.set(__self__, "source_google_analytics_data_api_credentials_authenticate_via_google_oauth", source_google_analytics_data_api_credentials_authenticate_via_google_oauth)
        if source_google_analytics_data_api_credentials_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_analytics_data_api_credentials_service_account_key_authentication", source_google_analytics_data_api_credentials_service_account_key_authentication)
        if source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth is not None:
            pulumi.set(__self__, "source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth", source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth)
        if source_google_analytics_data_api_update_credentials_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_analytics_data_api_update_credentials_service_account_key_authentication", source_google_analytics_data_api_update_credentials_service_account_key_authentication)

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauth")
    def source_google_analytics_data_api_credentials_authenticate_via_google_oauth(self) -> Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauthArgs']]:
        return pulumi.get(self, "source_google_analytics_data_api_credentials_authenticate_via_google_oauth")

    @source_google_analytics_data_api_credentials_authenticate_via_google_oauth.setter
    def source_google_analytics_data_api_credentials_authenticate_via_google_oauth(self, value: Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauthArgs']]):
        pulumi.set(self, "source_google_analytics_data_api_credentials_authenticate_via_google_oauth", value)

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthentication")
    def source_google_analytics_data_api_credentials_service_account_key_authentication(self) -> Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_google_analytics_data_api_credentials_service_account_key_authentication")

    @source_google_analytics_data_api_credentials_service_account_key_authentication.setter
    def source_google_analytics_data_api_credentials_service_account_key_authentication(self, value: Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthenticationArgs']]):
        pulumi.set(self, "source_google_analytics_data_api_credentials_service_account_key_authentication", value)

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauth")
    def source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth(self) -> Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauthArgs']]:
        return pulumi.get(self, "source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth")

    @source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth.setter
    def source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth(self, value: Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauthArgs']]):
        pulumi.set(self, "source_google_analytics_data_api_update_credentials_authenticate_via_google_oauth", value)

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthentication")
    def source_google_analytics_data_api_update_credentials_service_account_key_authentication(self) -> Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_google_analytics_data_api_update_credentials_service_account_key_authentication")

    @source_google_analytics_data_api_update_credentials_service_account_key_authentication.setter
    def source_google_analytics_data_api_update_credentials_service_account_key_authentication(self, value: Optional[pulumi.Input['SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthenticationArgs']]):
        pulumi.set(self, "source_google_analytics_data_api_update_credentials_service_account_key_authentication", value)


@pulumi.input_type
class SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsAuthenticateViaGoogleOauthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiCredentialsServiceAccountKeyAuthenticationArgs:
    def __init__(__self__, *,
                 credentials_json: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_json", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsAuthenticateViaGoogleOauthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceGoogleAnalyticsDataApiConfigurationCredentialsSourceGoogleAnalyticsDataApiUpdateCredentialsServiceAccountKeyAuthenticationArgs:
    def __init__(__self__, *,
                 credentials_json: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_json", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceGoogleAnalyticsV4ConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 view_id: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsArgs']] = None,
                 custom_reports: Optional[pulumi.Input[str]] = None,
                 window_in_days: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "view_id", view_id)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if custom_reports is not None:
            pulumi.set(__self__, "custom_reports", custom_reports)
        if window_in_days is not None:
            pulumi.set(__self__, "window_in_days", window_in_days)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="viewId")
    def view_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "view_id")

    @view_id.setter
    def view_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "view_id", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="customReports")
    def custom_reports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_reports")

    @custom_reports.setter
    def custom_reports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_reports", value)

    @property
    @pulumi.getter(name="windowInDays")
    def window_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "window_in_days")

    @window_in_days.setter
    def window_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "window_in_days", value)


@pulumi.input_type
class SourceGoogleAnalyticsV4ConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_google_analytics_v4_credentials_authenticate_via_google_oauth: Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthArgs']] = None,
                 source_google_analytics_v4_credentials_service_account_key_authentication: Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationArgs']] = None,
                 source_google_analytics_v4_update_credentials_authenticate_via_google_oauth: Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthArgs']] = None,
                 source_google_analytics_v4_update_credentials_service_account_key_authentication: Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationArgs']] = None):
        if source_google_analytics_v4_credentials_authenticate_via_google_oauth is not None:
            pulumi.set(__self__, "source_google_analytics_v4_credentials_authenticate_via_google_oauth", source_google_analytics_v4_credentials_authenticate_via_google_oauth)
        if source_google_analytics_v4_credentials_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_analytics_v4_credentials_service_account_key_authentication", source_google_analytics_v4_credentials_service_account_key_authentication)
        if source_google_analytics_v4_update_credentials_authenticate_via_google_oauth is not None:
            pulumi.set(__self__, "source_google_analytics_v4_update_credentials_authenticate_via_google_oauth", source_google_analytics_v4_update_credentials_authenticate_via_google_oauth)
        if source_google_analytics_v4_update_credentials_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_analytics_v4_update_credentials_service_account_key_authentication", source_google_analytics_v4_update_credentials_service_account_key_authentication)

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauth")
    def source_google_analytics_v4_credentials_authenticate_via_google_oauth(self) -> Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthArgs']]:
        return pulumi.get(self, "source_google_analytics_v4_credentials_authenticate_via_google_oauth")

    @source_google_analytics_v4_credentials_authenticate_via_google_oauth.setter
    def source_google_analytics_v4_credentials_authenticate_via_google_oauth(self, value: Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthArgs']]):
        pulumi.set(self, "source_google_analytics_v4_credentials_authenticate_via_google_oauth", value)

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthentication")
    def source_google_analytics_v4_credentials_service_account_key_authentication(self) -> Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_google_analytics_v4_credentials_service_account_key_authentication")

    @source_google_analytics_v4_credentials_service_account_key_authentication.setter
    def source_google_analytics_v4_credentials_service_account_key_authentication(self, value: Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationArgs']]):
        pulumi.set(self, "source_google_analytics_v4_credentials_service_account_key_authentication", value)

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauth")
    def source_google_analytics_v4_update_credentials_authenticate_via_google_oauth(self) -> Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthArgs']]:
        return pulumi.get(self, "source_google_analytics_v4_update_credentials_authenticate_via_google_oauth")

    @source_google_analytics_v4_update_credentials_authenticate_via_google_oauth.setter
    def source_google_analytics_v4_update_credentials_authenticate_via_google_oauth(self, value: Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthArgs']]):
        pulumi.set(self, "source_google_analytics_v4_update_credentials_authenticate_via_google_oauth", value)

    @property
    @pulumi.getter(name="sourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthentication")
    def source_google_analytics_v4_update_credentials_service_account_key_authentication(self) -> Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_google_analytics_v4_update_credentials_service_account_key_authentication")

    @source_google_analytics_v4_update_credentials_service_account_key_authentication.setter
    def source_google_analytics_v4_update_credentials_service_account_key_authentication(self, value: Optional[pulumi.Input['SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationArgs']]):
        pulumi.set(self, "source_google_analytics_v4_update_credentials_service_account_key_authentication", value)


@pulumi.input_type
class SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsAuthenticateViaGoogleOauthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4CredentialsServiceAccountKeyAuthenticationArgs:
    def __init__(__self__, *,
                 credentials_json: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_json", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsAuthenticateViaGoogleOauthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceGoogleAnalyticsV4ConfigurationCredentialsSourceGoogleAnalyticsV4UpdateCredentialsServiceAccountKeyAuthenticationArgs:
    def __init__(__self__, *,
                 credentials_json: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_json", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceGoogleDirectoryConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsArgs']] = None):
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceGoogleDirectoryConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_google_directory_google_credentials_service_account_key: Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKeyArgs']] = None,
                 source_google_directory_google_credentials_sign_in_via_google_o_auth: Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuthArgs']] = None,
                 source_google_directory_update_google_credentials_service_account_key: Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyArgs']] = None,
                 source_google_directory_update_google_credentials_sign_in_via_google_o_auth: Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthArgs']] = None):
        if source_google_directory_google_credentials_service_account_key is not None:
            pulumi.set(__self__, "source_google_directory_google_credentials_service_account_key", source_google_directory_google_credentials_service_account_key)
        if source_google_directory_google_credentials_sign_in_via_google_o_auth is not None:
            pulumi.set(__self__, "source_google_directory_google_credentials_sign_in_via_google_o_auth", source_google_directory_google_credentials_sign_in_via_google_o_auth)
        if source_google_directory_update_google_credentials_service_account_key is not None:
            pulumi.set(__self__, "source_google_directory_update_google_credentials_service_account_key", source_google_directory_update_google_credentials_service_account_key)
        if source_google_directory_update_google_credentials_sign_in_via_google_o_auth is not None:
            pulumi.set(__self__, "source_google_directory_update_google_credentials_sign_in_via_google_o_auth", source_google_directory_update_google_credentials_sign_in_via_google_o_auth)

    @property
    @pulumi.getter(name="sourceGoogleDirectoryGoogleCredentialsServiceAccountKey")
    def source_google_directory_google_credentials_service_account_key(self) -> Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKeyArgs']]:
        return pulumi.get(self, "source_google_directory_google_credentials_service_account_key")

    @source_google_directory_google_credentials_service_account_key.setter
    def source_google_directory_google_credentials_service_account_key(self, value: Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKeyArgs']]):
        pulumi.set(self, "source_google_directory_google_credentials_service_account_key", value)

    @property
    @pulumi.getter(name="sourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuth")
    def source_google_directory_google_credentials_sign_in_via_google_o_auth(self) -> Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuthArgs']]:
        return pulumi.get(self, "source_google_directory_google_credentials_sign_in_via_google_o_auth")

    @source_google_directory_google_credentials_sign_in_via_google_o_auth.setter
    def source_google_directory_google_credentials_sign_in_via_google_o_auth(self, value: Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuthArgs']]):
        pulumi.set(self, "source_google_directory_google_credentials_sign_in_via_google_o_auth", value)

    @property
    @pulumi.getter(name="sourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKey")
    def source_google_directory_update_google_credentials_service_account_key(self) -> Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyArgs']]:
        return pulumi.get(self, "source_google_directory_update_google_credentials_service_account_key")

    @source_google_directory_update_google_credentials_service_account_key.setter
    def source_google_directory_update_google_credentials_service_account_key(self, value: Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyArgs']]):
        pulumi.set(self, "source_google_directory_update_google_credentials_service_account_key", value)

    @property
    @pulumi.getter(name="sourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuth")
    def source_google_directory_update_google_credentials_sign_in_via_google_o_auth(self) -> Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthArgs']]:
        return pulumi.get(self, "source_google_directory_update_google_credentials_sign_in_via_google_o_auth")

    @source_google_directory_update_google_credentials_sign_in_via_google_o_auth.setter
    def source_google_directory_update_google_credentials_sign_in_via_google_o_auth(self, value: Optional[pulumi.Input['SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthArgs']]):
        pulumi.set(self, "source_google_directory_update_google_credentials_sign_in_via_google_o_auth", value)


@pulumi.input_type
class SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsServiceAccountKeyArgs:
    def __init__(__self__, *,
                 credentials_json: pulumi.Input[str],
                 email: pulumi.Input[str],
                 credentials_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "email", email)
        if credentials_title is not None:
            pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_json", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials_title")

    @credentials_title.setter
    def credentials_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_title", value)


@pulumi.input_type
class SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryGoogleCredentialsSignInViaGoogleOAuthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 credentials_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if credentials_title is not None:
            pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials_title")

    @credentials_title.setter
    def credentials_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_title", value)


@pulumi.input_type
class SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsServiceAccountKeyArgs:
    def __init__(__self__, *,
                 credentials_json: pulumi.Input[str],
                 email: pulumi.Input[str],
                 credentials_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "email", email)
        if credentials_title is not None:
            pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_json", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials_title")

    @credentials_title.setter
    def credentials_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_title", value)


@pulumi.input_type
class SourceGoogleDirectoryConfigurationCredentialsSourceGoogleDirectoryUpdateGoogleCredentialsSignInViaGoogleOAuthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 credentials_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if credentials_title is not None:
            pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials_title")

    @credentials_title.setter
    def credentials_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials_title", value)


@pulumi.input_type
class SourceGooglePagespeedInsightsConfigurationArgs:
    def __init__(__self__, *,
                 categories: pulumi.Input[Sequence[pulumi.Input[str]]],
                 source_type: pulumi.Input[str],
                 strategies: pulumi.Input[Sequence[pulumi.Input[str]]],
                 urls: pulumi.Input[Sequence[pulumi.Input[str]]],
                 api_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "strategies", strategies)
        pulumi.set(__self__, "urls", urls)
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)

    @property
    @pulumi.getter
    def categories(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "categories")

    @categories.setter
    def categories(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "categories", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def strategies(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "strategies")

    @strategies.setter
    def strategies(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "strategies", value)

    @property
    @pulumi.getter
    def urls(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "urls")

    @urls.setter
    def urls(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "urls", value)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)


@pulumi.input_type
class SourceGoogleSearchConsoleConfigurationArgs:
    def __init__(__self__, *,
                 authorization: pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationArgs'],
                 site_urls: pulumi.Input[Sequence[pulumi.Input[str]]],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 custom_reports: Optional[pulumi.Input[str]] = None,
                 data_state: Optional[pulumi.Input[str]] = None,
                 end_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "authorization", authorization)
        pulumi.set(__self__, "site_urls", site_urls)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if custom_reports is not None:
            pulumi.set(__self__, "custom_reports", custom_reports)
        if data_state is not None:
            pulumi.set(__self__, "data_state", data_state)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationArgs']:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationArgs']):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter(name="siteUrls")
    def site_urls(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "site_urls")

    @site_urls.setter
    def site_urls(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "site_urls", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="customReports")
    def custom_reports(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_reports")

    @custom_reports.setter
    def custom_reports(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_reports", value)

    @property
    @pulumi.getter(name="dataState")
    def data_state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_state")

    @data_state.setter
    def data_state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_state", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)


@pulumi.input_type
class SourceGoogleSearchConsoleConfigurationAuthorizationArgs:
    def __init__(__self__, *,
                 source_google_search_console_authentication_type_o_auth: Optional[pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuthArgs']] = None,
                 source_google_search_console_authentication_type_service_account_key_authentication: Optional[pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationArgs']] = None,
                 source_google_search_console_update_authentication_type_o_auth: Optional[pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthArgs']] = None,
                 source_google_search_console_update_authentication_type_service_account_key_authentication: Optional[pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationArgs']] = None):
        if source_google_search_console_authentication_type_o_auth is not None:
            pulumi.set(__self__, "source_google_search_console_authentication_type_o_auth", source_google_search_console_authentication_type_o_auth)
        if source_google_search_console_authentication_type_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_search_console_authentication_type_service_account_key_authentication", source_google_search_console_authentication_type_service_account_key_authentication)
        if source_google_search_console_update_authentication_type_o_auth is not None:
            pulumi.set(__self__, "source_google_search_console_update_authentication_type_o_auth", source_google_search_console_update_authentication_type_o_auth)
        if source_google_search_console_update_authentication_type_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_search_console_update_authentication_type_service_account_key_authentication", source_google_search_console_update_authentication_type_service_account_key_authentication)

    @property
    @pulumi.getter(name="sourceGoogleSearchConsoleAuthenticationTypeOAuth")
    def source_google_search_console_authentication_type_o_auth(self) -> Optional[pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuthArgs']]:
        return pulumi.get(self, "source_google_search_console_authentication_type_o_auth")

    @source_google_search_console_authentication_type_o_auth.setter
    def source_google_search_console_authentication_type_o_auth(self, value: Optional[pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuthArgs']]):
        pulumi.set(self, "source_google_search_console_authentication_type_o_auth", value)

    @property
    @pulumi.getter(name="sourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthentication")
    def source_google_search_console_authentication_type_service_account_key_authentication(self) -> Optional[pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_google_search_console_authentication_type_service_account_key_authentication")

    @source_google_search_console_authentication_type_service_account_key_authentication.setter
    def source_google_search_console_authentication_type_service_account_key_authentication(self, value: Optional[pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationArgs']]):
        pulumi.set(self, "source_google_search_console_authentication_type_service_account_key_authentication", value)

    @property
    @pulumi.getter(name="sourceGoogleSearchConsoleUpdateAuthenticationTypeOAuth")
    def source_google_search_console_update_authentication_type_o_auth(self) -> Optional[pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthArgs']]:
        return pulumi.get(self, "source_google_search_console_update_authentication_type_o_auth")

    @source_google_search_console_update_authentication_type_o_auth.setter
    def source_google_search_console_update_authentication_type_o_auth(self, value: Optional[pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthArgs']]):
        pulumi.set(self, "source_google_search_console_update_authentication_type_o_auth", value)

    @property
    @pulumi.getter(name="sourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthentication")
    def source_google_search_console_update_authentication_type_service_account_key_authentication(self) -> Optional[pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_google_search_console_update_authentication_type_service_account_key_authentication")

    @source_google_search_console_update_authentication_type_service_account_key_authentication.setter
    def source_google_search_console_update_authentication_type_service_account_key_authentication(self, value: Optional[pulumi.Input['SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationArgs']]):
        pulumi.set(self, "source_google_search_console_update_authentication_type_service_account_key_authentication", value)


@pulumi.input_type
class SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeOAuthArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)


@pulumi.input_type
class SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleAuthenticationTypeServiceAccountKeyAuthenticationArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 email: pulumi.Input[str],
                 service_account_info: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "service_account_info", service_account_info)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="serviceAccountInfo")
    def service_account_info(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_account_info")

    @service_account_info.setter
    def service_account_info(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account_info", value)


@pulumi.input_type
class SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeOAuthArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)


@pulumi.input_type
class SourceGoogleSearchConsoleConfigurationAuthorizationSourceGoogleSearchConsoleUpdateAuthenticationTypeServiceAccountKeyAuthenticationArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 email: pulumi.Input[str],
                 service_account_info: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "service_account_info", service_account_info)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="serviceAccountInfo")
    def service_account_info(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_account_info")

    @service_account_info.setter
    def service_account_info(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account_info", value)


@pulumi.input_type
class SourceGoogleSheetsConfigurationArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['SourceGoogleSheetsConfigurationCredentialsArgs'],
                 source_type: pulumi.Input[str],
                 spreadsheet_id: pulumi.Input[str],
                 names_conversion: Optional[pulumi.Input[bool]] = None,
                 row_batch_size: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "spreadsheet_id", spreadsheet_id)
        if names_conversion is not None:
            pulumi.set(__self__, "names_conversion", names_conversion)
        if row_batch_size is not None:
            pulumi.set(__self__, "row_batch_size", row_batch_size)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['SourceGoogleSheetsConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['SourceGoogleSheetsConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="spreadsheetId")
    def spreadsheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "spreadsheet_id")

    @spreadsheet_id.setter
    def spreadsheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "spreadsheet_id", value)

    @property
    @pulumi.getter(name="namesConversion")
    def names_conversion(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "names_conversion")

    @names_conversion.setter
    def names_conversion(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "names_conversion", value)

    @property
    @pulumi.getter(name="rowBatchSize")
    def row_batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "row_batch_size")

    @row_batch_size.setter
    def row_batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "row_batch_size", value)


@pulumi.input_type
class SourceGoogleSheetsConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_google_sheets_authentication_authenticate_via_google_o_auth: Optional[pulumi.Input['SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuthArgs']] = None,
                 source_google_sheets_authentication_service_account_key_authentication: Optional[pulumi.Input['SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthenticationArgs']] = None,
                 source_google_sheets_update_authentication_authenticate_via_google_o_auth: Optional[pulumi.Input['SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthArgs']] = None,
                 source_google_sheets_update_authentication_service_account_key_authentication: Optional[pulumi.Input['SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationArgs']] = None):
        if source_google_sheets_authentication_authenticate_via_google_o_auth is not None:
            pulumi.set(__self__, "source_google_sheets_authentication_authenticate_via_google_o_auth", source_google_sheets_authentication_authenticate_via_google_o_auth)
        if source_google_sheets_authentication_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_sheets_authentication_service_account_key_authentication", source_google_sheets_authentication_service_account_key_authentication)
        if source_google_sheets_update_authentication_authenticate_via_google_o_auth is not None:
            pulumi.set(__self__, "source_google_sheets_update_authentication_authenticate_via_google_o_auth", source_google_sheets_update_authentication_authenticate_via_google_o_auth)
        if source_google_sheets_update_authentication_service_account_key_authentication is not None:
            pulumi.set(__self__, "source_google_sheets_update_authentication_service_account_key_authentication", source_google_sheets_update_authentication_service_account_key_authentication)

    @property
    @pulumi.getter(name="sourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuth")
    def source_google_sheets_authentication_authenticate_via_google_o_auth(self) -> Optional[pulumi.Input['SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuthArgs']]:
        return pulumi.get(self, "source_google_sheets_authentication_authenticate_via_google_o_auth")

    @source_google_sheets_authentication_authenticate_via_google_o_auth.setter
    def source_google_sheets_authentication_authenticate_via_google_o_auth(self, value: Optional[pulumi.Input['SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuthArgs']]):
        pulumi.set(self, "source_google_sheets_authentication_authenticate_via_google_o_auth", value)

    @property
    @pulumi.getter(name="sourceGoogleSheetsAuthenticationServiceAccountKeyAuthentication")
    def source_google_sheets_authentication_service_account_key_authentication(self) -> Optional[pulumi.Input['SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_google_sheets_authentication_service_account_key_authentication")

    @source_google_sheets_authentication_service_account_key_authentication.setter
    def source_google_sheets_authentication_service_account_key_authentication(self, value: Optional[pulumi.Input['SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthenticationArgs']]):
        pulumi.set(self, "source_google_sheets_authentication_service_account_key_authentication", value)

    @property
    @pulumi.getter(name="sourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuth")
    def source_google_sheets_update_authentication_authenticate_via_google_o_auth(self) -> Optional[pulumi.Input['SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthArgs']]:
        return pulumi.get(self, "source_google_sheets_update_authentication_authenticate_via_google_o_auth")

    @source_google_sheets_update_authentication_authenticate_via_google_o_auth.setter
    def source_google_sheets_update_authentication_authenticate_via_google_o_auth(self, value: Optional[pulumi.Input['SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthArgs']]):
        pulumi.set(self, "source_google_sheets_update_authentication_authenticate_via_google_o_auth", value)

    @property
    @pulumi.getter(name="sourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthentication")
    def source_google_sheets_update_authentication_service_account_key_authentication(self) -> Optional[pulumi.Input['SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_google_sheets_update_authentication_service_account_key_authentication")

    @source_google_sheets_update_authentication_service_account_key_authentication.setter
    def source_google_sheets_update_authentication_service_account_key_authentication(self, value: Optional[pulumi.Input['SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationArgs']]):
        pulumi.set(self, "source_google_sheets_update_authentication_service_account_key_authentication", value)


@pulumi.input_type
class SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationAuthenticateViaGoogleOAuthArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsAuthenticationServiceAccountKeyAuthenticationArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 service_account_info: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "service_account_info", service_account_info)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="serviceAccountInfo")
    def service_account_info(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_account_info")

    @service_account_info.setter
    def service_account_info(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account_info", value)


@pulumi.input_type
class SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationAuthenticateViaGoogleOAuthArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class SourceGoogleSheetsConfigurationCredentialsSourceGoogleSheetsUpdateAuthenticationServiceAccountKeyAuthenticationArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 service_account_info: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "service_account_info", service_account_info)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="serviceAccountInfo")
    def service_account_info(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_account_info")

    @service_account_info.setter
    def service_account_info(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account_info", value)


@pulumi.input_type
class SourceGoogleWebfontsConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 alt: Optional[pulumi.Input[str]] = None,
                 pretty_print: Optional[pulumi.Input[str]] = None,
                 sort: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        if alt is not None:
            pulumi.set(__self__, "alt", alt)
        if pretty_print is not None:
            pulumi.set(__self__, "pretty_print", pretty_print)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def alt(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "alt")

    @alt.setter
    def alt(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt", value)

    @property
    @pulumi.getter(name="prettyPrint")
    def pretty_print(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "pretty_print")

    @pretty_print.setter
    def pretty_print(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pretty_print", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class SourceGoogleWorkspaceAdminReportsConfigurationArgs:
    def __init__(__self__, *,
                 credentials_json: pulumi.Input[str],
                 email: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 lookback: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "credentials_json", credentials_json)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "source_type", source_type)
        if lookback is not None:
            pulumi.set(__self__, "lookback", lookback)

    @property
    @pulumi.getter(name="credentialsJson")
    def credentials_json(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_json")

    @credentials_json.setter
    def credentials_json(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_json", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def lookback(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lookback")

    @lookback.setter
    def lookback(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lookback", value)


@pulumi.input_type
class SourceGreenhouseConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceGridlyConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 grid_id: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "grid_id", grid_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="gridId")
    def grid_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "grid_id")

    @grid_id.setter
    def grid_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "grid_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceHarvestConfigurationArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 replication_start_date: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceHarvestConfigurationCredentialsArgs']] = None,
                 replication_end_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "replication_start_date", replication_start_date)
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if replication_end_date is not None:
            pulumi.set(__self__, "replication_end_date", replication_end_date)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="replicationStartDate")
    def replication_start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "replication_start_date")

    @replication_start_date.setter
    def replication_start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "replication_start_date", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceHarvestConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceHarvestConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="replicationEndDate")
    def replication_end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replication_end_date")

    @replication_end_date.setter
    def replication_end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replication_end_date", value)


@pulumi.input_type
class SourceHarvestConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth: Optional[pulumi.Input['SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthArgs']] = None,
                 source_harvest_authentication_mechanism_authenticate_with_personal_access_token: Optional[pulumi.Input['SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs']] = None,
                 source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth: Optional[pulumi.Input['SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthArgs']] = None,
                 source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token: Optional[pulumi.Input['SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs']] = None):
        if source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth is not None:
            pulumi.set(__self__, "source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth", source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth)
        if source_harvest_authentication_mechanism_authenticate_with_personal_access_token is not None:
            pulumi.set(__self__, "source_harvest_authentication_mechanism_authenticate_with_personal_access_token", source_harvest_authentication_mechanism_authenticate_with_personal_access_token)
        if source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth is not None:
            pulumi.set(__self__, "source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth", source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth)
        if source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token is not None:
            pulumi.set(__self__, "source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token", source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token)

    @property
    @pulumi.getter(name="sourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuth")
    def source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth(self) -> Optional[pulumi.Input['SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthArgs']]:
        return pulumi.get(self, "source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth")

    @source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth.setter
    def source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth(self, value: Optional[pulumi.Input['SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthArgs']]):
        pulumi.set(self, "source_harvest_authentication_mechanism_authenticate_via_harvest_o_auth", value)

    @property
    @pulumi.getter(name="sourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessToken")
    def source_harvest_authentication_mechanism_authenticate_with_personal_access_token(self) -> Optional[pulumi.Input['SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs']]:
        return pulumi.get(self, "source_harvest_authentication_mechanism_authenticate_with_personal_access_token")

    @source_harvest_authentication_mechanism_authenticate_with_personal_access_token.setter
    def source_harvest_authentication_mechanism_authenticate_with_personal_access_token(self, value: Optional[pulumi.Input['SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs']]):
        pulumi.set(self, "source_harvest_authentication_mechanism_authenticate_with_personal_access_token", value)

    @property
    @pulumi.getter(name="sourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuth")
    def source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth(self) -> Optional[pulumi.Input['SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthArgs']]:
        return pulumi.get(self, "source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth")

    @source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth.setter
    def source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth(self, value: Optional[pulumi.Input['SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthArgs']]):
        pulumi.set(self, "source_harvest_update_authentication_mechanism_authenticate_via_harvest_o_auth", value)

    @property
    @pulumi.getter(name="sourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessToken")
    def source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token(self) -> Optional[pulumi.Input['SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs']]:
        return pulumi.get(self, "source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token")

    @source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token.setter
    def source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token(self, value: Optional[pulumi.Input['SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs']]):
        pulumi.set(self, "source_harvest_update_authentication_mechanism_authenticate_with_personal_access_token", value)


@pulumi.input_type
class SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateViaHarvestOAuthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceHarvestConfigurationCredentialsSourceHarvestAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_token", api_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateViaHarvestOAuthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceHarvestConfigurationCredentialsSourceHarvestUpdateAuthenticationMechanismAuthenticateWithPersonalAccessTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_token", api_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceHubplannerConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceHubspotConfigurationArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['SourceHubspotConfigurationCredentialsArgs'],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['SourceHubspotConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['SourceHubspotConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceHubspotConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_hubspot_authentication_o_auth: Optional[pulumi.Input['SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuthArgs']] = None,
                 source_hubspot_authentication_private_app: Optional[pulumi.Input['SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateAppArgs']] = None,
                 source_hubspot_update_authentication_o_auth: Optional[pulumi.Input['SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuthArgs']] = None,
                 source_hubspot_update_authentication_private_app: Optional[pulumi.Input['SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateAppArgs']] = None):
        if source_hubspot_authentication_o_auth is not None:
            pulumi.set(__self__, "source_hubspot_authentication_o_auth", source_hubspot_authentication_o_auth)
        if source_hubspot_authentication_private_app is not None:
            pulumi.set(__self__, "source_hubspot_authentication_private_app", source_hubspot_authentication_private_app)
        if source_hubspot_update_authentication_o_auth is not None:
            pulumi.set(__self__, "source_hubspot_update_authentication_o_auth", source_hubspot_update_authentication_o_auth)
        if source_hubspot_update_authentication_private_app is not None:
            pulumi.set(__self__, "source_hubspot_update_authentication_private_app", source_hubspot_update_authentication_private_app)

    @property
    @pulumi.getter(name="sourceHubspotAuthenticationOAuth")
    def source_hubspot_authentication_o_auth(self) -> Optional[pulumi.Input['SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuthArgs']]:
        return pulumi.get(self, "source_hubspot_authentication_o_auth")

    @source_hubspot_authentication_o_auth.setter
    def source_hubspot_authentication_o_auth(self, value: Optional[pulumi.Input['SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuthArgs']]):
        pulumi.set(self, "source_hubspot_authentication_o_auth", value)

    @property
    @pulumi.getter(name="sourceHubspotAuthenticationPrivateApp")
    def source_hubspot_authentication_private_app(self) -> Optional[pulumi.Input['SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateAppArgs']]:
        return pulumi.get(self, "source_hubspot_authentication_private_app")

    @source_hubspot_authentication_private_app.setter
    def source_hubspot_authentication_private_app(self, value: Optional[pulumi.Input['SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateAppArgs']]):
        pulumi.set(self, "source_hubspot_authentication_private_app", value)

    @property
    @pulumi.getter(name="sourceHubspotUpdateAuthenticationOAuth")
    def source_hubspot_update_authentication_o_auth(self) -> Optional[pulumi.Input['SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuthArgs']]:
        return pulumi.get(self, "source_hubspot_update_authentication_o_auth")

    @source_hubspot_update_authentication_o_auth.setter
    def source_hubspot_update_authentication_o_auth(self, value: Optional[pulumi.Input['SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuthArgs']]):
        pulumi.set(self, "source_hubspot_update_authentication_o_auth", value)

    @property
    @pulumi.getter(name="sourceHubspotUpdateAuthenticationPrivateApp")
    def source_hubspot_update_authentication_private_app(self) -> Optional[pulumi.Input['SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateAppArgs']]:
        return pulumi.get(self, "source_hubspot_update_authentication_private_app")

    @source_hubspot_update_authentication_private_app.setter
    def source_hubspot_update_authentication_private_app(self, value: Optional[pulumi.Input['SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateAppArgs']]):
        pulumi.set(self, "source_hubspot_update_authentication_private_app", value)


@pulumi.input_type
class SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationOAuthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 credentials_title: pulumi.Input[str],
                 refresh_token: pulumi.Input[str]):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_title")

    @credentials_title.setter
    def credentials_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_title", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class SourceHubspotConfigurationCredentialsSourceHubspotAuthenticationPrivateAppArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 credentials_title: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_title")

    @credentials_title.setter
    def credentials_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_title", value)


@pulumi.input_type
class SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationOAuthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 credentials_title: pulumi.Input[str],
                 refresh_token: pulumi.Input[str]):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "credentials_title", credentials_title)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_title")

    @credentials_title.setter
    def credentials_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_title", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class SourceHubspotConfigurationCredentialsSourceHubspotUpdateAuthenticationPrivateAppArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 credentials_title: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "credentials_title", credentials_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="credentialsTitle")
    def credentials_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials_title")

    @credentials_title.setter
    def credentials_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials_title", value)


@pulumi.input_type
class SourceInsightlyConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 token: pulumi.Input[str]):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class SourceInstagramConfigurationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceInstatusConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceIntercomConfigurationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceIp2whoisConfigurationArgs:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None):
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceIterableConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceJiraConfigurationArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 domain: pulumi.Input[str],
                 email: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 enable_experimental_streams: Optional[pulumi.Input[bool]] = None,
                 expand_issue_changelog: Optional[pulumi.Input[bool]] = None,
                 projects: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 render_fields: Optional[pulumi.Input[bool]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "source_type", source_type)
        if enable_experimental_streams is not None:
            pulumi.set(__self__, "enable_experimental_streams", enable_experimental_streams)
        if expand_issue_changelog is not None:
            pulumi.set(__self__, "expand_issue_changelog", expand_issue_changelog)
        if projects is not None:
            pulumi.set(__self__, "projects", projects)
        if render_fields is not None:
            pulumi.set(__self__, "render_fields", render_fields)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter
    def domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="enableExperimentalStreams")
    def enable_experimental_streams(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_experimental_streams")

    @enable_experimental_streams.setter
    def enable_experimental_streams(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_experimental_streams", value)

    @property
    @pulumi.getter(name="expandIssueChangelog")
    def expand_issue_changelog(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "expand_issue_changelog")

    @expand_issue_changelog.setter
    def expand_issue_changelog(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expand_issue_changelog", value)

    @property
    @pulumi.getter
    def projects(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "projects")

    @projects.setter
    def projects(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "projects", value)

    @property
    @pulumi.getter(name="renderFields")
    def render_fields(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "render_fields")

    @render_fields.setter
    def render_fields(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "render_fields", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceK6CloudConfigurationArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceKlarnaConfigurationArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 playground: pulumi.Input[bool],
                 region: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "playground", playground)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def playground(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "playground")

    @playground.setter
    def playground(self, value: pulumi.Input[bool]):
        pulumi.set(self, "playground", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class SourceKlaviyoConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceKustomerSingerConfigurationArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceKyveConfigurationArgs:
    def __init__(__self__, *,
                 pool_ids: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_ids: pulumi.Input[str],
                 max_pages: Optional[pulumi.Input[int]] = None,
                 page_size: Optional[pulumi.Input[int]] = None,
                 url_base: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "pool_ids", pool_ids)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_ids", start_ids)
        if max_pages is not None:
            pulumi.set(__self__, "max_pages", max_pages)
        if page_size is not None:
            pulumi.set(__self__, "page_size", page_size)
        if url_base is not None:
            pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="poolIds")
    def pool_ids(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pool_ids")

    @pool_ids.setter
    def pool_ids(self, value: pulumi.Input[str]):
        pulumi.set(self, "pool_ids", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startIds")
    def start_ids(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_ids")

    @start_ids.setter
    def start_ids(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_ids", value)

    @property
    @pulumi.getter(name="maxPages")
    def max_pages(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "max_pages")

    @max_pages.setter
    def max_pages(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_pages", value)

    @property
    @pulumi.getter(name="pageSize")
    def page_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "page_size")

    @page_size.setter
    def page_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "page_size", value)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_base")

    @url_base.setter
    def url_base(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_base", value)


@pulumi.input_type
class SourceLaunchdarklyConfigurationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceLemlistConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceLeverHiringConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsArgs']] = None,
                 environment: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)


@pulumi.input_type
class SourceLeverHiringConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key: Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKeyArgs']] = None,
                 source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth: Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthArgs']] = None,
                 source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key: Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKeyArgs']] = None,
                 source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth: Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthArgs']] = None):
        if source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key is not None:
            pulumi.set(__self__, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key", source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key)
        if source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth is not None:
            pulumi.set(__self__, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth", source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth)
        if source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key is not None:
            pulumi.set(__self__, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key", source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key)
        if source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth is not None:
            pulumi.set(__self__, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth", source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth)

    @property
    @pulumi.getter(name="sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKey")
    def source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key(self) -> Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKeyArgs']]:
        return pulumi.get(self, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key")

    @source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key.setter
    def source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key(self, value: Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKeyArgs']]):
        pulumi.set(self, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_api_key", value)

    @property
    @pulumi.getter(name="sourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuth")
    def source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth(self) -> Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthArgs']]:
        return pulumi.get(self, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth")

    @source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth.setter
    def source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth(self, value: Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthArgs']]):
        pulumi.set(self, "source_lever_hiring_authentication_mechanism_authenticate_via_lever_o_auth", value)

    @property
    @pulumi.getter(name="sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKey")
    def source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key(self) -> Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKeyArgs']]:
        return pulumi.get(self, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key")

    @source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key.setter
    def source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key(self, value: Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKeyArgs']]):
        pulumi.set(self, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_api_key", value)

    @property
    @pulumi.getter(name="sourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuth")
    def source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth(self) -> Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthArgs']]:
        return pulumi.get(self, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth")

    @source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth.setter
    def source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth(self, value: Optional[pulumi.Input['SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthArgs']]):
        pulumi.set(self, "source_lever_hiring_update_authentication_mechanism_authenticate_via_lever_o_auth", value)


@pulumi.input_type
class SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverApiKeyArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceLeverHiringConfigurationCredentialsSourceLeverHiringAuthenticationMechanismAuthenticateViaLeverOAuthArgs:
    def __init__(__self__, *,
                 refresh_token: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverApiKeyArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceLeverHiringConfigurationCredentialsSourceLeverHiringUpdateAuthenticationMechanismAuthenticateViaLeverOAuthArgs:
    def __init__(__self__, *,
                 refresh_token: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceLinkedinAdsConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 account_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 ad_analytics_reports: Optional[pulumi.Input[Sequence[pulumi.Input['SourceLinkedinAdsConfigurationAdAnalyticsReportArgs']]]] = None,
                 credentials: Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsArgs']] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if account_ids is not None:
            pulumi.set(__self__, "account_ids", account_ids)
        if ad_analytics_reports is not None:
            pulumi.set(__self__, "ad_analytics_reports", ad_analytics_reports)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="accountIds")
    def account_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "account_ids")

    @account_ids.setter
    def account_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "account_ids", value)

    @property
    @pulumi.getter(name="adAnalyticsReports")
    def ad_analytics_reports(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceLinkedinAdsConfigurationAdAnalyticsReportArgs']]]]:
        return pulumi.get(self, "ad_analytics_reports")

    @ad_analytics_reports.setter
    def ad_analytics_reports(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceLinkedinAdsConfigurationAdAnalyticsReportArgs']]]]):
        pulumi.set(self, "ad_analytics_reports", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceLinkedinAdsConfigurationAdAnalyticsReportArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 pivot_by: pulumi.Input[str],
                 time_granularity: pulumi.Input[str]):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "pivot_by", pivot_by)
        pulumi.set(__self__, "time_granularity", time_granularity)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="pivotBy")
    def pivot_by(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pivot_by")

    @pivot_by.setter
    def pivot_by(self, value: pulumi.Input[str]):
        pulumi.set(self, "pivot_by", value)

    @property
    @pulumi.getter(name="timeGranularity")
    def time_granularity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "time_granularity")

    @time_granularity.setter
    def time_granularity(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_granularity", value)


@pulumi.input_type
class SourceLinkedinAdsConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_linkedin_ads_authentication_access_token: Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessTokenArgs']] = None,
                 source_linkedin_ads_authentication_o_auth20: Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20Args']] = None,
                 source_linkedin_ads_update_authentication_access_token: Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessTokenArgs']] = None,
                 source_linkedin_ads_update_authentication_o_auth20: Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20Args']] = None):
        if source_linkedin_ads_authentication_access_token is not None:
            pulumi.set(__self__, "source_linkedin_ads_authentication_access_token", source_linkedin_ads_authentication_access_token)
        if source_linkedin_ads_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_linkedin_ads_authentication_o_auth20", source_linkedin_ads_authentication_o_auth20)
        if source_linkedin_ads_update_authentication_access_token is not None:
            pulumi.set(__self__, "source_linkedin_ads_update_authentication_access_token", source_linkedin_ads_update_authentication_access_token)
        if source_linkedin_ads_update_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_linkedin_ads_update_authentication_o_auth20", source_linkedin_ads_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceLinkedinAdsAuthenticationAccessToken")
    def source_linkedin_ads_authentication_access_token(self) -> Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessTokenArgs']]:
        return pulumi.get(self, "source_linkedin_ads_authentication_access_token")

    @source_linkedin_ads_authentication_access_token.setter
    def source_linkedin_ads_authentication_access_token(self, value: Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessTokenArgs']]):
        pulumi.set(self, "source_linkedin_ads_authentication_access_token", value)

    @property
    @pulumi.getter(name="sourceLinkedinAdsAuthenticationOAuth20")
    def source_linkedin_ads_authentication_o_auth20(self) -> Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20Args']]:
        return pulumi.get(self, "source_linkedin_ads_authentication_o_auth20")

    @source_linkedin_ads_authentication_o_auth20.setter
    def source_linkedin_ads_authentication_o_auth20(self, value: Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20Args']]):
        pulumi.set(self, "source_linkedin_ads_authentication_o_auth20", value)

    @property
    @pulumi.getter(name="sourceLinkedinAdsUpdateAuthenticationAccessToken")
    def source_linkedin_ads_update_authentication_access_token(self) -> Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessTokenArgs']]:
        return pulumi.get(self, "source_linkedin_ads_update_authentication_access_token")

    @source_linkedin_ads_update_authentication_access_token.setter
    def source_linkedin_ads_update_authentication_access_token(self, value: Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessTokenArgs']]):
        pulumi.set(self, "source_linkedin_ads_update_authentication_access_token", value)

    @property
    @pulumi.getter(name="sourceLinkedinAdsUpdateAuthenticationOAuth20")
    def source_linkedin_ads_update_authentication_o_auth20(self) -> Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20Args']]:
        return pulumi.get(self, "source_linkedin_ads_update_authentication_o_auth20")

    @source_linkedin_ads_update_authentication_o_auth20.setter
    def source_linkedin_ads_update_authentication_o_auth20(self, value: Optional[pulumi.Input['SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20Args']]):
        pulumi.set(self, "source_linkedin_ads_update_authentication_o_auth20", value)


@pulumi.input_type
class SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_method: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsAuthenticationOAuth20Args:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 auth_method: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_method: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourceLinkedinAdsConfigurationCredentialsSourceLinkedinAdsUpdateAuthenticationOAuth20Args:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 auth_method: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourceLinkedinPagesConfigurationArgs:
    def __init__(__self__, *,
                 org_id: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsArgs']] = None):
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "org_id")

    @org_id.setter
    def org_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "org_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceLinkedinPagesConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_linkedin_pages_authentication_access_token: Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessTokenArgs']] = None,
                 source_linkedin_pages_authentication_o_auth20: Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20Args']] = None,
                 source_linkedin_pages_update_authentication_access_token: Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessTokenArgs']] = None,
                 source_linkedin_pages_update_authentication_o_auth20: Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20Args']] = None):
        if source_linkedin_pages_authentication_access_token is not None:
            pulumi.set(__self__, "source_linkedin_pages_authentication_access_token", source_linkedin_pages_authentication_access_token)
        if source_linkedin_pages_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_linkedin_pages_authentication_o_auth20", source_linkedin_pages_authentication_o_auth20)
        if source_linkedin_pages_update_authentication_access_token is not None:
            pulumi.set(__self__, "source_linkedin_pages_update_authentication_access_token", source_linkedin_pages_update_authentication_access_token)
        if source_linkedin_pages_update_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_linkedin_pages_update_authentication_o_auth20", source_linkedin_pages_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceLinkedinPagesAuthenticationAccessToken")
    def source_linkedin_pages_authentication_access_token(self) -> Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessTokenArgs']]:
        return pulumi.get(self, "source_linkedin_pages_authentication_access_token")

    @source_linkedin_pages_authentication_access_token.setter
    def source_linkedin_pages_authentication_access_token(self, value: Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessTokenArgs']]):
        pulumi.set(self, "source_linkedin_pages_authentication_access_token", value)

    @property
    @pulumi.getter(name="sourceLinkedinPagesAuthenticationOAuth20")
    def source_linkedin_pages_authentication_o_auth20(self) -> Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20Args']]:
        return pulumi.get(self, "source_linkedin_pages_authentication_o_auth20")

    @source_linkedin_pages_authentication_o_auth20.setter
    def source_linkedin_pages_authentication_o_auth20(self, value: Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20Args']]):
        pulumi.set(self, "source_linkedin_pages_authentication_o_auth20", value)

    @property
    @pulumi.getter(name="sourceLinkedinPagesUpdateAuthenticationAccessToken")
    def source_linkedin_pages_update_authentication_access_token(self) -> Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessTokenArgs']]:
        return pulumi.get(self, "source_linkedin_pages_update_authentication_access_token")

    @source_linkedin_pages_update_authentication_access_token.setter
    def source_linkedin_pages_update_authentication_access_token(self, value: Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessTokenArgs']]):
        pulumi.set(self, "source_linkedin_pages_update_authentication_access_token", value)

    @property
    @pulumi.getter(name="sourceLinkedinPagesUpdateAuthenticationOAuth20")
    def source_linkedin_pages_update_authentication_o_auth20(self) -> Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20Args']]:
        return pulumi.get(self, "source_linkedin_pages_update_authentication_o_auth20")

    @source_linkedin_pages_update_authentication_o_auth20.setter
    def source_linkedin_pages_update_authentication_o_auth20(self, value: Optional[pulumi.Input['SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20Args']]):
        pulumi.set(self, "source_linkedin_pages_update_authentication_o_auth20", value)


@pulumi.input_type
class SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_method: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesAuthenticationOAuth20Args:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 auth_method: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_method: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourceLinkedinPagesConfigurationCredentialsSourceLinkedinPagesUpdateAuthenticationOAuth20Args:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 auth_method: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_method is not None:
            pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourceLinnworksConfigurationArgs:
    def __init__(__self__, *,
                 application_id: pulumi.Input[str],
                 application_secret: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 token: pulumi.Input[str]):
        pulumi.set(__self__, "application_id", application_id)
        pulumi.set(__self__, "application_secret", application_secret)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="applicationId")
    def application_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "application_id")

    @application_id.setter
    def application_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_id", value)

    @property
    @pulumi.getter(name="applicationSecret")
    def application_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "application_secret")

    @application_secret.setter
    def application_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "application_secret", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class SourceLokaliseConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceMailchimpConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 campaign_id: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsArgs']] = None):
        pulumi.set(__self__, "source_type", source_type)
        if campaign_id is not None:
            pulumi.set(__self__, "campaign_id", campaign_id)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="campaignId")
    def campaign_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "campaign_id")

    @campaign_id.setter
    def campaign_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "campaign_id", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceMailchimpConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_mailchimp_authentication_api_key: Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKeyArgs']] = None,
                 source_mailchimp_authentication_o_auth20: Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20Args']] = None,
                 source_mailchimp_update_authentication_api_key: Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKeyArgs']] = None,
                 source_mailchimp_update_authentication_o_auth20: Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20Args']] = None):
        if source_mailchimp_authentication_api_key is not None:
            pulumi.set(__self__, "source_mailchimp_authentication_api_key", source_mailchimp_authentication_api_key)
        if source_mailchimp_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_mailchimp_authentication_o_auth20", source_mailchimp_authentication_o_auth20)
        if source_mailchimp_update_authentication_api_key is not None:
            pulumi.set(__self__, "source_mailchimp_update_authentication_api_key", source_mailchimp_update_authentication_api_key)
        if source_mailchimp_update_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_mailchimp_update_authentication_o_auth20", source_mailchimp_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceMailchimpAuthenticationApiKey")
    def source_mailchimp_authentication_api_key(self) -> Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKeyArgs']]:
        return pulumi.get(self, "source_mailchimp_authentication_api_key")

    @source_mailchimp_authentication_api_key.setter
    def source_mailchimp_authentication_api_key(self, value: Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKeyArgs']]):
        pulumi.set(self, "source_mailchimp_authentication_api_key", value)

    @property
    @pulumi.getter(name="sourceMailchimpAuthenticationOAuth20")
    def source_mailchimp_authentication_o_auth20(self) -> Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20Args']]:
        return pulumi.get(self, "source_mailchimp_authentication_o_auth20")

    @source_mailchimp_authentication_o_auth20.setter
    def source_mailchimp_authentication_o_auth20(self, value: Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20Args']]):
        pulumi.set(self, "source_mailchimp_authentication_o_auth20", value)

    @property
    @pulumi.getter(name="sourceMailchimpUpdateAuthenticationApiKey")
    def source_mailchimp_update_authentication_api_key(self) -> Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKeyArgs']]:
        return pulumi.get(self, "source_mailchimp_update_authentication_api_key")

    @source_mailchimp_update_authentication_api_key.setter
    def source_mailchimp_update_authentication_api_key(self, value: Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKeyArgs']]):
        pulumi.set(self, "source_mailchimp_update_authentication_api_key", value)

    @property
    @pulumi.getter(name="sourceMailchimpUpdateAuthenticationOAuth20")
    def source_mailchimp_update_authentication_o_auth20(self) -> Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20Args']]:
        return pulumi.get(self, "source_mailchimp_update_authentication_o_auth20")

    @source_mailchimp_update_authentication_o_auth20.setter
    def source_mailchimp_update_authentication_o_auth20(self, value: Optional[pulumi.Input['SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20Args']]):
        pulumi.set(self, "source_mailchimp_update_authentication_o_auth20", value)


@pulumi.input_type
class SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationApiKeyArgs:
    def __init__(__self__, *,
                 apikey: pulumi.Input[str],
                 auth_type: pulumi.Input[str]):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def apikey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "apikey")

    @apikey.setter
    def apikey(self, value: pulumi.Input[str]):
        pulumi.set(self, "apikey", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceMailchimpConfigurationCredentialsSourceMailchimpAuthenticationOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationApiKeyArgs:
    def __init__(__self__, *,
                 apikey: pulumi.Input[str],
                 auth_type: pulumi.Input[str]):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def apikey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "apikey")

    @apikey.setter
    def apikey(self, value: pulumi.Input[str]):
        pulumi.set(self, "apikey", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceMailchimpConfigurationCredentialsSourceMailchimpUpdateAuthenticationOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceMailgunConfigurationArgs:
    def __init__(__self__, *,
                 private_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 domain_region: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "source_type", source_type)
        if domain_region is not None:
            pulumi.set(__self__, "domain_region", domain_region)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="domainRegion")
    def domain_region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain_region")

    @domain_region.setter
    def domain_region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain_region", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceMailjetSmsConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 token: pulumi.Input[str],
                 end_date: Optional[pulumi.Input[int]] = None,
                 start_date: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "token", token)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceMarketoConfigurationArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 domain_url: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "domain_url", domain_url)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="domainUrl")
    def domain_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain_url")

    @domain_url.setter
    def domain_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_url", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceMetabaseConfigurationArgs:
    def __init__(__self__, *,
                 instance_api_url: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 session_token: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "instance_api_url", instance_api_url)
        pulumi.set(__self__, "source_type", source_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if session_token is not None:
            pulumi.set(__self__, "session_token", session_token)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="instanceApiUrl")
    def instance_api_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance_api_url")

    @instance_api_url.setter
    def instance_api_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance_api_url", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sessionToken")
    def session_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "session_token")

    @session_token.setter
    def session_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "session_token", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class SourceMicrosoftTeamsConfigurationArgs:
    def __init__(__self__, *,
                 period: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsArgs']] = None):
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[str]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[str]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceMicrosoftTeamsConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft: Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftArgs']] = None,
                 source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20: Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Args']] = None,
                 source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft: Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftArgs']] = None,
                 source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20: Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Args']] = None):
        if source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft is not None:
            pulumi.set(__self__, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft", source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft)
        if source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20 is not None:
            pulumi.set(__self__, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20", source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20)
        if source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft is not None:
            pulumi.set(__self__, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft", source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft)
        if source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20 is not None:
            pulumi.set(__self__, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20", source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20)

    @property
    @pulumi.getter(name="sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoft")
    def source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft(self) -> Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftArgs']]:
        return pulumi.get(self, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft")

    @source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft.setter
    def source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft(self, value: Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftArgs']]):
        pulumi.set(self, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft", value)

    @property
    @pulumi.getter(name="sourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20")
    def source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20(self) -> Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Args']]:
        return pulumi.get(self, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20")

    @source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20.setter
    def source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20(self, value: Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Args']]):
        pulumi.set(self, "source_microsoft_teams_authentication_mechanism_authenticate_via_microsoft_o_auth20", value)

    @property
    @pulumi.getter(name="sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoft")
    def source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft(self) -> Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftArgs']]:
        return pulumi.get(self, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft")

    @source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft.setter
    def source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft(self, value: Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftArgs']]):
        pulumi.set(self, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft", value)

    @property
    @pulumi.getter(name="sourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20")
    def source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20(self) -> Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Args']]:
        return pulumi.get(self, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20")

    @source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20.setter
    def source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20(self, value: Optional[pulumi.Input['SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Args']]):
        pulumi.set(self, "source_microsoft_teams_update_authentication_mechanism_authenticate_via_microsoft_o_auth20", value)


@pulumi.input_type
class SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 tenant_id: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Args:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 tenant_id: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 tenant_id: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceMicrosoftTeamsConfigurationCredentialsSourceMicrosoftTeamsUpdateAuthenticationMechanismAuthenticateViaMicrosoftOAuth20Args:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 tenant_id: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "tenant_id", tenant_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceMixpanelConfigurationArgs:
    def __init__(__self__, *,
                 attribution_window: Optional[pulumi.Input[int]] = None,
                 credentials: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsArgs']] = None,
                 date_window_size: Optional[pulumi.Input[int]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 project_timezone: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 select_properties_by_default: Optional[pulumi.Input[bool]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        if attribution_window is not None:
            pulumi.set(__self__, "attribution_window", attribution_window)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if date_window_size is not None:
            pulumi.set(__self__, "date_window_size", date_window_size)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if project_timezone is not None:
            pulumi.set(__self__, "project_timezone", project_timezone)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if select_properties_by_default is not None:
            pulumi.set(__self__, "select_properties_by_default", select_properties_by_default)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="attributionWindow")
    def attribution_window(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "attribution_window")

    @attribution_window.setter
    def attribution_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "attribution_window", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="dateWindowSize")
    def date_window_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "date_window_size")

    @date_window_size.setter
    def date_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "date_window_size", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="projectTimezone")
    def project_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_timezone")

    @project_timezone.setter
    def project_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_timezone", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="selectPropertiesByDefault")
    def select_properties_by_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "select_properties_by_default")

    @select_properties_by_default.setter
    def select_properties_by_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "select_properties_by_default", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceMixpanelConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_mixpanel_authentication_wildcard_project_secret: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretArgs']] = None,
                 source_mixpanel_authentication_wildcard_service_account: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountArgs']] = None,
                 source_mixpanel_update_authentication_wildcard_project_secret: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretArgs']] = None,
                 source_mixpanel_update_authentication_wildcard_service_account: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountArgs']] = None):
        if source_mixpanel_authentication_wildcard_project_secret is not None:
            pulumi.set(__self__, "source_mixpanel_authentication_wildcard_project_secret", source_mixpanel_authentication_wildcard_project_secret)
        if source_mixpanel_authentication_wildcard_service_account is not None:
            pulumi.set(__self__, "source_mixpanel_authentication_wildcard_service_account", source_mixpanel_authentication_wildcard_service_account)
        if source_mixpanel_update_authentication_wildcard_project_secret is not None:
            pulumi.set(__self__, "source_mixpanel_update_authentication_wildcard_project_secret", source_mixpanel_update_authentication_wildcard_project_secret)
        if source_mixpanel_update_authentication_wildcard_service_account is not None:
            pulumi.set(__self__, "source_mixpanel_update_authentication_wildcard_service_account", source_mixpanel_update_authentication_wildcard_service_account)

    @property
    @pulumi.getter(name="sourceMixpanelAuthenticationWildcardProjectSecret")
    def source_mixpanel_authentication_wildcard_project_secret(self) -> Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretArgs']]:
        return pulumi.get(self, "source_mixpanel_authentication_wildcard_project_secret")

    @source_mixpanel_authentication_wildcard_project_secret.setter
    def source_mixpanel_authentication_wildcard_project_secret(self, value: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretArgs']]):
        pulumi.set(self, "source_mixpanel_authentication_wildcard_project_secret", value)

    @property
    @pulumi.getter(name="sourceMixpanelAuthenticationWildcardServiceAccount")
    def source_mixpanel_authentication_wildcard_service_account(self) -> Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountArgs']]:
        return pulumi.get(self, "source_mixpanel_authentication_wildcard_service_account")

    @source_mixpanel_authentication_wildcard_service_account.setter
    def source_mixpanel_authentication_wildcard_service_account(self, value: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountArgs']]):
        pulumi.set(self, "source_mixpanel_authentication_wildcard_service_account", value)

    @property
    @pulumi.getter(name="sourceMixpanelUpdateAuthenticationWildcardProjectSecret")
    def source_mixpanel_update_authentication_wildcard_project_secret(self) -> Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretArgs']]:
        return pulumi.get(self, "source_mixpanel_update_authentication_wildcard_project_secret")

    @source_mixpanel_update_authentication_wildcard_project_secret.setter
    def source_mixpanel_update_authentication_wildcard_project_secret(self, value: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretArgs']]):
        pulumi.set(self, "source_mixpanel_update_authentication_wildcard_project_secret", value)

    @property
    @pulumi.getter(name="sourceMixpanelUpdateAuthenticationWildcardServiceAccount")
    def source_mixpanel_update_authentication_wildcard_service_account(self) -> Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountArgs']]:
        return pulumi.get(self, "source_mixpanel_update_authentication_wildcard_service_account")

    @source_mixpanel_update_authentication_wildcard_service_account.setter
    def source_mixpanel_update_authentication_wildcard_service_account(self, value: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountArgs']]):
        pulumi.set(self, "source_mixpanel_update_authentication_wildcard_service_account", value)


@pulumi.input_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretArgs:
    def __init__(__self__, *,
                 api_secret: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_secret", api_secret)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_secret")

    @api_secret.setter
    def api_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_secret", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountArgs:
    def __init__(__self__, *,
                 secret: pulumi.Input[str],
                 username: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "username", username)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretArgs:
    def __init__(__self__, *,
                 api_secret: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_secret", api_secret)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_secret")

    @api_secret.setter
    def api_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_secret", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountArgs:
    def __init__(__self__, *,
                 secret: pulumi.Input[str],
                 username: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "username", username)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceMondayConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceMondayConfigurationCredentialsArgs']] = None):
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceMondayConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceMondayConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceMondayConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_monday_authorization_method_api_token: Optional[pulumi.Input['SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiTokenArgs']] = None,
                 source_monday_authorization_method_o_auth20: Optional[pulumi.Input['SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20Args']] = None,
                 source_monday_update_authorization_method_api_token: Optional[pulumi.Input['SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiTokenArgs']] = None,
                 source_monday_update_authorization_method_o_auth20: Optional[pulumi.Input['SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20Args']] = None):
        if source_monday_authorization_method_api_token is not None:
            pulumi.set(__self__, "source_monday_authorization_method_api_token", source_monday_authorization_method_api_token)
        if source_monday_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_monday_authorization_method_o_auth20", source_monday_authorization_method_o_auth20)
        if source_monday_update_authorization_method_api_token is not None:
            pulumi.set(__self__, "source_monday_update_authorization_method_api_token", source_monday_update_authorization_method_api_token)
        if source_monday_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_monday_update_authorization_method_o_auth20", source_monday_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceMondayAuthorizationMethodApiToken")
    def source_monday_authorization_method_api_token(self) -> Optional[pulumi.Input['SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiTokenArgs']]:
        return pulumi.get(self, "source_monday_authorization_method_api_token")

    @source_monday_authorization_method_api_token.setter
    def source_monday_authorization_method_api_token(self, value: Optional[pulumi.Input['SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiTokenArgs']]):
        pulumi.set(self, "source_monday_authorization_method_api_token", value)

    @property
    @pulumi.getter(name="sourceMondayAuthorizationMethodOAuth20")
    def source_monday_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_monday_authorization_method_o_auth20")

    @source_monday_authorization_method_o_auth20.setter
    def source_monday_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_monday_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceMondayUpdateAuthorizationMethodApiToken")
    def source_monday_update_authorization_method_api_token(self) -> Optional[pulumi.Input['SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiTokenArgs']]:
        return pulumi.get(self, "source_monday_update_authorization_method_api_token")

    @source_monday_update_authorization_method_api_token.setter
    def source_monday_update_authorization_method_api_token(self, value: Optional[pulumi.Input['SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiTokenArgs']]):
        pulumi.set(self, "source_monday_update_authorization_method_api_token", value)

    @property
    @pulumi.getter(name="sourceMondayUpdateAuthorizationMethodOAuth20")
    def source_monday_update_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_monday_update_authorization_method_o_auth20")

    @source_monday_update_authorization_method_o_auth20.setter
    def source_monday_update_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_monday_update_authorization_method_o_auth20", value)


@pulumi.input_type
class SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodApiTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceMondayConfigurationCredentialsSourceMondayAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 subdomain: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)


@pulumi.input_type
class SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodApiTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceMondayConfigurationCredentialsSourceMondayUpdateAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 subdomain: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)


@pulumi.input_type
class SourceMongodbConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 auth_source: Optional[pulumi.Input[str]] = None,
                 instance_type: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeArgs']] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "source_type", source_type)
        if auth_source is not None:
            pulumi.set(__self__, "auth_source", auth_source)
        if instance_type is not None:
            pulumi.set(__self__, "instance_type", instance_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="authSource")
    def auth_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_source")

    @auth_source.setter
    def auth_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_source", value)

    @property
    @pulumi.getter(name="instanceType")
    def instance_type(self) -> Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeArgs']]:
        return pulumi.get(self, "instance_type")

    @instance_type.setter
    def instance_type(self, value: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeArgs']]):
        pulumi.set(self, "instance_type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class SourceMongodbConfigurationInstanceTypeArgs:
    def __init__(__self__, *,
                 source_mongodb_mongo_db_instance_type_mongo_db_atlas: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlasArgs']] = None,
                 source_mongodb_mongo_db_instance_type_replica_set: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSetArgs']] = None,
                 source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceArgs']] = None,
                 source_mongodb_update_mongo_db_instance_type_mongo_db_atlas: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlasArgs']] = None,
                 source_mongodb_update_mongo_db_instance_type_replica_set: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSetArgs']] = None,
                 source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceArgs']] = None):
        if source_mongodb_mongo_db_instance_type_mongo_db_atlas is not None:
            pulumi.set(__self__, "source_mongodb_mongo_db_instance_type_mongo_db_atlas", source_mongodb_mongo_db_instance_type_mongo_db_atlas)
        if source_mongodb_mongo_db_instance_type_replica_set is not None:
            pulumi.set(__self__, "source_mongodb_mongo_db_instance_type_replica_set", source_mongodb_mongo_db_instance_type_replica_set)
        if source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance is not None:
            pulumi.set(__self__, "source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance", source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance)
        if source_mongodb_update_mongo_db_instance_type_mongo_db_atlas is not None:
            pulumi.set(__self__, "source_mongodb_update_mongo_db_instance_type_mongo_db_atlas", source_mongodb_update_mongo_db_instance_type_mongo_db_atlas)
        if source_mongodb_update_mongo_db_instance_type_replica_set is not None:
            pulumi.set(__self__, "source_mongodb_update_mongo_db_instance_type_replica_set", source_mongodb_update_mongo_db_instance_type_replica_set)
        if source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance is not None:
            pulumi.set(__self__, "source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance", source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance)

    @property
    @pulumi.getter(name="sourceMongodbMongoDbInstanceTypeMongoDbAtlas")
    def source_mongodb_mongo_db_instance_type_mongo_db_atlas(self) -> Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlasArgs']]:
        return pulumi.get(self, "source_mongodb_mongo_db_instance_type_mongo_db_atlas")

    @source_mongodb_mongo_db_instance_type_mongo_db_atlas.setter
    def source_mongodb_mongo_db_instance_type_mongo_db_atlas(self, value: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlasArgs']]):
        pulumi.set(self, "source_mongodb_mongo_db_instance_type_mongo_db_atlas", value)

    @property
    @pulumi.getter(name="sourceMongodbMongoDbInstanceTypeReplicaSet")
    def source_mongodb_mongo_db_instance_type_replica_set(self) -> Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSetArgs']]:
        return pulumi.get(self, "source_mongodb_mongo_db_instance_type_replica_set")

    @source_mongodb_mongo_db_instance_type_replica_set.setter
    def source_mongodb_mongo_db_instance_type_replica_set(self, value: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSetArgs']]):
        pulumi.set(self, "source_mongodb_mongo_db_instance_type_replica_set", value)

    @property
    @pulumi.getter(name="sourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstance")
    def source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance(self) -> Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceArgs']]:
        return pulumi.get(self, "source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance")

    @source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance.setter
    def source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance(self, value: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceArgs']]):
        pulumi.set(self, "source_mongodb_mongo_db_instance_type_standalone_mongo_db_instance", value)

    @property
    @pulumi.getter(name="sourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlas")
    def source_mongodb_update_mongo_db_instance_type_mongo_db_atlas(self) -> Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlasArgs']]:
        return pulumi.get(self, "source_mongodb_update_mongo_db_instance_type_mongo_db_atlas")

    @source_mongodb_update_mongo_db_instance_type_mongo_db_atlas.setter
    def source_mongodb_update_mongo_db_instance_type_mongo_db_atlas(self, value: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlasArgs']]):
        pulumi.set(self, "source_mongodb_update_mongo_db_instance_type_mongo_db_atlas", value)

    @property
    @pulumi.getter(name="sourceMongodbUpdateMongoDbInstanceTypeReplicaSet")
    def source_mongodb_update_mongo_db_instance_type_replica_set(self) -> Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSetArgs']]:
        return pulumi.get(self, "source_mongodb_update_mongo_db_instance_type_replica_set")

    @source_mongodb_update_mongo_db_instance_type_replica_set.setter
    def source_mongodb_update_mongo_db_instance_type_replica_set(self, value: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSetArgs']]):
        pulumi.set(self, "source_mongodb_update_mongo_db_instance_type_replica_set", value)

    @property
    @pulumi.getter(name="sourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstance")
    def source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance(self) -> Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceArgs']]:
        return pulumi.get(self, "source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance")

    @source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance.setter
    def source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance(self, value: Optional[pulumi.Input['SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceArgs']]):
        pulumi.set(self, "source_mongodb_update_mongo_db_instance_type_standalone_mongo_db_instance", value)


@pulumi.input_type
class SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeMongoDbAtlasArgs:
    def __init__(__self__, *,
                 cluster_url: pulumi.Input[str],
                 instance: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "instance", instance)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter
    def instance(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeReplicaSetArgs:
    def __init__(__self__, *,
                 instance: pulumi.Input[str],
                 server_addresses: pulumi.Input[str],
                 replica_set: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "server_addresses", server_addresses)
        if replica_set is not None:
            pulumi.set(__self__, "replica_set", replica_set)

    @property
    @pulumi.getter
    def instance(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="serverAddresses")
    def server_addresses(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_addresses")

    @server_addresses.setter
    def server_addresses(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_addresses", value)

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_set")

    @replica_set.setter
    def replica_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_set", value)


@pulumi.input_type
class SourceMongodbConfigurationInstanceTypeSourceMongodbMongoDbInstanceTypeStandaloneMongoDbInstanceArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 instance: pulumi.Input[str],
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def instance(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeMongoDbAtlasArgs:
    def __init__(__self__, *,
                 cluster_url: pulumi.Input[str],
                 instance: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "cluster_url", cluster_url)
        pulumi.set(__self__, "instance", instance)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="clusterUrl")
    def cluster_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_url")

    @cluster_url.setter
    def cluster_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_url", value)

    @property
    @pulumi.getter
    def instance(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeReplicaSetArgs:
    def __init__(__self__, *,
                 instance: pulumi.Input[str],
                 server_addresses: pulumi.Input[str],
                 replica_set: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "server_addresses", server_addresses)
        if replica_set is not None:
            pulumi.set(__self__, "replica_set", replica_set)

    @property
    @pulumi.getter
    def instance(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter(name="serverAddresses")
    def server_addresses(self) -> pulumi.Input[str]:
        return pulumi.get(self, "server_addresses")

    @server_addresses.setter
    def server_addresses(self, value: pulumi.Input[str]):
        pulumi.set(self, "server_addresses", value)

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_set")

    @replica_set.setter
    def replica_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_set", value)


@pulumi.input_type
class SourceMongodbConfigurationInstanceTypeSourceMongodbUpdateMongoDbInstanceTypeStandaloneMongoDbInstanceArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 instance: pulumi.Input[str],
                 port: pulumi.Input[int]):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "instance", instance)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def instance(self) -> pulumi.Input[str]:
        return pulumi.get(self, "instance")

    @instance.setter
    def instance(self, value: pulumi.Input[str]):
        pulumi.set(self, "instance", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)


@pulumi.input_type
class SourceMongodbInternalPocConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 auth_source: Optional[pulumi.Input[str]] = None,
                 connection_string: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 replica_set: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        if auth_source is not None:
            pulumi.set(__self__, "auth_source", auth_source)
        if connection_string is not None:
            pulumi.set(__self__, "connection_string", connection_string)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if replica_set is not None:
            pulumi.set(__self__, "replica_set", replica_set)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="authSource")
    def auth_source(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_source")

    @auth_source.setter
    def auth_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_source", value)

    @property
    @pulumi.getter(name="connectionString")
    def connection_string(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_string")

    @connection_string.setter
    def connection_string(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_string", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "replica_set")

    @replica_set.setter
    def replica_set(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "replica_set", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class SourceMssqlConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 source_type: pulumi.Input[str],
                 username: pulumi.Input[str],
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 replication_method: Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodArgs']] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_method: Optional[pulumi.Input['SourceMssqlConfigurationSslMethodArgs']] = None,
                 tunnel_method: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if replication_method is not None:
            pulumi.set(__self__, "replication_method", replication_method)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if ssl_method is not None:
            pulumi.set(__self__, "ssl_method", ssl_method)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="replicationMethod")
    def replication_method(self) -> Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodArgs']]:
        return pulumi.get(self, "replication_method")

    @replication_method.setter
    def replication_method(self, value: Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodArgs']]):
        pulumi.set(self, "replication_method", value)

    @property
    @pulumi.getter
    def schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "schemas", value)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> Optional[pulumi.Input['SourceMssqlConfigurationSslMethodArgs']]:
        return pulumi.get(self, "ssl_method")

    @ssl_method.setter
    def ssl_method(self, value: Optional[pulumi.Input['SourceMssqlConfigurationSslMethodArgs']]):
        pulumi.set(self, "ssl_method", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceMssqlConfigurationReplicationMethodArgs:
    def __init__(__self__, *,
                 source_mssql_replication_method_logical_replication_cdc: Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdcArgs']] = None,
                 source_mssql_replication_method_standard: Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandardArgs']] = None,
                 source_mssql_update_replication_method_logical_replication_cdc: Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdcArgs']] = None,
                 source_mssql_update_replication_method_standard: Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandardArgs']] = None):
        if source_mssql_replication_method_logical_replication_cdc is not None:
            pulumi.set(__self__, "source_mssql_replication_method_logical_replication_cdc", source_mssql_replication_method_logical_replication_cdc)
        if source_mssql_replication_method_standard is not None:
            pulumi.set(__self__, "source_mssql_replication_method_standard", source_mssql_replication_method_standard)
        if source_mssql_update_replication_method_logical_replication_cdc is not None:
            pulumi.set(__self__, "source_mssql_update_replication_method_logical_replication_cdc", source_mssql_update_replication_method_logical_replication_cdc)
        if source_mssql_update_replication_method_standard is not None:
            pulumi.set(__self__, "source_mssql_update_replication_method_standard", source_mssql_update_replication_method_standard)

    @property
    @pulumi.getter(name="sourceMssqlReplicationMethodLogicalReplicationCdc")
    def source_mssql_replication_method_logical_replication_cdc(self) -> Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdcArgs']]:
        return pulumi.get(self, "source_mssql_replication_method_logical_replication_cdc")

    @source_mssql_replication_method_logical_replication_cdc.setter
    def source_mssql_replication_method_logical_replication_cdc(self, value: Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdcArgs']]):
        pulumi.set(self, "source_mssql_replication_method_logical_replication_cdc", value)

    @property
    @pulumi.getter(name="sourceMssqlReplicationMethodStandard")
    def source_mssql_replication_method_standard(self) -> Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandardArgs']]:
        return pulumi.get(self, "source_mssql_replication_method_standard")

    @source_mssql_replication_method_standard.setter
    def source_mssql_replication_method_standard(self, value: Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandardArgs']]):
        pulumi.set(self, "source_mssql_replication_method_standard", value)

    @property
    @pulumi.getter(name="sourceMssqlUpdateReplicationMethodLogicalReplicationCdc")
    def source_mssql_update_replication_method_logical_replication_cdc(self) -> Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdcArgs']]:
        return pulumi.get(self, "source_mssql_update_replication_method_logical_replication_cdc")

    @source_mssql_update_replication_method_logical_replication_cdc.setter
    def source_mssql_update_replication_method_logical_replication_cdc(self, value: Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdcArgs']]):
        pulumi.set(self, "source_mssql_update_replication_method_logical_replication_cdc", value)

    @property
    @pulumi.getter(name="sourceMssqlUpdateReplicationMethodStandard")
    def source_mssql_update_replication_method_standard(self) -> Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandardArgs']]:
        return pulumi.get(self, "source_mssql_update_replication_method_standard")

    @source_mssql_update_replication_method_standard.setter
    def source_mssql_update_replication_method_standard(self, value: Optional[pulumi.Input['SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandardArgs']]):
        pulumi.set(self, "source_mssql_update_replication_method_standard", value)


@pulumi.input_type
class SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodLogicalReplicationCdcArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 data_to_sync: Optional[pulumi.Input[str]] = None,
                 initial_waiting_seconds: Optional[pulumi.Input[int]] = None,
                 snapshot_isolation: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "method", method)
        if data_to_sync is not None:
            pulumi.set(__self__, "data_to_sync", data_to_sync)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if snapshot_isolation is not None:
            pulumi.set(__self__, "snapshot_isolation", snapshot_isolation)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="dataToSync")
    def data_to_sync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_to_sync")

    @data_to_sync.setter
    def data_to_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_to_sync", value)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_waiting_seconds")

    @initial_waiting_seconds.setter
    def initial_waiting_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_waiting_seconds", value)

    @property
    @pulumi.getter(name="snapshotIsolation")
    def snapshot_isolation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_isolation")

    @snapshot_isolation.setter
    def snapshot_isolation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_isolation", value)


@pulumi.input_type
class SourceMssqlConfigurationReplicationMethodSourceMssqlReplicationMethodStandardArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodLogicalReplicationCdcArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 data_to_sync: Optional[pulumi.Input[str]] = None,
                 initial_waiting_seconds: Optional[pulumi.Input[int]] = None,
                 snapshot_isolation: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "method", method)
        if data_to_sync is not None:
            pulumi.set(__self__, "data_to_sync", data_to_sync)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if snapshot_isolation is not None:
            pulumi.set(__self__, "snapshot_isolation", snapshot_isolation)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="dataToSync")
    def data_to_sync(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "data_to_sync")

    @data_to_sync.setter
    def data_to_sync(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_to_sync", value)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_waiting_seconds")

    @initial_waiting_seconds.setter
    def initial_waiting_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_waiting_seconds", value)

    @property
    @pulumi.getter(name="snapshotIsolation")
    def snapshot_isolation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "snapshot_isolation")

    @snapshot_isolation.setter
    def snapshot_isolation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "snapshot_isolation", value)


@pulumi.input_type
class SourceMssqlConfigurationReplicationMethodSourceMssqlUpdateReplicationMethodStandardArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class SourceMssqlConfigurationSslMethodArgs:
    def __init__(__self__, *,
                 source_mssql_ssl_method_encrypted_trust_server_certificate: Optional[pulumi.Input['SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificateArgs']] = None,
                 source_mssql_ssl_method_encrypted_verify_certificate: Optional[pulumi.Input['SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificateArgs']] = None,
                 source_mssql_update_ssl_method_encrypted_trust_server_certificate: Optional[pulumi.Input['SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificateArgs']] = None,
                 source_mssql_update_ssl_method_encrypted_verify_certificate: Optional[pulumi.Input['SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificateArgs']] = None):
        if source_mssql_ssl_method_encrypted_trust_server_certificate is not None:
            pulumi.set(__self__, "source_mssql_ssl_method_encrypted_trust_server_certificate", source_mssql_ssl_method_encrypted_trust_server_certificate)
        if source_mssql_ssl_method_encrypted_verify_certificate is not None:
            pulumi.set(__self__, "source_mssql_ssl_method_encrypted_verify_certificate", source_mssql_ssl_method_encrypted_verify_certificate)
        if source_mssql_update_ssl_method_encrypted_trust_server_certificate is not None:
            pulumi.set(__self__, "source_mssql_update_ssl_method_encrypted_trust_server_certificate", source_mssql_update_ssl_method_encrypted_trust_server_certificate)
        if source_mssql_update_ssl_method_encrypted_verify_certificate is not None:
            pulumi.set(__self__, "source_mssql_update_ssl_method_encrypted_verify_certificate", source_mssql_update_ssl_method_encrypted_verify_certificate)

    @property
    @pulumi.getter(name="sourceMssqlSslMethodEncryptedTrustServerCertificate")
    def source_mssql_ssl_method_encrypted_trust_server_certificate(self) -> Optional[pulumi.Input['SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificateArgs']]:
        return pulumi.get(self, "source_mssql_ssl_method_encrypted_trust_server_certificate")

    @source_mssql_ssl_method_encrypted_trust_server_certificate.setter
    def source_mssql_ssl_method_encrypted_trust_server_certificate(self, value: Optional[pulumi.Input['SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificateArgs']]):
        pulumi.set(self, "source_mssql_ssl_method_encrypted_trust_server_certificate", value)

    @property
    @pulumi.getter(name="sourceMssqlSslMethodEncryptedVerifyCertificate")
    def source_mssql_ssl_method_encrypted_verify_certificate(self) -> Optional[pulumi.Input['SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificateArgs']]:
        return pulumi.get(self, "source_mssql_ssl_method_encrypted_verify_certificate")

    @source_mssql_ssl_method_encrypted_verify_certificate.setter
    def source_mssql_ssl_method_encrypted_verify_certificate(self, value: Optional[pulumi.Input['SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificateArgs']]):
        pulumi.set(self, "source_mssql_ssl_method_encrypted_verify_certificate", value)

    @property
    @pulumi.getter(name="sourceMssqlUpdateSslMethodEncryptedTrustServerCertificate")
    def source_mssql_update_ssl_method_encrypted_trust_server_certificate(self) -> Optional[pulumi.Input['SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificateArgs']]:
        return pulumi.get(self, "source_mssql_update_ssl_method_encrypted_trust_server_certificate")

    @source_mssql_update_ssl_method_encrypted_trust_server_certificate.setter
    def source_mssql_update_ssl_method_encrypted_trust_server_certificate(self, value: Optional[pulumi.Input['SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificateArgs']]):
        pulumi.set(self, "source_mssql_update_ssl_method_encrypted_trust_server_certificate", value)

    @property
    @pulumi.getter(name="sourceMssqlUpdateSslMethodEncryptedVerifyCertificate")
    def source_mssql_update_ssl_method_encrypted_verify_certificate(self) -> Optional[pulumi.Input['SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificateArgs']]:
        return pulumi.get(self, "source_mssql_update_ssl_method_encrypted_verify_certificate")

    @source_mssql_update_ssl_method_encrypted_verify_certificate.setter
    def source_mssql_update_ssl_method_encrypted_verify_certificate(self, value: Optional[pulumi.Input['SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificateArgs']]):
        pulumi.set(self, "source_mssql_update_ssl_method_encrypted_verify_certificate", value)


@pulumi.input_type
class SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedTrustServerCertificateArgs:
    def __init__(__self__, *,
                 ssl_method: pulumi.Input[str]):
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssl_method")

    @ssl_method.setter
    def ssl_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssl_method", value)


@pulumi.input_type
class SourceMssqlConfigurationSslMethodSourceMssqlSslMethodEncryptedVerifyCertificateArgs:
    def __init__(__self__, *,
                 ssl_method: pulumi.Input[str],
                 host_name_in_certificate: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ssl_method", ssl_method)
        if host_name_in_certificate is not None:
            pulumi.set(__self__, "host_name_in_certificate", host_name_in_certificate)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssl_method")

    @ssl_method.setter
    def ssl_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssl_method", value)

    @property
    @pulumi.getter(name="hostNameInCertificate")
    def host_name_in_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_name_in_certificate")

    @host_name_in_certificate.setter
    def host_name_in_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name_in_certificate", value)


@pulumi.input_type
class SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedTrustServerCertificateArgs:
    def __init__(__self__, *,
                 ssl_method: pulumi.Input[str]):
        pulumi.set(__self__, "ssl_method", ssl_method)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssl_method")

    @ssl_method.setter
    def ssl_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssl_method", value)


@pulumi.input_type
class SourceMssqlConfigurationSslMethodSourceMssqlUpdateSslMethodEncryptedVerifyCertificateArgs:
    def __init__(__self__, *,
                 ssl_method: pulumi.Input[str],
                 host_name_in_certificate: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ssl_method", ssl_method)
        if host_name_in_certificate is not None:
            pulumi.set(__self__, "host_name_in_certificate", host_name_in_certificate)

    @property
    @pulumi.getter(name="sslMethod")
    def ssl_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssl_method")

    @ssl_method.setter
    def ssl_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssl_method", value)

    @property
    @pulumi.getter(name="hostNameInCertificate")
    def host_name_in_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "host_name_in_certificate")

    @host_name_in_certificate.setter
    def host_name_in_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host_name_in_certificate", value)


@pulumi.input_type
class SourceMssqlConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 source_mssql_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnelArgs']] = None,
                 source_mssql_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 source_mssql_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 source_mssql_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 source_mssql_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 source_mssql_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if source_mssql_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_mssql_ssh_tunnel_method_no_tunnel", source_mssql_ssh_tunnel_method_no_tunnel)
        if source_mssql_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_mssql_ssh_tunnel_method_password_authentication", source_mssql_ssh_tunnel_method_password_authentication)
        if source_mssql_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_mssql_ssh_tunnel_method_ssh_key_authentication", source_mssql_ssh_tunnel_method_ssh_key_authentication)
        if source_mssql_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_mssql_update_ssh_tunnel_method_no_tunnel", source_mssql_update_ssh_tunnel_method_no_tunnel)
        if source_mssql_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_mssql_update_ssh_tunnel_method_password_authentication", source_mssql_update_ssh_tunnel_method_password_authentication)
        if source_mssql_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_mssql_update_ssh_tunnel_method_ssh_key_authentication", source_mssql_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceMssqlSshTunnelMethodNoTunnel")
    def source_mssql_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "source_mssql_ssh_tunnel_method_no_tunnel")

    @source_mssql_ssh_tunnel_method_no_tunnel.setter
    def source_mssql_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "source_mssql_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="sourceMssqlSshTunnelMethodPasswordAuthentication")
    def source_mssql_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_mssql_ssh_tunnel_method_password_authentication")

    @source_mssql_ssh_tunnel_method_password_authentication.setter
    def source_mssql_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_mssql_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="sourceMssqlSshTunnelMethodSshKeyAuthentication")
    def source_mssql_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_mssql_ssh_tunnel_method_ssh_key_authentication")

    @source_mssql_ssh_tunnel_method_ssh_key_authentication.setter
    def source_mssql_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_mssql_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="sourceMssqlUpdateSshTunnelMethodNoTunnel")
    def source_mssql_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "source_mssql_update_ssh_tunnel_method_no_tunnel")

    @source_mssql_update_ssh_tunnel_method_no_tunnel.setter
    def source_mssql_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "source_mssql_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="sourceMssqlUpdateSshTunnelMethodPasswordAuthentication")
    def source_mssql_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_mssql_update_ssh_tunnel_method_password_authentication")

    @source_mssql_update_ssh_tunnel_method_password_authentication.setter
    def source_mssql_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_mssql_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="sourceMssqlUpdateSshTunnelMethodSshKeyAuthentication")
    def source_mssql_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_mssql_update_ssh_tunnel_method_ssh_key_authentication")

    @source_mssql_update_ssh_tunnel_method_ssh_key_authentication.setter
    def source_mssql_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_mssql_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class SourceMssqlConfigurationTunnelMethodSourceMssqlSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class SourceMssqlConfigurationTunnelMethodSourceMssqlUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class SourceMyHoursConfigurationArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 password: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 logs_batch_size: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if logs_batch_size is not None:
            pulumi.set(__self__, "logs_batch_size", logs_batch_size)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="logsBatchSize")
    def logs_batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "logs_batch_size")

    @logs_batch_size.setter
    def logs_batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "logs_batch_size", value)


@pulumi.input_type
class SourceMysqlConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 replication_method: pulumi.Input['SourceMysqlConfigurationReplicationMethodArgs'],
                 source_type: pulumi.Input[str],
                 username: pulumi.Input[str],
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 ssl_mode: Optional[pulumi.Input['SourceMysqlConfigurationSslModeArgs']] = None,
                 tunnel_method: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "replication_method", replication_method)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="replicationMethod")
    def replication_method(self) -> pulumi.Input['SourceMysqlConfigurationReplicationMethodArgs']:
        return pulumi.get(self, "replication_method")

    @replication_method.setter
    def replication_method(self, value: pulumi.Input['SourceMysqlConfigurationReplicationMethodArgs']):
        pulumi.set(self, "replication_method", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input['SourceMysqlConfigurationSslModeArgs']]:
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input['SourceMysqlConfigurationSslModeArgs']]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceMysqlConfigurationReplicationMethodArgs:
    def __init__(__self__, *,
                 source_mysql_update_method_read_changes_using_binary_log_cdc: Optional[pulumi.Input['SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdcArgs']] = None,
                 source_mysql_update_method_scan_changes_with_user_defined_cursor: Optional[pulumi.Input['SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursorArgs']] = None,
                 source_mysql_update_update_method_read_changes_using_binary_log_cdc: Optional[pulumi.Input['SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdcArgs']] = None,
                 source_mysql_update_update_method_scan_changes_with_user_defined_cursor: Optional[pulumi.Input['SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursorArgs']] = None):
        if source_mysql_update_method_read_changes_using_binary_log_cdc is not None:
            pulumi.set(__self__, "source_mysql_update_method_read_changes_using_binary_log_cdc", source_mysql_update_method_read_changes_using_binary_log_cdc)
        if source_mysql_update_method_scan_changes_with_user_defined_cursor is not None:
            pulumi.set(__self__, "source_mysql_update_method_scan_changes_with_user_defined_cursor", source_mysql_update_method_scan_changes_with_user_defined_cursor)
        if source_mysql_update_update_method_read_changes_using_binary_log_cdc is not None:
            pulumi.set(__self__, "source_mysql_update_update_method_read_changes_using_binary_log_cdc", source_mysql_update_update_method_read_changes_using_binary_log_cdc)
        if source_mysql_update_update_method_scan_changes_with_user_defined_cursor is not None:
            pulumi.set(__self__, "source_mysql_update_update_method_scan_changes_with_user_defined_cursor", source_mysql_update_update_method_scan_changes_with_user_defined_cursor)

    @property
    @pulumi.getter(name="sourceMysqlUpdateMethodReadChangesUsingBinaryLogCdc")
    def source_mysql_update_method_read_changes_using_binary_log_cdc(self) -> Optional[pulumi.Input['SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdcArgs']]:
        return pulumi.get(self, "source_mysql_update_method_read_changes_using_binary_log_cdc")

    @source_mysql_update_method_read_changes_using_binary_log_cdc.setter
    def source_mysql_update_method_read_changes_using_binary_log_cdc(self, value: Optional[pulumi.Input['SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdcArgs']]):
        pulumi.set(self, "source_mysql_update_method_read_changes_using_binary_log_cdc", value)

    @property
    @pulumi.getter(name="sourceMysqlUpdateMethodScanChangesWithUserDefinedCursor")
    def source_mysql_update_method_scan_changes_with_user_defined_cursor(self) -> Optional[pulumi.Input['SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursorArgs']]:
        return pulumi.get(self, "source_mysql_update_method_scan_changes_with_user_defined_cursor")

    @source_mysql_update_method_scan_changes_with_user_defined_cursor.setter
    def source_mysql_update_method_scan_changes_with_user_defined_cursor(self, value: Optional[pulumi.Input['SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursorArgs']]):
        pulumi.set(self, "source_mysql_update_method_scan_changes_with_user_defined_cursor", value)

    @property
    @pulumi.getter(name="sourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdc")
    def source_mysql_update_update_method_read_changes_using_binary_log_cdc(self) -> Optional[pulumi.Input['SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdcArgs']]:
        return pulumi.get(self, "source_mysql_update_update_method_read_changes_using_binary_log_cdc")

    @source_mysql_update_update_method_read_changes_using_binary_log_cdc.setter
    def source_mysql_update_update_method_read_changes_using_binary_log_cdc(self, value: Optional[pulumi.Input['SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdcArgs']]):
        pulumi.set(self, "source_mysql_update_update_method_read_changes_using_binary_log_cdc", value)

    @property
    @pulumi.getter(name="sourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursor")
    def source_mysql_update_update_method_scan_changes_with_user_defined_cursor(self) -> Optional[pulumi.Input['SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursorArgs']]:
        return pulumi.get(self, "source_mysql_update_update_method_scan_changes_with_user_defined_cursor")

    @source_mysql_update_update_method_scan_changes_with_user_defined_cursor.setter
    def source_mysql_update_update_method_scan_changes_with_user_defined_cursor(self, value: Optional[pulumi.Input['SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursorArgs']]):
        pulumi.set(self, "source_mysql_update_update_method_scan_changes_with_user_defined_cursor", value)


@pulumi.input_type
class SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodReadChangesUsingBinaryLogCdcArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 initial_waiting_seconds: Optional[pulumi.Input[int]] = None,
                 server_time_zone: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "method", method)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if server_time_zone is not None:
            pulumi.set(__self__, "server_time_zone", server_time_zone)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_waiting_seconds")

    @initial_waiting_seconds.setter
    def initial_waiting_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_waiting_seconds", value)

    @property
    @pulumi.getter(name="serverTimeZone")
    def server_time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_time_zone")

    @server_time_zone.setter
    def server_time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_time_zone", value)


@pulumi.input_type
class SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateMethodScanChangesWithUserDefinedCursorArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodReadChangesUsingBinaryLogCdcArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 initial_waiting_seconds: Optional[pulumi.Input[int]] = None,
                 server_time_zone: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "method", method)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if server_time_zone is not None:
            pulumi.set(__self__, "server_time_zone", server_time_zone)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_waiting_seconds")

    @initial_waiting_seconds.setter
    def initial_waiting_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_waiting_seconds", value)

    @property
    @pulumi.getter(name="serverTimeZone")
    def server_time_zone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "server_time_zone")

    @server_time_zone.setter
    def server_time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_time_zone", value)


@pulumi.input_type
class SourceMysqlConfigurationReplicationMethodSourceMysqlUpdateUpdateMethodScanChangesWithUserDefinedCursorArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class SourceMysqlConfigurationSslModeArgs:
    def __init__(__self__, *,
                 source_mysql_ssl_modes_preferred: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlSslModesPreferredArgs']] = None,
                 source_mysql_ssl_modes_required: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlSslModesRequiredArgs']] = None,
                 source_mysql_ssl_modes_verify_ca: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCaArgs']] = None,
                 source_mysql_ssl_modes_verify_identity: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentityArgs']] = None,
                 source_mysql_update_ssl_modes_preferred: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferredArgs']] = None,
                 source_mysql_update_ssl_modes_required: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequiredArgs']] = None,
                 source_mysql_update_ssl_modes_verify_ca: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCaArgs']] = None,
                 source_mysql_update_ssl_modes_verify_identity: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentityArgs']] = None):
        if source_mysql_ssl_modes_preferred is not None:
            pulumi.set(__self__, "source_mysql_ssl_modes_preferred", source_mysql_ssl_modes_preferred)
        if source_mysql_ssl_modes_required is not None:
            pulumi.set(__self__, "source_mysql_ssl_modes_required", source_mysql_ssl_modes_required)
        if source_mysql_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "source_mysql_ssl_modes_verify_ca", source_mysql_ssl_modes_verify_ca)
        if source_mysql_ssl_modes_verify_identity is not None:
            pulumi.set(__self__, "source_mysql_ssl_modes_verify_identity", source_mysql_ssl_modes_verify_identity)
        if source_mysql_update_ssl_modes_preferred is not None:
            pulumi.set(__self__, "source_mysql_update_ssl_modes_preferred", source_mysql_update_ssl_modes_preferred)
        if source_mysql_update_ssl_modes_required is not None:
            pulumi.set(__self__, "source_mysql_update_ssl_modes_required", source_mysql_update_ssl_modes_required)
        if source_mysql_update_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "source_mysql_update_ssl_modes_verify_ca", source_mysql_update_ssl_modes_verify_ca)
        if source_mysql_update_ssl_modes_verify_identity is not None:
            pulumi.set(__self__, "source_mysql_update_ssl_modes_verify_identity", source_mysql_update_ssl_modes_verify_identity)

    @property
    @pulumi.getter(name="sourceMysqlSslModesPreferred")
    def source_mysql_ssl_modes_preferred(self) -> Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlSslModesPreferredArgs']]:
        return pulumi.get(self, "source_mysql_ssl_modes_preferred")

    @source_mysql_ssl_modes_preferred.setter
    def source_mysql_ssl_modes_preferred(self, value: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlSslModesPreferredArgs']]):
        pulumi.set(self, "source_mysql_ssl_modes_preferred", value)

    @property
    @pulumi.getter(name="sourceMysqlSslModesRequired")
    def source_mysql_ssl_modes_required(self) -> Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlSslModesRequiredArgs']]:
        return pulumi.get(self, "source_mysql_ssl_modes_required")

    @source_mysql_ssl_modes_required.setter
    def source_mysql_ssl_modes_required(self, value: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlSslModesRequiredArgs']]):
        pulumi.set(self, "source_mysql_ssl_modes_required", value)

    @property
    @pulumi.getter(name="sourceMysqlSslModesVerifyCa")
    def source_mysql_ssl_modes_verify_ca(self) -> Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCaArgs']]:
        return pulumi.get(self, "source_mysql_ssl_modes_verify_ca")

    @source_mysql_ssl_modes_verify_ca.setter
    def source_mysql_ssl_modes_verify_ca(self, value: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCaArgs']]):
        pulumi.set(self, "source_mysql_ssl_modes_verify_ca", value)

    @property
    @pulumi.getter(name="sourceMysqlSslModesVerifyIdentity")
    def source_mysql_ssl_modes_verify_identity(self) -> Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentityArgs']]:
        return pulumi.get(self, "source_mysql_ssl_modes_verify_identity")

    @source_mysql_ssl_modes_verify_identity.setter
    def source_mysql_ssl_modes_verify_identity(self, value: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentityArgs']]):
        pulumi.set(self, "source_mysql_ssl_modes_verify_identity", value)

    @property
    @pulumi.getter(name="sourceMysqlUpdateSslModesPreferred")
    def source_mysql_update_ssl_modes_preferred(self) -> Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferredArgs']]:
        return pulumi.get(self, "source_mysql_update_ssl_modes_preferred")

    @source_mysql_update_ssl_modes_preferred.setter
    def source_mysql_update_ssl_modes_preferred(self, value: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferredArgs']]):
        pulumi.set(self, "source_mysql_update_ssl_modes_preferred", value)

    @property
    @pulumi.getter(name="sourceMysqlUpdateSslModesRequired")
    def source_mysql_update_ssl_modes_required(self) -> Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequiredArgs']]:
        return pulumi.get(self, "source_mysql_update_ssl_modes_required")

    @source_mysql_update_ssl_modes_required.setter
    def source_mysql_update_ssl_modes_required(self, value: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequiredArgs']]):
        pulumi.set(self, "source_mysql_update_ssl_modes_required", value)

    @property
    @pulumi.getter(name="sourceMysqlUpdateSslModesVerifyCa")
    def source_mysql_update_ssl_modes_verify_ca(self) -> Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCaArgs']]:
        return pulumi.get(self, "source_mysql_update_ssl_modes_verify_ca")

    @source_mysql_update_ssl_modes_verify_ca.setter
    def source_mysql_update_ssl_modes_verify_ca(self, value: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCaArgs']]):
        pulumi.set(self, "source_mysql_update_ssl_modes_verify_ca", value)

    @property
    @pulumi.getter(name="sourceMysqlUpdateSslModesVerifyIdentity")
    def source_mysql_update_ssl_modes_verify_identity(self) -> Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentityArgs']]:
        return pulumi.get(self, "source_mysql_update_ssl_modes_verify_identity")

    @source_mysql_update_ssl_modes_verify_identity.setter
    def source_mysql_update_ssl_modes_verify_identity(self, value: Optional[pulumi.Input['SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentityArgs']]):
        pulumi.set(self, "source_mysql_update_ssl_modes_verify_identity", value)


@pulumi.input_type
class SourceMysqlConfigurationSslModeSourceMysqlSslModesPreferredArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SourceMysqlConfigurationSslModeSourceMysqlSslModesRequiredArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyCaArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class SourceMysqlConfigurationSslModeSourceMysqlSslModesVerifyIdentityArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesPreferredArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesRequiredArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str]):
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)


@pulumi.input_type
class SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyCaArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class SourceMysqlConfigurationSslModeSourceMysqlUpdateSslModesVerifyIdentityArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class SourceMysqlConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 source_mysql_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnelArgs']] = None,
                 source_mysql_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 source_mysql_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 source_mysql_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 source_mysql_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 source_mysql_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if source_mysql_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_mysql_ssh_tunnel_method_no_tunnel", source_mysql_ssh_tunnel_method_no_tunnel)
        if source_mysql_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_mysql_ssh_tunnel_method_password_authentication", source_mysql_ssh_tunnel_method_password_authentication)
        if source_mysql_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_mysql_ssh_tunnel_method_ssh_key_authentication", source_mysql_ssh_tunnel_method_ssh_key_authentication)
        if source_mysql_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_mysql_update_ssh_tunnel_method_no_tunnel", source_mysql_update_ssh_tunnel_method_no_tunnel)
        if source_mysql_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_mysql_update_ssh_tunnel_method_password_authentication", source_mysql_update_ssh_tunnel_method_password_authentication)
        if source_mysql_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_mysql_update_ssh_tunnel_method_ssh_key_authentication", source_mysql_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceMysqlSshTunnelMethodNoTunnel")
    def source_mysql_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "source_mysql_ssh_tunnel_method_no_tunnel")

    @source_mysql_ssh_tunnel_method_no_tunnel.setter
    def source_mysql_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "source_mysql_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="sourceMysqlSshTunnelMethodPasswordAuthentication")
    def source_mysql_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_mysql_ssh_tunnel_method_password_authentication")

    @source_mysql_ssh_tunnel_method_password_authentication.setter
    def source_mysql_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_mysql_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="sourceMysqlSshTunnelMethodSshKeyAuthentication")
    def source_mysql_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_mysql_ssh_tunnel_method_ssh_key_authentication")

    @source_mysql_ssh_tunnel_method_ssh_key_authentication.setter
    def source_mysql_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_mysql_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="sourceMysqlUpdateSshTunnelMethodNoTunnel")
    def source_mysql_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "source_mysql_update_ssh_tunnel_method_no_tunnel")

    @source_mysql_update_ssh_tunnel_method_no_tunnel.setter
    def source_mysql_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "source_mysql_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="sourceMysqlUpdateSshTunnelMethodPasswordAuthentication")
    def source_mysql_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_mysql_update_ssh_tunnel_method_password_authentication")

    @source_mysql_update_ssh_tunnel_method_password_authentication.setter
    def source_mysql_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_mysql_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="sourceMysqlUpdateSshTunnelMethodSshKeyAuthentication")
    def source_mysql_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_mysql_update_ssh_tunnel_method_ssh_key_authentication")

    @source_mysql_update_ssh_tunnel_method_ssh_key_authentication.setter
    def source_mysql_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_mysql_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class SourceMysqlConfigurationTunnelMethodSourceMysqlSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class SourceMysqlConfigurationTunnelMethodSourceMysqlUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class SourceNetsuiteConfigurationArgs:
    def __init__(__self__, *,
                 consumer_key: pulumi.Input[str],
                 consumer_secret: pulumi.Input[str],
                 realm: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_datetime: pulumi.Input[str],
                 token_key: pulumi.Input[str],
                 token_secret: pulumi.Input[str],
                 object_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 window_in_days: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "consumer_key", consumer_key)
        pulumi.set(__self__, "consumer_secret", consumer_secret)
        pulumi.set(__self__, "realm", realm)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_datetime", start_datetime)
        pulumi.set(__self__, "token_key", token_key)
        pulumi.set(__self__, "token_secret", token_secret)
        if object_types is not None:
            pulumi.set(__self__, "object_types", object_types)
        if window_in_days is not None:
            pulumi.set(__self__, "window_in_days", window_in_days)

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "consumer_key")

    @consumer_key.setter
    def consumer_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "consumer_key", value)

    @property
    @pulumi.getter(name="consumerSecret")
    def consumer_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "consumer_secret")

    @consumer_secret.setter
    def consumer_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "consumer_secret", value)

    @property
    @pulumi.getter
    def realm(self) -> pulumi.Input[str]:
        return pulumi.get(self, "realm")

    @realm.setter
    def realm(self, value: pulumi.Input[str]):
        pulumi.set(self, "realm", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDatetime")
    def start_datetime(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_datetime")

    @start_datetime.setter
    def start_datetime(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_datetime", value)

    @property
    @pulumi.getter(name="tokenKey")
    def token_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_key")

    @token_key.setter
    def token_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_key", value)

    @property
    @pulumi.getter(name="tokenSecret")
    def token_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_secret")

    @token_secret.setter
    def token_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_secret", value)

    @property
    @pulumi.getter(name="objectTypes")
    def object_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "object_types")

    @object_types.setter
    def object_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "object_types", value)

    @property
    @pulumi.getter(name="windowInDays")
    def window_in_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "window_in_days")

    @window_in_days.setter
    def window_in_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "window_in_days", value)


@pulumi.input_type
class SourceNotionConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceNotionConfigurationCredentialsArgs']] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceNotionConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceNotionConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceNotionConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_notion_authenticate_using_access_token: Optional[pulumi.Input['SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessTokenArgs']] = None,
                 source_notion_authenticate_using_o_auth20: Optional[pulumi.Input['SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20Args']] = None,
                 source_notion_update_authenticate_using_access_token: Optional[pulumi.Input['SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessTokenArgs']] = None,
                 source_notion_update_authenticate_using_o_auth20: Optional[pulumi.Input['SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20Args']] = None):
        if source_notion_authenticate_using_access_token is not None:
            pulumi.set(__self__, "source_notion_authenticate_using_access_token", source_notion_authenticate_using_access_token)
        if source_notion_authenticate_using_o_auth20 is not None:
            pulumi.set(__self__, "source_notion_authenticate_using_o_auth20", source_notion_authenticate_using_o_auth20)
        if source_notion_update_authenticate_using_access_token is not None:
            pulumi.set(__self__, "source_notion_update_authenticate_using_access_token", source_notion_update_authenticate_using_access_token)
        if source_notion_update_authenticate_using_o_auth20 is not None:
            pulumi.set(__self__, "source_notion_update_authenticate_using_o_auth20", source_notion_update_authenticate_using_o_auth20)

    @property
    @pulumi.getter(name="sourceNotionAuthenticateUsingAccessToken")
    def source_notion_authenticate_using_access_token(self) -> Optional[pulumi.Input['SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessTokenArgs']]:
        return pulumi.get(self, "source_notion_authenticate_using_access_token")

    @source_notion_authenticate_using_access_token.setter
    def source_notion_authenticate_using_access_token(self, value: Optional[pulumi.Input['SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessTokenArgs']]):
        pulumi.set(self, "source_notion_authenticate_using_access_token", value)

    @property
    @pulumi.getter(name="sourceNotionAuthenticateUsingOAuth20")
    def source_notion_authenticate_using_o_auth20(self) -> Optional[pulumi.Input['SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20Args']]:
        return pulumi.get(self, "source_notion_authenticate_using_o_auth20")

    @source_notion_authenticate_using_o_auth20.setter
    def source_notion_authenticate_using_o_auth20(self, value: Optional[pulumi.Input['SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20Args']]):
        pulumi.set(self, "source_notion_authenticate_using_o_auth20", value)

    @property
    @pulumi.getter(name="sourceNotionUpdateAuthenticateUsingAccessToken")
    def source_notion_update_authenticate_using_access_token(self) -> Optional[pulumi.Input['SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessTokenArgs']]:
        return pulumi.get(self, "source_notion_update_authenticate_using_access_token")

    @source_notion_update_authenticate_using_access_token.setter
    def source_notion_update_authenticate_using_access_token(self, value: Optional[pulumi.Input['SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessTokenArgs']]):
        pulumi.set(self, "source_notion_update_authenticate_using_access_token", value)

    @property
    @pulumi.getter(name="sourceNotionUpdateAuthenticateUsingOAuth20")
    def source_notion_update_authenticate_using_o_auth20(self) -> Optional[pulumi.Input['SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20Args']]:
        return pulumi.get(self, "source_notion_update_authenticate_using_o_auth20")

    @source_notion_update_authenticate_using_o_auth20.setter
    def source_notion_update_authenticate_using_o_auth20(self, value: Optional[pulumi.Input['SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20Args']]):
        pulumi.set(self, "source_notion_update_authenticate_using_o_auth20", value)


@pulumi.input_type
class SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingAccessTokenArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 token: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class SourceNotionConfigurationCredentialsSourceNotionAuthenticateUsingOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingAccessTokenArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 token: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class SourceNotionConfigurationCredentialsSourceNotionUpdateAuthenticateUsingOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceNytimesConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 period: pulumi.Input[int],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 end_date: Optional[pulumi.Input[str]] = None,
                 share_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "period", period)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if share_type is not None:
            pulumi.set(__self__, "share_type", share_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def period(self) -> pulumi.Input[int]:
        return pulumi.get(self, "period")

    @period.setter
    def period(self, value: pulumi.Input[int]):
        pulumi.set(self, "period", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="shareType")
    def share_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "share_type")

    @share_type.setter
    def share_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "share_type", value)


@pulumi.input_type
class SourceOktaConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceOktaConfigurationCredentialsArgs']] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceOktaConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceOktaConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceOktaConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_okta_authorization_method_api_token: Optional[pulumi.Input['SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiTokenArgs']] = None,
                 source_okta_authorization_method_o_auth20: Optional[pulumi.Input['SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20Args']] = None,
                 source_okta_update_authorization_method_api_token: Optional[pulumi.Input['SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiTokenArgs']] = None,
                 source_okta_update_authorization_method_o_auth20: Optional[pulumi.Input['SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20Args']] = None):
        if source_okta_authorization_method_api_token is not None:
            pulumi.set(__self__, "source_okta_authorization_method_api_token", source_okta_authorization_method_api_token)
        if source_okta_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_okta_authorization_method_o_auth20", source_okta_authorization_method_o_auth20)
        if source_okta_update_authorization_method_api_token is not None:
            pulumi.set(__self__, "source_okta_update_authorization_method_api_token", source_okta_update_authorization_method_api_token)
        if source_okta_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_okta_update_authorization_method_o_auth20", source_okta_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceOktaAuthorizationMethodApiToken")
    def source_okta_authorization_method_api_token(self) -> Optional[pulumi.Input['SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiTokenArgs']]:
        return pulumi.get(self, "source_okta_authorization_method_api_token")

    @source_okta_authorization_method_api_token.setter
    def source_okta_authorization_method_api_token(self, value: Optional[pulumi.Input['SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiTokenArgs']]):
        pulumi.set(self, "source_okta_authorization_method_api_token", value)

    @property
    @pulumi.getter(name="sourceOktaAuthorizationMethodOAuth20")
    def source_okta_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_okta_authorization_method_o_auth20")

    @source_okta_authorization_method_o_auth20.setter
    def source_okta_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_okta_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceOktaUpdateAuthorizationMethodApiToken")
    def source_okta_update_authorization_method_api_token(self) -> Optional[pulumi.Input['SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiTokenArgs']]:
        return pulumi.get(self, "source_okta_update_authorization_method_api_token")

    @source_okta_update_authorization_method_api_token.setter
    def source_okta_update_authorization_method_api_token(self, value: Optional[pulumi.Input['SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiTokenArgs']]):
        pulumi.set(self, "source_okta_update_authorization_method_api_token", value)

    @property
    @pulumi.getter(name="sourceOktaUpdateAuthorizationMethodOAuth20")
    def source_okta_update_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_okta_update_authorization_method_o_auth20")

    @source_okta_update_authorization_method_o_auth20.setter
    def source_okta_update_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_okta_update_authorization_method_o_auth20", value)


@pulumi.input_type
class SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodApiTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceOktaConfigurationCredentialsSourceOktaAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodApiTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceOktaConfigurationCredentialsSourceOktaUpdateAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class SourceOmnisendConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceOnesignalConfigurationArgs:
    def __init__(__self__, *,
                 applications: pulumi.Input[Sequence[pulumi.Input['SourceOnesignalConfigurationApplicationArgs']]],
                 outcome_names: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 user_auth_key: pulumi.Input[str]):
        pulumi.set(__self__, "applications", applications)
        pulumi.set(__self__, "outcome_names", outcome_names)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "user_auth_key", user_auth_key)

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Input[Sequence[pulumi.Input['SourceOnesignalConfigurationApplicationArgs']]]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: pulumi.Input[Sequence[pulumi.Input['SourceOnesignalConfigurationApplicationArgs']]]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter(name="outcomeNames")
    def outcome_names(self) -> pulumi.Input[str]:
        return pulumi.get(self, "outcome_names")

    @outcome_names.setter
    def outcome_names(self, value: pulumi.Input[str]):
        pulumi.set(self, "outcome_names", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="userAuthKey")
    def user_auth_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_auth_key")

    @user_auth_key.setter
    def user_auth_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_auth_key", value)


@pulumi.input_type
class SourceOnesignalConfigurationApplicationArgs:
    def __init__(__self__, *,
                 app_api_key: pulumi.Input[str],
                 app_id: pulumi.Input[str],
                 app_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "app_api_key", app_api_key)
        pulumi.set(__self__, "app_id", app_id)
        if app_name is not None:
            pulumi.set(__self__, "app_name", app_name)

    @property
    @pulumi.getter(name="appApiKey")
    def app_api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_api_key")

    @app_api_key.setter
    def app_api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_api_key", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_name", value)


@pulumi.input_type
class SourceOpenweatherConfigurationArgs:
    def __init__(__self__, *,
                 appid: pulumi.Input[str],
                 lat: pulumi.Input[str],
                 lon: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 lang: Optional[pulumi.Input[str]] = None,
                 units: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "appid", appid)
        pulumi.set(__self__, "lat", lat)
        pulumi.set(__self__, "lon", lon)
        pulumi.set(__self__, "source_type", source_type)
        if lang is not None:
            pulumi.set(__self__, "lang", lang)
        if units is not None:
            pulumi.set(__self__, "units", units)

    @property
    @pulumi.getter
    def appid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "appid")

    @appid.setter
    def appid(self, value: pulumi.Input[str]):
        pulumi.set(self, "appid", value)

    @property
    @pulumi.getter
    def lat(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lat")

    @lat.setter
    def lat(self, value: pulumi.Input[str]):
        pulumi.set(self, "lat", value)

    @property
    @pulumi.getter
    def lon(self) -> pulumi.Input[str]:
        return pulumi.get(self, "lon")

    @lon.setter
    def lon(self, value: pulumi.Input[str]):
        pulumi.set(self, "lon", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def lang(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lang")

    @lang.setter
    def lang(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lang", value)

    @property
    @pulumi.getter
    def units(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "units")

    @units.setter
    def units(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "units", value)


@pulumi.input_type
class SourceOracleConfigurationArgs:
    def __init__(__self__, *,
                 encryption: pulumi.Input['SourceOracleConfigurationEncryptionArgs'],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 source_type: pulumi.Input[str],
                 username: pulumi.Input[str],
                 connection_data: Optional[pulumi.Input['SourceOracleConfigurationConnectionDataArgs']] = None,
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 tunnel_method: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "encryption", encryption)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if connection_data is not None:
            pulumi.set(__self__, "connection_data", connection_data)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def encryption(self) -> pulumi.Input['SourceOracleConfigurationEncryptionArgs']:
        return pulumi.get(self, "encryption")

    @encryption.setter
    def encryption(self, value: pulumi.Input['SourceOracleConfigurationEncryptionArgs']):
        pulumi.set(self, "encryption", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="connectionData")
    def connection_data(self) -> Optional[pulumi.Input['SourceOracleConfigurationConnectionDataArgs']]:
        return pulumi.get(self, "connection_data")

    @connection_data.setter
    def connection_data(self, value: Optional[pulumi.Input['SourceOracleConfigurationConnectionDataArgs']]):
        pulumi.set(self, "connection_data", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "schemas", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceOracleConfigurationConnectionDataArgs:
    def __init__(__self__, *,
                 source_oracle_connect_by_service_name: Optional[pulumi.Input['SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceNameArgs']] = None,
                 source_oracle_connect_by_system_id_sid: Optional[pulumi.Input['SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSidArgs']] = None,
                 source_oracle_update_connect_by_service_name: Optional[pulumi.Input['SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceNameArgs']] = None,
                 source_oracle_update_connect_by_system_id_sid: Optional[pulumi.Input['SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSidArgs']] = None):
        if source_oracle_connect_by_service_name is not None:
            pulumi.set(__self__, "source_oracle_connect_by_service_name", source_oracle_connect_by_service_name)
        if source_oracle_connect_by_system_id_sid is not None:
            pulumi.set(__self__, "source_oracle_connect_by_system_id_sid", source_oracle_connect_by_system_id_sid)
        if source_oracle_update_connect_by_service_name is not None:
            pulumi.set(__self__, "source_oracle_update_connect_by_service_name", source_oracle_update_connect_by_service_name)
        if source_oracle_update_connect_by_system_id_sid is not None:
            pulumi.set(__self__, "source_oracle_update_connect_by_system_id_sid", source_oracle_update_connect_by_system_id_sid)

    @property
    @pulumi.getter(name="sourceOracleConnectByServiceName")
    def source_oracle_connect_by_service_name(self) -> Optional[pulumi.Input['SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceNameArgs']]:
        return pulumi.get(self, "source_oracle_connect_by_service_name")

    @source_oracle_connect_by_service_name.setter
    def source_oracle_connect_by_service_name(self, value: Optional[pulumi.Input['SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceNameArgs']]):
        pulumi.set(self, "source_oracle_connect_by_service_name", value)

    @property
    @pulumi.getter(name="sourceOracleConnectBySystemIdSid")
    def source_oracle_connect_by_system_id_sid(self) -> Optional[pulumi.Input['SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSidArgs']]:
        return pulumi.get(self, "source_oracle_connect_by_system_id_sid")

    @source_oracle_connect_by_system_id_sid.setter
    def source_oracle_connect_by_system_id_sid(self, value: Optional[pulumi.Input['SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSidArgs']]):
        pulumi.set(self, "source_oracle_connect_by_system_id_sid", value)

    @property
    @pulumi.getter(name="sourceOracleUpdateConnectByServiceName")
    def source_oracle_update_connect_by_service_name(self) -> Optional[pulumi.Input['SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceNameArgs']]:
        return pulumi.get(self, "source_oracle_update_connect_by_service_name")

    @source_oracle_update_connect_by_service_name.setter
    def source_oracle_update_connect_by_service_name(self, value: Optional[pulumi.Input['SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceNameArgs']]):
        pulumi.set(self, "source_oracle_update_connect_by_service_name", value)

    @property
    @pulumi.getter(name="sourceOracleUpdateConnectBySystemIdSid")
    def source_oracle_update_connect_by_system_id_sid(self) -> Optional[pulumi.Input['SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSidArgs']]:
        return pulumi.get(self, "source_oracle_update_connect_by_system_id_sid")

    @source_oracle_update_connect_by_system_id_sid.setter
    def source_oracle_update_connect_by_system_id_sid(self, value: Optional[pulumi.Input['SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSidArgs']]):
        pulumi.set(self, "source_oracle_update_connect_by_system_id_sid", value)


@pulumi.input_type
class SourceOracleConfigurationConnectionDataSourceOracleConnectByServiceNameArgs:
    def __init__(__self__, *,
                 service_name: pulumi.Input[str],
                 connection_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "service_name", service_name)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_type", value)


@pulumi.input_type
class SourceOracleConfigurationConnectionDataSourceOracleConnectBySystemIdSidArgs:
    def __init__(__self__, *,
                 sid: pulumi.Input[str],
                 connection_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sid", sid)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)

    @property
    @pulumi.getter
    def sid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sid")

    @sid.setter
    def sid(self, value: pulumi.Input[str]):
        pulumi.set(self, "sid", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_type", value)


@pulumi.input_type
class SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectByServiceNameArgs:
    def __init__(__self__, *,
                 service_name: pulumi.Input[str],
                 connection_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "service_name", service_name)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_name")

    @service_name.setter
    def service_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_name", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_type", value)


@pulumi.input_type
class SourceOracleConfigurationConnectionDataSourceOracleUpdateConnectBySystemIdSidArgs:
    def __init__(__self__, *,
                 sid: pulumi.Input[str],
                 connection_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "sid", sid)
        if connection_type is not None:
            pulumi.set(__self__, "connection_type", connection_type)

    @property
    @pulumi.getter
    def sid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "sid")

    @sid.setter
    def sid(self, value: pulumi.Input[str]):
        pulumi.set(self, "sid", value)

    @property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "connection_type")

    @connection_type.setter
    def connection_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connection_type", value)


@pulumi.input_type
class SourceOracleConfigurationEncryptionArgs:
    def __init__(__self__, *,
                 source_oracle_encryption_native_network_encryption_nne: Optional[pulumi.Input['SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNneArgs']] = None,
                 source_oracle_encryption_tls_encrypted_verify_certificate: Optional[pulumi.Input['SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificateArgs']] = None,
                 source_oracle_update_encryption_native_network_encryption_nne: Optional[pulumi.Input['SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNneArgs']] = None,
                 source_oracle_update_encryption_tls_encrypted_verify_certificate: Optional[pulumi.Input['SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificateArgs']] = None):
        if source_oracle_encryption_native_network_encryption_nne is not None:
            pulumi.set(__self__, "source_oracle_encryption_native_network_encryption_nne", source_oracle_encryption_native_network_encryption_nne)
        if source_oracle_encryption_tls_encrypted_verify_certificate is not None:
            pulumi.set(__self__, "source_oracle_encryption_tls_encrypted_verify_certificate", source_oracle_encryption_tls_encrypted_verify_certificate)
        if source_oracle_update_encryption_native_network_encryption_nne is not None:
            pulumi.set(__self__, "source_oracle_update_encryption_native_network_encryption_nne", source_oracle_update_encryption_native_network_encryption_nne)
        if source_oracle_update_encryption_tls_encrypted_verify_certificate is not None:
            pulumi.set(__self__, "source_oracle_update_encryption_tls_encrypted_verify_certificate", source_oracle_update_encryption_tls_encrypted_verify_certificate)

    @property
    @pulumi.getter(name="sourceOracleEncryptionNativeNetworkEncryptionNne")
    def source_oracle_encryption_native_network_encryption_nne(self) -> Optional[pulumi.Input['SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNneArgs']]:
        return pulumi.get(self, "source_oracle_encryption_native_network_encryption_nne")

    @source_oracle_encryption_native_network_encryption_nne.setter
    def source_oracle_encryption_native_network_encryption_nne(self, value: Optional[pulumi.Input['SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNneArgs']]):
        pulumi.set(self, "source_oracle_encryption_native_network_encryption_nne", value)

    @property
    @pulumi.getter(name="sourceOracleEncryptionTlsEncryptedVerifyCertificate")
    def source_oracle_encryption_tls_encrypted_verify_certificate(self) -> Optional[pulumi.Input['SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificateArgs']]:
        return pulumi.get(self, "source_oracle_encryption_tls_encrypted_verify_certificate")

    @source_oracle_encryption_tls_encrypted_verify_certificate.setter
    def source_oracle_encryption_tls_encrypted_verify_certificate(self, value: Optional[pulumi.Input['SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificateArgs']]):
        pulumi.set(self, "source_oracle_encryption_tls_encrypted_verify_certificate", value)

    @property
    @pulumi.getter(name="sourceOracleUpdateEncryptionNativeNetworkEncryptionNne")
    def source_oracle_update_encryption_native_network_encryption_nne(self) -> Optional[pulumi.Input['SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNneArgs']]:
        return pulumi.get(self, "source_oracle_update_encryption_native_network_encryption_nne")

    @source_oracle_update_encryption_native_network_encryption_nne.setter
    def source_oracle_update_encryption_native_network_encryption_nne(self, value: Optional[pulumi.Input['SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNneArgs']]):
        pulumi.set(self, "source_oracle_update_encryption_native_network_encryption_nne", value)

    @property
    @pulumi.getter(name="sourceOracleUpdateEncryptionTlsEncryptedVerifyCertificate")
    def source_oracle_update_encryption_tls_encrypted_verify_certificate(self) -> Optional[pulumi.Input['SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificateArgs']]:
        return pulumi.get(self, "source_oracle_update_encryption_tls_encrypted_verify_certificate")

    @source_oracle_update_encryption_tls_encrypted_verify_certificate.setter
    def source_oracle_update_encryption_tls_encrypted_verify_certificate(self, value: Optional[pulumi.Input['SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificateArgs']]):
        pulumi.set(self, "source_oracle_update_encryption_tls_encrypted_verify_certificate", value)


@pulumi.input_type
class SourceOracleConfigurationEncryptionSourceOracleEncryptionNativeNetworkEncryptionNneArgs:
    def __init__(__self__, *,
                 encryption_method: pulumi.Input[str],
                 encryption_algorithm: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "encryption_method", encryption_method)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)

    @property
    @pulumi.getter(name="encryptionMethod")
    def encryption_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "encryption_method")

    @encryption_method.setter
    def encryption_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "encryption_method", value)

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_algorithm", value)


@pulumi.input_type
class SourceOracleConfigurationEncryptionSourceOracleEncryptionTlsEncryptedVerifyCertificateArgs:
    def __init__(__self__, *,
                 encryption_method: pulumi.Input[str],
                 ssl_certificate: pulumi.Input[str]):
        pulumi.set(__self__, "encryption_method", encryption_method)
        pulumi.set(__self__, "ssl_certificate", ssl_certificate)

    @property
    @pulumi.getter(name="encryptionMethod")
    def encryption_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "encryption_method")

    @encryption_method.setter
    def encryption_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "encryption_method", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssl_certificate", value)


@pulumi.input_type
class SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionNativeNetworkEncryptionNneArgs:
    def __init__(__self__, *,
                 encryption_method: pulumi.Input[str],
                 encryption_algorithm: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "encryption_method", encryption_method)
        if encryption_algorithm is not None:
            pulumi.set(__self__, "encryption_algorithm", encryption_algorithm)

    @property
    @pulumi.getter(name="encryptionMethod")
    def encryption_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "encryption_method")

    @encryption_method.setter
    def encryption_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "encryption_method", value)

    @property
    @pulumi.getter(name="encryptionAlgorithm")
    def encryption_algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encryption_algorithm")

    @encryption_algorithm.setter
    def encryption_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encryption_algorithm", value)


@pulumi.input_type
class SourceOracleConfigurationEncryptionSourceOracleUpdateEncryptionTlsEncryptedVerifyCertificateArgs:
    def __init__(__self__, *,
                 encryption_method: pulumi.Input[str],
                 ssl_certificate: pulumi.Input[str]):
        pulumi.set(__self__, "encryption_method", encryption_method)
        pulumi.set(__self__, "ssl_certificate", ssl_certificate)

    @property
    @pulumi.getter(name="encryptionMethod")
    def encryption_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "encryption_method")

    @encryption_method.setter
    def encryption_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "encryption_method", value)

    @property
    @pulumi.getter(name="sslCertificate")
    def ssl_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssl_certificate")

    @ssl_certificate.setter
    def ssl_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssl_certificate", value)


@pulumi.input_type
class SourceOracleConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 source_oracle_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnelArgs']] = None,
                 source_oracle_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 source_oracle_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 source_oracle_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 source_oracle_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 source_oracle_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if source_oracle_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_oracle_ssh_tunnel_method_no_tunnel", source_oracle_ssh_tunnel_method_no_tunnel)
        if source_oracle_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_oracle_ssh_tunnel_method_password_authentication", source_oracle_ssh_tunnel_method_password_authentication)
        if source_oracle_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_oracle_ssh_tunnel_method_ssh_key_authentication", source_oracle_ssh_tunnel_method_ssh_key_authentication)
        if source_oracle_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_oracle_update_ssh_tunnel_method_no_tunnel", source_oracle_update_ssh_tunnel_method_no_tunnel)
        if source_oracle_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_oracle_update_ssh_tunnel_method_password_authentication", source_oracle_update_ssh_tunnel_method_password_authentication)
        if source_oracle_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_oracle_update_ssh_tunnel_method_ssh_key_authentication", source_oracle_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceOracleSshTunnelMethodNoTunnel")
    def source_oracle_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "source_oracle_ssh_tunnel_method_no_tunnel")

    @source_oracle_ssh_tunnel_method_no_tunnel.setter
    def source_oracle_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "source_oracle_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="sourceOracleSshTunnelMethodPasswordAuthentication")
    def source_oracle_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_oracle_ssh_tunnel_method_password_authentication")

    @source_oracle_ssh_tunnel_method_password_authentication.setter
    def source_oracle_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_oracle_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="sourceOracleSshTunnelMethodSshKeyAuthentication")
    def source_oracle_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_oracle_ssh_tunnel_method_ssh_key_authentication")

    @source_oracle_ssh_tunnel_method_ssh_key_authentication.setter
    def source_oracle_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_oracle_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="sourceOracleUpdateSshTunnelMethodNoTunnel")
    def source_oracle_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "source_oracle_update_ssh_tunnel_method_no_tunnel")

    @source_oracle_update_ssh_tunnel_method_no_tunnel.setter
    def source_oracle_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "source_oracle_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="sourceOracleUpdateSshTunnelMethodPasswordAuthentication")
    def source_oracle_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_oracle_update_ssh_tunnel_method_password_authentication")

    @source_oracle_update_ssh_tunnel_method_password_authentication.setter
    def source_oracle_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_oracle_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="sourceOracleUpdateSshTunnelMethodSshKeyAuthentication")
    def source_oracle_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_oracle_update_ssh_tunnel_method_ssh_key_authentication")

    @source_oracle_update_ssh_tunnel_method_ssh_key_authentication.setter
    def source_oracle_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_oracle_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class SourceOracleConfigurationTunnelMethodSourceOracleSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class SourceOracleConfigurationTunnelMethodSourceOracleUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class SourceOrbConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 lookback_window_days: Optional[pulumi.Input[int]] = None,
                 numeric_event_properties_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 plan_id: Optional[pulumi.Input[str]] = None,
                 string_event_properties_keys: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 subscription_usage_grouping_key: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if lookback_window_days is not None:
            pulumi.set(__self__, "lookback_window_days", lookback_window_days)
        if numeric_event_properties_keys is not None:
            pulumi.set(__self__, "numeric_event_properties_keys", numeric_event_properties_keys)
        if plan_id is not None:
            pulumi.set(__self__, "plan_id", plan_id)
        if string_event_properties_keys is not None:
            pulumi.set(__self__, "string_event_properties_keys", string_event_properties_keys)
        if subscription_usage_grouping_key is not None:
            pulumi.set(__self__, "subscription_usage_grouping_key", subscription_usage_grouping_key)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="lookbackWindowDays")
    def lookback_window_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lookback_window_days")

    @lookback_window_days.setter
    def lookback_window_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lookback_window_days", value)

    @property
    @pulumi.getter(name="numericEventPropertiesKeys")
    def numeric_event_properties_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "numeric_event_properties_keys")

    @numeric_event_properties_keys.setter
    def numeric_event_properties_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "numeric_event_properties_keys", value)

    @property
    @pulumi.getter(name="planId")
    def plan_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plan_id")

    @plan_id.setter
    def plan_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plan_id", value)

    @property
    @pulumi.getter(name="stringEventPropertiesKeys")
    def string_event_properties_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "string_event_properties_keys")

    @string_event_properties_keys.setter
    def string_event_properties_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "string_event_properties_keys", value)

    @property
    @pulumi.getter(name="subscriptionUsageGroupingKey")
    def subscription_usage_grouping_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subscription_usage_grouping_key")

    @subscription_usage_grouping_key.setter
    def subscription_usage_grouping_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subscription_usage_grouping_key", value)


@pulumi.input_type
class SourceOrbitConfigurationArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 workspace: pulumi.Input[str],
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "workspace", workspace)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Input[str]:
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: pulumi.Input[str]):
        pulumi.set(self, "workspace", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceOutbrainAmplifyConfigurationArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsArgs'],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 end_date: Optional[pulumi.Input[str]] = None,
                 geo_location_breakdown: Optional[pulumi.Input[str]] = None,
                 report_granularity: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if geo_location_breakdown is not None:
            pulumi.set(__self__, "geo_location_breakdown", geo_location_breakdown)
        if report_granularity is not None:
            pulumi.set(__self__, "report_granularity", report_granularity)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="geoLocationBreakdown")
    def geo_location_breakdown(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "geo_location_breakdown")

    @geo_location_breakdown.setter
    def geo_location_breakdown(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "geo_location_breakdown", value)

    @property
    @pulumi.getter(name="reportGranularity")
    def report_granularity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "report_granularity")

    @report_granularity.setter
    def report_granularity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "report_granularity", value)


@pulumi.input_type
class SourceOutbrainAmplifyConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_outbrain_amplify_authentication_method_access_token: Optional[pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessTokenArgs']] = None,
                 source_outbrain_amplify_authentication_method_username_password: Optional[pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePasswordArgs']] = None,
                 source_outbrain_amplify_update_authentication_method_access_token: Optional[pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenArgs']] = None,
                 source_outbrain_amplify_update_authentication_method_username_password: Optional[pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordArgs']] = None):
        if source_outbrain_amplify_authentication_method_access_token is not None:
            pulumi.set(__self__, "source_outbrain_amplify_authentication_method_access_token", source_outbrain_amplify_authentication_method_access_token)
        if source_outbrain_amplify_authentication_method_username_password is not None:
            pulumi.set(__self__, "source_outbrain_amplify_authentication_method_username_password", source_outbrain_amplify_authentication_method_username_password)
        if source_outbrain_amplify_update_authentication_method_access_token is not None:
            pulumi.set(__self__, "source_outbrain_amplify_update_authentication_method_access_token", source_outbrain_amplify_update_authentication_method_access_token)
        if source_outbrain_amplify_update_authentication_method_username_password is not None:
            pulumi.set(__self__, "source_outbrain_amplify_update_authentication_method_username_password", source_outbrain_amplify_update_authentication_method_username_password)

    @property
    @pulumi.getter(name="sourceOutbrainAmplifyAuthenticationMethodAccessToken")
    def source_outbrain_amplify_authentication_method_access_token(self) -> Optional[pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessTokenArgs']]:
        return pulumi.get(self, "source_outbrain_amplify_authentication_method_access_token")

    @source_outbrain_amplify_authentication_method_access_token.setter
    def source_outbrain_amplify_authentication_method_access_token(self, value: Optional[pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessTokenArgs']]):
        pulumi.set(self, "source_outbrain_amplify_authentication_method_access_token", value)

    @property
    @pulumi.getter(name="sourceOutbrainAmplifyAuthenticationMethodUsernamePassword")
    def source_outbrain_amplify_authentication_method_username_password(self) -> Optional[pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePasswordArgs']]:
        return pulumi.get(self, "source_outbrain_amplify_authentication_method_username_password")

    @source_outbrain_amplify_authentication_method_username_password.setter
    def source_outbrain_amplify_authentication_method_username_password(self, value: Optional[pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePasswordArgs']]):
        pulumi.set(self, "source_outbrain_amplify_authentication_method_username_password", value)

    @property
    @pulumi.getter(name="sourceOutbrainAmplifyUpdateAuthenticationMethodAccessToken")
    def source_outbrain_amplify_update_authentication_method_access_token(self) -> Optional[pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenArgs']]:
        return pulumi.get(self, "source_outbrain_amplify_update_authentication_method_access_token")

    @source_outbrain_amplify_update_authentication_method_access_token.setter
    def source_outbrain_amplify_update_authentication_method_access_token(self, value: Optional[pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenArgs']]):
        pulumi.set(self, "source_outbrain_amplify_update_authentication_method_access_token", value)

    @property
    @pulumi.getter(name="sourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePassword")
    def source_outbrain_amplify_update_authentication_method_username_password(self) -> Optional[pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordArgs']]:
        return pulumi.get(self, "source_outbrain_amplify_update_authentication_method_username_password")

    @source_outbrain_amplify_update_authentication_method_username_password.setter
    def source_outbrain_amplify_update_authentication_method_username_password(self, value: Optional[pulumi.Input['SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordArgs']]):
        pulumi.set(self, "source_outbrain_amplify_update_authentication_method_username_password", value)


@pulumi.input_type
class SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyAuthenticationMethodUsernamePasswordArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 type: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class SourceOutbrainAmplifyConfigurationCredentialsSourceOutbrainAmplifyUpdateAuthenticationMethodUsernamePasswordArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 type: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class SourceOutreachConfigurationArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 redirect_uri: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "redirect_uri", redirect_uri)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="redirectUri")
    def redirect_uri(self) -> pulumi.Input[str]:
        return pulumi.get(self, "redirect_uri")

    @redirect_uri.setter
    def redirect_uri(self, value: pulumi.Input[str]):
        pulumi.set(self, "redirect_uri", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourcePaypalTransactionConfigurationArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 is_sandbox: pulumi.Input[bool],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 refresh_token: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "is_sandbox", is_sandbox)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="isSandbox")
    def is_sandbox(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_sandbox")

    @is_sandbox.setter
    def is_sandbox(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_sandbox", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class SourcePaystackConfigurationArgs:
    def __init__(__self__, *,
                 secret_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 lookback_window_days: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if lookback_window_days is not None:
            pulumi.set(__self__, "lookback_window_days", lookback_window_days)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="lookbackWindowDays")
    def lookback_window_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lookback_window_days")

    @lookback_window_days.setter
    def lookback_window_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lookback_window_days", value)


@pulumi.input_type
class SourcePendoConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourcePersistiqConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourcePexelsApiConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 query: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 color: Optional[pulumi.Input[str]] = None,
                 locale: Optional[pulumi.Input[str]] = None,
                 orientation: Optional[pulumi.Input[str]] = None,
                 size: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "source_type", source_type)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if locale is not None:
            pulumi.set(__self__, "locale", locale)
        if orientation is not None:
            pulumi.set(__self__, "orientation", orientation)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def locale(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locale")

    @locale.setter
    def locale(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locale", value)

    @property
    @pulumi.getter
    def orientation(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "orientation")

    @orientation.setter
    def orientation(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "orientation", value)

    @property
    @pulumi.getter
    def size(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "size", value)


@pulumi.input_type
class SourcePinterestConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourcePinterestConfigurationCredentialsArgs']] = None,
                 statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if statuses is not None:
            pulumi.set(__self__, "statuses", statuses)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourcePinterestConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourcePinterestConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "statuses")

    @statuses.setter
    def statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "statuses", value)


@pulumi.input_type
class SourcePinterestConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_pinterest_authorization_method_access_token: Optional[pulumi.Input['SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessTokenArgs']] = None,
                 source_pinterest_authorization_method_o_auth20: Optional[pulumi.Input['SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20Args']] = None,
                 source_pinterest_update_authorization_method_access_token: Optional[pulumi.Input['SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessTokenArgs']] = None,
                 source_pinterest_update_authorization_method_o_auth20: Optional[pulumi.Input['SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20Args']] = None):
        if source_pinterest_authorization_method_access_token is not None:
            pulumi.set(__self__, "source_pinterest_authorization_method_access_token", source_pinterest_authorization_method_access_token)
        if source_pinterest_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_pinterest_authorization_method_o_auth20", source_pinterest_authorization_method_o_auth20)
        if source_pinterest_update_authorization_method_access_token is not None:
            pulumi.set(__self__, "source_pinterest_update_authorization_method_access_token", source_pinterest_update_authorization_method_access_token)
        if source_pinterest_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_pinterest_update_authorization_method_o_auth20", source_pinterest_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourcePinterestAuthorizationMethodAccessToken")
    def source_pinterest_authorization_method_access_token(self) -> Optional[pulumi.Input['SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessTokenArgs']]:
        return pulumi.get(self, "source_pinterest_authorization_method_access_token")

    @source_pinterest_authorization_method_access_token.setter
    def source_pinterest_authorization_method_access_token(self, value: Optional[pulumi.Input['SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessTokenArgs']]):
        pulumi.set(self, "source_pinterest_authorization_method_access_token", value)

    @property
    @pulumi.getter(name="sourcePinterestAuthorizationMethodOAuth20")
    def source_pinterest_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_pinterest_authorization_method_o_auth20")

    @source_pinterest_authorization_method_o_auth20.setter
    def source_pinterest_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_pinterest_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourcePinterestUpdateAuthorizationMethodAccessToken")
    def source_pinterest_update_authorization_method_access_token(self) -> Optional[pulumi.Input['SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessTokenArgs']]:
        return pulumi.get(self, "source_pinterest_update_authorization_method_access_token")

    @source_pinterest_update_authorization_method_access_token.setter
    def source_pinterest_update_authorization_method_access_token(self, value: Optional[pulumi.Input['SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessTokenArgs']]):
        pulumi.set(self, "source_pinterest_update_authorization_method_access_token", value)

    @property
    @pulumi.getter(name="sourcePinterestUpdateAuthorizationMethodOAuth20")
    def source_pinterest_update_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_pinterest_update_authorization_method_o_auth20")

    @source_pinterest_update_authorization_method_o_auth20.setter
    def source_pinterest_update_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_pinterest_update_authorization_method_o_auth20", value)


@pulumi.input_type
class SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_method: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourcePinterestConfigurationCredentialsSourcePinterestAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 auth_method: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_method: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourcePinterestConfigurationCredentialsSourcePinterestUpdateAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 auth_method: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourcePipedriveConfigurationArgs:
    def __init__(__self__, *,
                 replication_start_date: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 authorization: Optional[pulumi.Input['SourcePipedriveConfigurationAuthorizationArgs']] = None):
        pulumi.set(__self__, "replication_start_date", replication_start_date)
        pulumi.set(__self__, "source_type", source_type)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)

    @property
    @pulumi.getter(name="replicationStartDate")
    def replication_start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "replication_start_date")

    @replication_start_date.setter
    def replication_start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "replication_start_date", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input['SourcePipedriveConfigurationAuthorizationArgs']]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input['SourcePipedriveConfigurationAuthorizationArgs']]):
        pulumi.set(self, "authorization", value)


@pulumi.input_type
class SourcePipedriveConfigurationAuthorizationArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourcePocketConfigurationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 consumer_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 content_type: Optional[pulumi.Input[str]] = None,
                 detail_type: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 favorite: Optional[pulumi.Input[bool]] = None,
                 search: Optional[pulumi.Input[str]] = None,
                 since: Optional[pulumi.Input[str]] = None,
                 sort: Optional[pulumi.Input[str]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "consumer_key", consumer_key)
        pulumi.set(__self__, "source_type", source_type)
        if content_type is not None:
            pulumi.set(__self__, "content_type", content_type)
        if detail_type is not None:
            pulumi.set(__self__, "detail_type", detail_type)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if favorite is not None:
            pulumi.set(__self__, "favorite", favorite)
        if search is not None:
            pulumi.set(__self__, "search", search)
        if since is not None:
            pulumi.set(__self__, "since", since)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="consumerKey")
    def consumer_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "consumer_key")

    @consumer_key.setter
    def consumer_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "consumer_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="contentType")
    def content_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "content_type")

    @content_type.setter
    def content_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content_type", value)

    @property
    @pulumi.getter(name="detailType")
    def detail_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detail_type")

    @detail_type.setter
    def detail_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detail_type", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter
    def favorite(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "favorite")

    @favorite.setter
    def favorite(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "favorite", value)

    @property
    @pulumi.getter
    def search(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "search")

    @search.setter
    def search(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "search", value)

    @property
    @pulumi.getter
    def since(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "since")

    @since.setter
    def since(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "since", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class SourcePokeapiConfigurationArgs:
    def __init__(__self__, *,
                 pokemon_name: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "pokemon_name", pokemon_name)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="pokemonName")
    def pokemon_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "pokemon_name")

    @pokemon_name.setter
    def pokemon_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "pokemon_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourcePolygonStockApiConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 end_date: pulumi.Input[str],
                 multiplier: pulumi.Input[int],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 stocks_ticker: pulumi.Input[str],
                 timespan: pulumi.Input[str],
                 adjusted: Optional[pulumi.Input[str]] = None,
                 limit: Optional[pulumi.Input[int]] = None,
                 sort: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "multiplier", multiplier)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "stocks_ticker", stocks_ticker)
        pulumi.set(__self__, "timespan", timespan)
        if adjusted is not None:
            pulumi.set(__self__, "adjusted", adjusted)
        if limit is not None:
            pulumi.set(__self__, "limit", limit)
        if sort is not None:
            pulumi.set(__self__, "sort", sort)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter
    def multiplier(self) -> pulumi.Input[int]:
        return pulumi.get(self, "multiplier")

    @multiplier.setter
    def multiplier(self, value: pulumi.Input[int]):
        pulumi.set(self, "multiplier", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="stocksTicker")
    def stocks_ticker(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stocks_ticker")

    @stocks_ticker.setter
    def stocks_ticker(self, value: pulumi.Input[str]):
        pulumi.set(self, "stocks_ticker", value)

    @property
    @pulumi.getter
    def timespan(self) -> pulumi.Input[str]:
        return pulumi.get(self, "timespan")

    @timespan.setter
    def timespan(self, value: pulumi.Input[str]):
        pulumi.set(self, "timespan", value)

    @property
    @pulumi.getter
    def adjusted(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "adjusted")

    @adjusted.setter
    def adjusted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "adjusted", value)

    @property
    @pulumi.getter
    def limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "limit")

    @limit.setter
    def limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "limit", value)

    @property
    @pulumi.getter
    def sort(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sort")

    @sort.setter
    def sort(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sort", value)


@pulumi.input_type
class SourcePostgresConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 source_type: pulumi.Input[str],
                 username: pulumi.Input[str],
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 replication_method: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodArgs']] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ssl_mode: Optional[pulumi.Input['SourcePostgresConfigurationSslModeArgs']] = None,
                 tunnel_method: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodArgs']] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if replication_method is not None:
            pulumi.set(__self__, "replication_method", replication_method)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)
        if ssl_mode is not None:
            pulumi.set(__self__, "ssl_mode", ssl_mode)
        if tunnel_method is not None:
            pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="replicationMethod")
    def replication_method(self) -> Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodArgs']]:
        return pulumi.get(self, "replication_method")

    @replication_method.setter
    def replication_method(self, value: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodArgs']]):
        pulumi.set(self, "replication_method", value)

    @property
    @pulumi.getter
    def schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "schemas", value)

    @property
    @pulumi.getter(name="sslMode")
    def ssl_mode(self) -> Optional[pulumi.Input['SourcePostgresConfigurationSslModeArgs']]:
        return pulumi.get(self, "ssl_mode")

    @ssl_mode.setter
    def ssl_mode(self, value: Optional[pulumi.Input['SourcePostgresConfigurationSslModeArgs']]):
        pulumi.set(self, "ssl_mode", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodArgs']]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodArgs']]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourcePostgresConfigurationReplicationMethodArgs:
    def __init__(__self__, *,
                 source_postgres_replication_method_logical_replication_cdc: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdcArgs']] = None,
                 source_postgres_replication_method_standard: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardArgs']] = None,
                 source_postgres_replication_method_standard_xmin: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXminArgs']] = None,
                 source_postgres_update_replication_method_logical_replication_cdc: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdcArgs']] = None,
                 source_postgres_update_replication_method_standard: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardArgs']] = None,
                 source_postgres_update_replication_method_standard_xmin: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXminArgs']] = None):
        if source_postgres_replication_method_logical_replication_cdc is not None:
            pulumi.set(__self__, "source_postgres_replication_method_logical_replication_cdc", source_postgres_replication_method_logical_replication_cdc)
        if source_postgres_replication_method_standard is not None:
            pulumi.set(__self__, "source_postgres_replication_method_standard", source_postgres_replication_method_standard)
        if source_postgres_replication_method_standard_xmin is not None:
            pulumi.set(__self__, "source_postgres_replication_method_standard_xmin", source_postgres_replication_method_standard_xmin)
        if source_postgres_update_replication_method_logical_replication_cdc is not None:
            pulumi.set(__self__, "source_postgres_update_replication_method_logical_replication_cdc", source_postgres_update_replication_method_logical_replication_cdc)
        if source_postgres_update_replication_method_standard is not None:
            pulumi.set(__self__, "source_postgres_update_replication_method_standard", source_postgres_update_replication_method_standard)
        if source_postgres_update_replication_method_standard_xmin is not None:
            pulumi.set(__self__, "source_postgres_update_replication_method_standard_xmin", source_postgres_update_replication_method_standard_xmin)

    @property
    @pulumi.getter(name="sourcePostgresReplicationMethodLogicalReplicationCdc")
    def source_postgres_replication_method_logical_replication_cdc(self) -> Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdcArgs']]:
        return pulumi.get(self, "source_postgres_replication_method_logical_replication_cdc")

    @source_postgres_replication_method_logical_replication_cdc.setter
    def source_postgres_replication_method_logical_replication_cdc(self, value: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdcArgs']]):
        pulumi.set(self, "source_postgres_replication_method_logical_replication_cdc", value)

    @property
    @pulumi.getter(name="sourcePostgresReplicationMethodStandard")
    def source_postgres_replication_method_standard(self) -> Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardArgs']]:
        return pulumi.get(self, "source_postgres_replication_method_standard")

    @source_postgres_replication_method_standard.setter
    def source_postgres_replication_method_standard(self, value: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardArgs']]):
        pulumi.set(self, "source_postgres_replication_method_standard", value)

    @property
    @pulumi.getter(name="sourcePostgresReplicationMethodStandardXmin")
    def source_postgres_replication_method_standard_xmin(self) -> Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXminArgs']]:
        return pulumi.get(self, "source_postgres_replication_method_standard_xmin")

    @source_postgres_replication_method_standard_xmin.setter
    def source_postgres_replication_method_standard_xmin(self, value: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXminArgs']]):
        pulumi.set(self, "source_postgres_replication_method_standard_xmin", value)

    @property
    @pulumi.getter(name="sourcePostgresUpdateReplicationMethodLogicalReplicationCdc")
    def source_postgres_update_replication_method_logical_replication_cdc(self) -> Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdcArgs']]:
        return pulumi.get(self, "source_postgres_update_replication_method_logical_replication_cdc")

    @source_postgres_update_replication_method_logical_replication_cdc.setter
    def source_postgres_update_replication_method_logical_replication_cdc(self, value: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdcArgs']]):
        pulumi.set(self, "source_postgres_update_replication_method_logical_replication_cdc", value)

    @property
    @pulumi.getter(name="sourcePostgresUpdateReplicationMethodStandard")
    def source_postgres_update_replication_method_standard(self) -> Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardArgs']]:
        return pulumi.get(self, "source_postgres_update_replication_method_standard")

    @source_postgres_update_replication_method_standard.setter
    def source_postgres_update_replication_method_standard(self, value: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardArgs']]):
        pulumi.set(self, "source_postgres_update_replication_method_standard", value)

    @property
    @pulumi.getter(name="sourcePostgresUpdateReplicationMethodStandardXmin")
    def source_postgres_update_replication_method_standard_xmin(self) -> Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXminArgs']]:
        return pulumi.get(self, "source_postgres_update_replication_method_standard_xmin")

    @source_postgres_update_replication_method_standard_xmin.setter
    def source_postgres_update_replication_method_standard_xmin(self, value: Optional[pulumi.Input['SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXminArgs']]):
        pulumi.set(self, "source_postgres_update_replication_method_standard_xmin", value)


@pulumi.input_type
class SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodLogicalReplicationCdcArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 publication: pulumi.Input[str],
                 replication_slot: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 initial_waiting_seconds: Optional[pulumi.Input[int]] = None,
                 lsn_commit_behaviour: Optional[pulumi.Input[str]] = None,
                 plugin: Optional[pulumi.Input[str]] = None,
                 queue_size: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "publication", publication)
        pulumi.set(__self__, "replication_slot", replication_slot)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if lsn_commit_behaviour is not None:
            pulumi.set(__self__, "lsn_commit_behaviour", lsn_commit_behaviour)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if queue_size is not None:
            pulumi.set(__self__, "queue_size", queue_size)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def publication(self) -> pulumi.Input[str]:
        return pulumi.get(self, "publication")

    @publication.setter
    def publication(self, value: pulumi.Input[str]):
        pulumi.set(self, "publication", value)

    @property
    @pulumi.getter(name="replicationSlot")
    def replication_slot(self) -> pulumi.Input[str]:
        return pulumi.get(self, "replication_slot")

    @replication_slot.setter
    def replication_slot(self, value: pulumi.Input[str]):
        pulumi.set(self, "replication_slot", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_waiting_seconds")

    @initial_waiting_seconds.setter
    def initial_waiting_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_waiting_seconds", value)

    @property
    @pulumi.getter(name="lsnCommitBehaviour")
    def lsn_commit_behaviour(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lsn_commit_behaviour")

    @lsn_commit_behaviour.setter
    def lsn_commit_behaviour(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lsn_commit_behaviour", value)

    @property
    @pulumi.getter
    def plugin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plugin")

    @plugin.setter
    def plugin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin", value)

    @property
    @pulumi.getter(name="queueSize")
    def queue_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "queue_size")

    @queue_size.setter
    def queue_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "queue_size", value)


@pulumi.input_type
class SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class SourcePostgresConfigurationReplicationMethodSourcePostgresReplicationMethodStandardXminArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodLogicalReplicationCdcArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str],
                 publication: pulumi.Input[str],
                 replication_slot: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 initial_waiting_seconds: Optional[pulumi.Input[int]] = None,
                 lsn_commit_behaviour: Optional[pulumi.Input[str]] = None,
                 plugin: Optional[pulumi.Input[str]] = None,
                 queue_size: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "publication", publication)
        pulumi.set(__self__, "replication_slot", replication_slot)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if initial_waiting_seconds is not None:
            pulumi.set(__self__, "initial_waiting_seconds", initial_waiting_seconds)
        if lsn_commit_behaviour is not None:
            pulumi.set(__self__, "lsn_commit_behaviour", lsn_commit_behaviour)
        if plugin is not None:
            pulumi.set(__self__, "plugin", plugin)
        if queue_size is not None:
            pulumi.set(__self__, "queue_size", queue_size)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def publication(self) -> pulumi.Input[str]:
        return pulumi.get(self, "publication")

    @publication.setter
    def publication(self, value: pulumi.Input[str]):
        pulumi.set(self, "publication", value)

    @property
    @pulumi.getter(name="replicationSlot")
    def replication_slot(self) -> pulumi.Input[str]:
        return pulumi.get(self, "replication_slot")

    @replication_slot.setter
    def replication_slot(self, value: pulumi.Input[str]):
        pulumi.set(self, "replication_slot", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="initialWaitingSeconds")
    def initial_waiting_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "initial_waiting_seconds")

    @initial_waiting_seconds.setter
    def initial_waiting_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "initial_waiting_seconds", value)

    @property
    @pulumi.getter(name="lsnCommitBehaviour")
    def lsn_commit_behaviour(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "lsn_commit_behaviour")

    @lsn_commit_behaviour.setter
    def lsn_commit_behaviour(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "lsn_commit_behaviour", value)

    @property
    @pulumi.getter
    def plugin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "plugin")

    @plugin.setter
    def plugin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plugin", value)

    @property
    @pulumi.getter(name="queueSize")
    def queue_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "queue_size")

    @queue_size.setter
    def queue_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "queue_size", value)


@pulumi.input_type
class SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class SourcePostgresConfigurationReplicationMethodSourcePostgresUpdateReplicationMethodStandardXminArgs:
    def __init__(__self__, *,
                 method: pulumi.Input[str]):
        pulumi.set(__self__, "method", method)

    @property
    @pulumi.getter
    def method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: pulumi.Input[str]):
        pulumi.set(self, "method", value)


@pulumi.input_type
class SourcePostgresConfigurationSslModeArgs:
    def __init__(__self__, *,
                 source_postgres_ssl_modes_allow: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesAllowArgs']] = None,
                 source_postgres_ssl_modes_disable: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesDisableArgs']] = None,
                 source_postgres_ssl_modes_prefer: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesPreferArgs']] = None,
                 source_postgres_ssl_modes_require: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesRequireArgs']] = None,
                 source_postgres_ssl_modes_verify_ca: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCaArgs']] = None,
                 source_postgres_ssl_modes_verify_full: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFullArgs']] = None,
                 source_postgres_update_ssl_modes_allow: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllowArgs']] = None,
                 source_postgres_update_ssl_modes_disable: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisableArgs']] = None,
                 source_postgres_update_ssl_modes_prefer: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPreferArgs']] = None,
                 source_postgres_update_ssl_modes_require: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequireArgs']] = None,
                 source_postgres_update_ssl_modes_verify_ca: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCaArgs']] = None,
                 source_postgres_update_ssl_modes_verify_full: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFullArgs']] = None):
        if source_postgres_ssl_modes_allow is not None:
            pulumi.set(__self__, "source_postgres_ssl_modes_allow", source_postgres_ssl_modes_allow)
        if source_postgres_ssl_modes_disable is not None:
            pulumi.set(__self__, "source_postgres_ssl_modes_disable", source_postgres_ssl_modes_disable)
        if source_postgres_ssl_modes_prefer is not None:
            pulumi.set(__self__, "source_postgres_ssl_modes_prefer", source_postgres_ssl_modes_prefer)
        if source_postgres_ssl_modes_require is not None:
            pulumi.set(__self__, "source_postgres_ssl_modes_require", source_postgres_ssl_modes_require)
        if source_postgres_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "source_postgres_ssl_modes_verify_ca", source_postgres_ssl_modes_verify_ca)
        if source_postgres_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "source_postgres_ssl_modes_verify_full", source_postgres_ssl_modes_verify_full)
        if source_postgres_update_ssl_modes_allow is not None:
            pulumi.set(__self__, "source_postgres_update_ssl_modes_allow", source_postgres_update_ssl_modes_allow)
        if source_postgres_update_ssl_modes_disable is not None:
            pulumi.set(__self__, "source_postgres_update_ssl_modes_disable", source_postgres_update_ssl_modes_disable)
        if source_postgres_update_ssl_modes_prefer is not None:
            pulumi.set(__self__, "source_postgres_update_ssl_modes_prefer", source_postgres_update_ssl_modes_prefer)
        if source_postgres_update_ssl_modes_require is not None:
            pulumi.set(__self__, "source_postgres_update_ssl_modes_require", source_postgres_update_ssl_modes_require)
        if source_postgres_update_ssl_modes_verify_ca is not None:
            pulumi.set(__self__, "source_postgres_update_ssl_modes_verify_ca", source_postgres_update_ssl_modes_verify_ca)
        if source_postgres_update_ssl_modes_verify_full is not None:
            pulumi.set(__self__, "source_postgres_update_ssl_modes_verify_full", source_postgres_update_ssl_modes_verify_full)

    @property
    @pulumi.getter(name="sourcePostgresSslModesAllow")
    def source_postgres_ssl_modes_allow(self) -> Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesAllowArgs']]:
        return pulumi.get(self, "source_postgres_ssl_modes_allow")

    @source_postgres_ssl_modes_allow.setter
    def source_postgres_ssl_modes_allow(self, value: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesAllowArgs']]):
        pulumi.set(self, "source_postgres_ssl_modes_allow", value)

    @property
    @pulumi.getter(name="sourcePostgresSslModesDisable")
    def source_postgres_ssl_modes_disable(self) -> Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesDisableArgs']]:
        return pulumi.get(self, "source_postgres_ssl_modes_disable")

    @source_postgres_ssl_modes_disable.setter
    def source_postgres_ssl_modes_disable(self, value: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesDisableArgs']]):
        pulumi.set(self, "source_postgres_ssl_modes_disable", value)

    @property
    @pulumi.getter(name="sourcePostgresSslModesPrefer")
    def source_postgres_ssl_modes_prefer(self) -> Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesPreferArgs']]:
        return pulumi.get(self, "source_postgres_ssl_modes_prefer")

    @source_postgres_ssl_modes_prefer.setter
    def source_postgres_ssl_modes_prefer(self, value: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesPreferArgs']]):
        pulumi.set(self, "source_postgres_ssl_modes_prefer", value)

    @property
    @pulumi.getter(name="sourcePostgresSslModesRequire")
    def source_postgres_ssl_modes_require(self) -> Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesRequireArgs']]:
        return pulumi.get(self, "source_postgres_ssl_modes_require")

    @source_postgres_ssl_modes_require.setter
    def source_postgres_ssl_modes_require(self, value: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesRequireArgs']]):
        pulumi.set(self, "source_postgres_ssl_modes_require", value)

    @property
    @pulumi.getter(name="sourcePostgresSslModesVerifyCa")
    def source_postgres_ssl_modes_verify_ca(self) -> Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCaArgs']]:
        return pulumi.get(self, "source_postgres_ssl_modes_verify_ca")

    @source_postgres_ssl_modes_verify_ca.setter
    def source_postgres_ssl_modes_verify_ca(self, value: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCaArgs']]):
        pulumi.set(self, "source_postgres_ssl_modes_verify_ca", value)

    @property
    @pulumi.getter(name="sourcePostgresSslModesVerifyFull")
    def source_postgres_ssl_modes_verify_full(self) -> Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFullArgs']]:
        return pulumi.get(self, "source_postgres_ssl_modes_verify_full")

    @source_postgres_ssl_modes_verify_full.setter
    def source_postgres_ssl_modes_verify_full(self, value: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFullArgs']]):
        pulumi.set(self, "source_postgres_ssl_modes_verify_full", value)

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesAllow")
    def source_postgres_update_ssl_modes_allow(self) -> Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllowArgs']]:
        return pulumi.get(self, "source_postgres_update_ssl_modes_allow")

    @source_postgres_update_ssl_modes_allow.setter
    def source_postgres_update_ssl_modes_allow(self, value: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllowArgs']]):
        pulumi.set(self, "source_postgres_update_ssl_modes_allow", value)

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesDisable")
    def source_postgres_update_ssl_modes_disable(self) -> Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisableArgs']]:
        return pulumi.get(self, "source_postgres_update_ssl_modes_disable")

    @source_postgres_update_ssl_modes_disable.setter
    def source_postgres_update_ssl_modes_disable(self, value: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisableArgs']]):
        pulumi.set(self, "source_postgres_update_ssl_modes_disable", value)

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesPrefer")
    def source_postgres_update_ssl_modes_prefer(self) -> Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPreferArgs']]:
        return pulumi.get(self, "source_postgres_update_ssl_modes_prefer")

    @source_postgres_update_ssl_modes_prefer.setter
    def source_postgres_update_ssl_modes_prefer(self, value: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPreferArgs']]):
        pulumi.set(self, "source_postgres_update_ssl_modes_prefer", value)

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesRequire")
    def source_postgres_update_ssl_modes_require(self) -> Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequireArgs']]:
        return pulumi.get(self, "source_postgres_update_ssl_modes_require")

    @source_postgres_update_ssl_modes_require.setter
    def source_postgres_update_ssl_modes_require(self, value: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequireArgs']]):
        pulumi.set(self, "source_postgres_update_ssl_modes_require", value)

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesVerifyCa")
    def source_postgres_update_ssl_modes_verify_ca(self) -> Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCaArgs']]:
        return pulumi.get(self, "source_postgres_update_ssl_modes_verify_ca")

    @source_postgres_update_ssl_modes_verify_ca.setter
    def source_postgres_update_ssl_modes_verify_ca(self, value: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCaArgs']]):
        pulumi.set(self, "source_postgres_update_ssl_modes_verify_ca", value)

    @property
    @pulumi.getter(name="sourcePostgresUpdateSslModesVerifyFull")
    def source_postgres_update_ssl_modes_verify_full(self) -> Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFullArgs']]:
        return pulumi.get(self, "source_postgres_update_ssl_modes_verify_full")

    @source_postgres_update_ssl_modes_verify_full.setter
    def source_postgres_update_ssl_modes_verify_full(self, value: Optional[pulumi.Input['SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFullArgs']]):
        pulumi.set(self, "source_postgres_update_ssl_modes_verify_full", value)


@pulumi.input_type
class SourcePostgresConfigurationSslModeSourcePostgresSslModesAllowArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourcePostgresConfigurationSslModeSourcePostgresSslModesDisableArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourcePostgresConfigurationSslModeSourcePostgresSslModesPreferArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourcePostgresConfigurationSslModeSourcePostgresSslModesRequireArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyCaArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class SourcePostgresConfigurationSslModeSourcePostgresSslModesVerifyFullArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesAllowArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesDisableArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesPreferArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesRequireArgs:
    def __init__(__self__, *,
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyCaArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class SourcePostgresConfigurationSslModeSourcePostgresUpdateSslModesVerifyFullArgs:
    def __init__(__self__, *,
                 ca_certificate: pulumi.Input[str],
                 mode: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_key: Optional[pulumi.Input[str]] = None,
                 client_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "ca_certificate", ca_certificate)
        pulumi.set(__self__, "mode", mode)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_key is not None:
            pulumi.set(__self__, "client_key", client_key)
        if client_key_password is not None:
            pulumi.set(__self__, "client_key_password", client_key_password)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ca_certificate")

    @ca_certificate.setter
    def ca_certificate(self, value: pulumi.Input[str]):
        pulumi.set(self, "ca_certificate", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientKey")
    def client_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key")

    @client_key.setter
    def client_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key", value)

    @property
    @pulumi.getter(name="clientKeyPassword")
    def client_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_key_password")

    @client_key_password.setter
    def client_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_key_password", value)


@pulumi.input_type
class SourcePostgresConfigurationTunnelMethodArgs:
    def __init__(__self__, *,
                 source_postgres_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnelArgs']] = None,
                 source_postgres_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 source_postgres_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthenticationArgs']] = None,
                 source_postgres_update_ssh_tunnel_method_no_tunnel: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnelArgs']] = None,
                 source_postgres_update_ssh_tunnel_method_password_authentication: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthenticationArgs']] = None,
                 source_postgres_update_ssh_tunnel_method_ssh_key_authentication: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthenticationArgs']] = None):
        if source_postgres_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_postgres_ssh_tunnel_method_no_tunnel", source_postgres_ssh_tunnel_method_no_tunnel)
        if source_postgres_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_postgres_ssh_tunnel_method_password_authentication", source_postgres_ssh_tunnel_method_password_authentication)
        if source_postgres_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_postgres_ssh_tunnel_method_ssh_key_authentication", source_postgres_ssh_tunnel_method_ssh_key_authentication)
        if source_postgres_update_ssh_tunnel_method_no_tunnel is not None:
            pulumi.set(__self__, "source_postgres_update_ssh_tunnel_method_no_tunnel", source_postgres_update_ssh_tunnel_method_no_tunnel)
        if source_postgres_update_ssh_tunnel_method_password_authentication is not None:
            pulumi.set(__self__, "source_postgres_update_ssh_tunnel_method_password_authentication", source_postgres_update_ssh_tunnel_method_password_authentication)
        if source_postgres_update_ssh_tunnel_method_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_postgres_update_ssh_tunnel_method_ssh_key_authentication", source_postgres_update_ssh_tunnel_method_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourcePostgresSshTunnelMethodNoTunnel")
    def source_postgres_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "source_postgres_ssh_tunnel_method_no_tunnel")

    @source_postgres_ssh_tunnel_method_no_tunnel.setter
    def source_postgres_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "source_postgres_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="sourcePostgresSshTunnelMethodPasswordAuthentication")
    def source_postgres_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_postgres_ssh_tunnel_method_password_authentication")

    @source_postgres_ssh_tunnel_method_password_authentication.setter
    def source_postgres_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_postgres_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="sourcePostgresSshTunnelMethodSshKeyAuthentication")
    def source_postgres_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_postgres_ssh_tunnel_method_ssh_key_authentication")

    @source_postgres_ssh_tunnel_method_ssh_key_authentication.setter
    def source_postgres_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_postgres_ssh_tunnel_method_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="sourcePostgresUpdateSshTunnelMethodNoTunnel")
    def source_postgres_update_ssh_tunnel_method_no_tunnel(self) -> Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnelArgs']]:
        return pulumi.get(self, "source_postgres_update_ssh_tunnel_method_no_tunnel")

    @source_postgres_update_ssh_tunnel_method_no_tunnel.setter
    def source_postgres_update_ssh_tunnel_method_no_tunnel(self, value: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnelArgs']]):
        pulumi.set(self, "source_postgres_update_ssh_tunnel_method_no_tunnel", value)

    @property
    @pulumi.getter(name="sourcePostgresUpdateSshTunnelMethodPasswordAuthentication")
    def source_postgres_update_ssh_tunnel_method_password_authentication(self) -> Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_postgres_update_ssh_tunnel_method_password_authentication")

    @source_postgres_update_ssh_tunnel_method_password_authentication.setter
    def source_postgres_update_ssh_tunnel_method_password_authentication(self, value: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_postgres_update_ssh_tunnel_method_password_authentication", value)

    @property
    @pulumi.getter(name="sourcePostgresUpdateSshTunnelMethodSshKeyAuthentication")
    def source_postgres_update_ssh_tunnel_method_ssh_key_authentication(self) -> Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_postgres_update_ssh_tunnel_method_ssh_key_authentication")

    @source_postgres_update_ssh_tunnel_method_ssh_key_authentication.setter
    def source_postgres_update_ssh_tunnel_method_ssh_key_authentication(self, value: Optional[pulumi.Input['SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_postgres_update_ssh_tunnel_method_ssh_key_authentication", value)


@pulumi.input_type
class SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class SourcePostgresConfigurationTunnelMethodSourcePostgresSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodNoTunnelArgs:
    def __init__(__self__, *,
                 tunnel_method: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_method", tunnel_method)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)


@pulumi.input_type
class SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str],
                 tunnel_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)
        pulumi.set(__self__, "tunnel_user_password", tunnel_user_password)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)

    @property
    @pulumi.getter(name="tunnelUserPassword")
    def tunnel_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user_password")

    @tunnel_user_password.setter
    def tunnel_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user_password", value)


@pulumi.input_type
class SourcePostgresConfigurationTunnelMethodSourcePostgresUpdateSshTunnelMethodSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 ssh_key: pulumi.Input[str],
                 tunnel_host: pulumi.Input[str],
                 tunnel_method: pulumi.Input[str],
                 tunnel_port: pulumi.Input[int],
                 tunnel_user: pulumi.Input[str]):
        pulumi.set(__self__, "ssh_key", ssh_key)
        pulumi.set(__self__, "tunnel_host", tunnel_host)
        pulumi.set(__self__, "tunnel_method", tunnel_method)
        pulumi.set(__self__, "tunnel_port", tunnel_port)
        pulumi.set(__self__, "tunnel_user", tunnel_user)

    @property
    @pulumi.getter(name="sshKey")
    def ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "ssh_key")

    @ssh_key.setter
    def ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "ssh_key", value)

    @property
    @pulumi.getter(name="tunnelHost")
    def tunnel_host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_host")

    @tunnel_host.setter
    def tunnel_host(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_host", value)

    @property
    @pulumi.getter(name="tunnelMethod")
    def tunnel_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_method")

    @tunnel_method.setter
    def tunnel_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_method", value)

    @property
    @pulumi.getter(name="tunnelPort")
    def tunnel_port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "tunnel_port")

    @tunnel_port.setter
    def tunnel_port(self, value: pulumi.Input[int]):
        pulumi.set(self, "tunnel_port", value)

    @property
    @pulumi.getter(name="tunnelUser")
    def tunnel_user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tunnel_user")

    @tunnel_user.setter
    def tunnel_user(self, value: pulumi.Input[str]):
        pulumi.set(self, "tunnel_user", value)


@pulumi.input_type
class SourcePosthogConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 base_url: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if base_url is not None:
            pulumi.set(__self__, "base_url", base_url)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="baseUrl")
    def base_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "base_url")

    @base_url.setter
    def base_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "base_url", value)


@pulumi.input_type
class SourcePostmarkappConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 x_postmark_account_token: pulumi.Input[str],
                 x_postmark_server_token: pulumi.Input[str]):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "x_postmark_account_token", x_postmark_account_token)
        pulumi.set(__self__, "x_postmark_server_token", x_postmark_server_token)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="xPostmarkAccountToken")
    def x_postmark_account_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "x_postmark_account_token")

    @x_postmark_account_token.setter
    def x_postmark_account_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "x_postmark_account_token", value)

    @property
    @pulumi.getter(name="xPostmarkServerToken")
    def x_postmark_server_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "x_postmark_server_token")

    @x_postmark_server_token.setter
    def x_postmark_server_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "x_postmark_server_token", value)


@pulumi.input_type
class SourcePrestashopConfigurationArgs:
    def __init__(__self__, *,
                 access_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "access_key", access_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SourcePublicApisConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourcePunkApiConfigurationArgs:
    def __init__(__self__, *,
                 brewed_after: pulumi.Input[str],
                 brewed_before: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "brewed_after", brewed_after)
        pulumi.set(__self__, "brewed_before", brewed_before)
        pulumi.set(__self__, "source_type", source_type)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="brewedAfter")
    def brewed_after(self) -> pulumi.Input[str]:
        return pulumi.get(self, "brewed_after")

    @brewed_after.setter
    def brewed_after(self, value: pulumi.Input[str]):
        pulumi.set(self, "brewed_after", value)

    @property
    @pulumi.getter(name="brewedBefore")
    def brewed_before(self) -> pulumi.Input[str]:
        return pulumi.get(self, "brewed_before")

    @brewed_before.setter
    def brewed_before(self, value: pulumi.Input[str]):
        pulumi.set(self, "brewed_before", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)


@pulumi.input_type
class SourcePypiConfigurationArgs:
    def __init__(__self__, *,
                 project_name: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 version: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "project_name", project_name)
        pulumi.set(__self__, "source_type", source_type)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="projectName")
    def project_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project_name")

    @project_name.setter
    def project_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_name", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class SourceQualarooConfigurationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 token: pulumi.Input[str],
                 survey_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "token", token)
        if survey_ids is not None:
            pulumi.set(__self__, "survey_ids", survey_ids)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="surveyIds")
    def survey_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "survey_ids")

    @survey_ids.setter
    def survey_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "survey_ids", value)


@pulumi.input_type
class SourceQuickbooksConfigurationArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['SourceQuickbooksConfigurationCredentialsArgs'],
                 sandbox: pulumi.Input[bool],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "sandbox", sandbox)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['SourceQuickbooksConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['SourceQuickbooksConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def sandbox(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "sandbox")

    @sandbox.setter
    def sandbox(self, value: pulumi.Input[bool]):
        pulumi.set(self, "sandbox", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceQuickbooksConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_quickbooks_authorization_method_o_auth20: Optional[pulumi.Input['SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20Args']] = None,
                 source_quickbooks_update_authorization_method_o_auth20: Optional[pulumi.Input['SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20Args']] = None):
        if source_quickbooks_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_quickbooks_authorization_method_o_auth20", source_quickbooks_authorization_method_o_auth20)
        if source_quickbooks_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_quickbooks_update_authorization_method_o_auth20", source_quickbooks_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceQuickbooksAuthorizationMethodOAuth20")
    def source_quickbooks_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_quickbooks_authorization_method_o_auth20")

    @source_quickbooks_authorization_method_o_auth20.setter
    def source_quickbooks_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_quickbooks_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceQuickbooksUpdateAuthorizationMethodOAuth20")
    def source_quickbooks_update_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_quickbooks_update_authorization_method_o_auth20")

    @source_quickbooks_update_authorization_method_o_auth20.setter
    def source_quickbooks_update_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_quickbooks_update_authorization_method_o_auth20", value)


@pulumi.input_type
class SourceQuickbooksConfigurationCredentialsSourceQuickbooksAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 realm_id: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_expiry_date: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "realm_id", realm_id)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "realm_id")

    @realm_id.setter
    def realm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "realm_id", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_expiry_date", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceQuickbooksConfigurationCredentialsSourceQuickbooksUpdateAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 realm_id: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_expiry_date: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "realm_id", realm_id)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="realmId")
    def realm_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "realm_id")

    @realm_id.setter
    def realm_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "realm_id", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_expiry_date", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceRailzConfigurationArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceRechargeConfigurationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceRecreationConfigurationArgs:
    def __init__(__self__, *,
                 apikey: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 query_campsites: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "source_type", source_type)
        if query_campsites is not None:
            pulumi.set(__self__, "query_campsites", query_campsites)

    @property
    @pulumi.getter
    def apikey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "apikey")

    @apikey.setter
    def apikey(self, value: pulumi.Input[str]):
        pulumi.set(self, "apikey", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="queryCampsites")
    def query_campsites(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_campsites")

    @query_campsites.setter
    def query_campsites(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_campsites", value)


@pulumi.input_type
class SourceRecruiteeConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 company_id: pulumi.Input[int],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "company_id", company_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="companyId")
    def company_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "company_id")

    @company_id.setter
    def company_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "company_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceRecurlyConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 begin_time: Optional[pulumi.Input[str]] = None,
                 end_time: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        if begin_time is not None:
            pulumi.set(__self__, "begin_time", begin_time)
        if end_time is not None:
            pulumi.set(__self__, "end_time", end_time)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="beginTime")
    def begin_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "begin_time")

    @begin_time.setter
    def begin_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "begin_time", value)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_time", value)


@pulumi.input_type
class SourceRedshiftConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 password: pulumi.Input[str],
                 port: pulumi.Input[int],
                 source_type: pulumi.Input[str],
                 username: pulumi.Input[str],
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 schemas: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if schemas is not None:
            pulumi.set(__self__, "schemas", schemas)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter
    def schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "schemas")

    @schemas.setter
    def schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "schemas", value)


@pulumi.input_type
class SourceRetentlyConfigurationArgs:
    def __init__(__self__, *,
                 credentials: Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsArgs']] = None,
                 source_type: Optional[pulumi.Input[str]] = None):
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceRetentlyConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_retently_authentication_mechanism_authenticate_via_retently_o_auth: Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthArgs']] = None,
                 source_retently_authentication_mechanism_authenticate_with_api_token: Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiTokenArgs']] = None,
                 source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth: Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthArgs']] = None,
                 source_retently_update_authentication_mechanism_authenticate_with_api_token: Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiTokenArgs']] = None):
        if source_retently_authentication_mechanism_authenticate_via_retently_o_auth is not None:
            pulumi.set(__self__, "source_retently_authentication_mechanism_authenticate_via_retently_o_auth", source_retently_authentication_mechanism_authenticate_via_retently_o_auth)
        if source_retently_authentication_mechanism_authenticate_with_api_token is not None:
            pulumi.set(__self__, "source_retently_authentication_mechanism_authenticate_with_api_token", source_retently_authentication_mechanism_authenticate_with_api_token)
        if source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth is not None:
            pulumi.set(__self__, "source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth", source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth)
        if source_retently_update_authentication_mechanism_authenticate_with_api_token is not None:
            pulumi.set(__self__, "source_retently_update_authentication_mechanism_authenticate_with_api_token", source_retently_update_authentication_mechanism_authenticate_with_api_token)

    @property
    @pulumi.getter(name="sourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuth")
    def source_retently_authentication_mechanism_authenticate_via_retently_o_auth(self) -> Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthArgs']]:
        return pulumi.get(self, "source_retently_authentication_mechanism_authenticate_via_retently_o_auth")

    @source_retently_authentication_mechanism_authenticate_via_retently_o_auth.setter
    def source_retently_authentication_mechanism_authenticate_via_retently_o_auth(self, value: Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthArgs']]):
        pulumi.set(self, "source_retently_authentication_mechanism_authenticate_via_retently_o_auth", value)

    @property
    @pulumi.getter(name="sourceRetentlyAuthenticationMechanismAuthenticateWithApiToken")
    def source_retently_authentication_mechanism_authenticate_with_api_token(self) -> Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiTokenArgs']]:
        return pulumi.get(self, "source_retently_authentication_mechanism_authenticate_with_api_token")

    @source_retently_authentication_mechanism_authenticate_with_api_token.setter
    def source_retently_authentication_mechanism_authenticate_with_api_token(self, value: Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiTokenArgs']]):
        pulumi.set(self, "source_retently_authentication_mechanism_authenticate_with_api_token", value)

    @property
    @pulumi.getter(name="sourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuth")
    def source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth(self) -> Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthArgs']]:
        return pulumi.get(self, "source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth")

    @source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth.setter
    def source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth(self, value: Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthArgs']]):
        pulumi.set(self, "source_retently_update_authentication_mechanism_authenticate_via_retently_o_auth", value)

    @property
    @pulumi.getter(name="sourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiToken")
    def source_retently_update_authentication_mechanism_authenticate_with_api_token(self) -> Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiTokenArgs']]:
        return pulumi.get(self, "source_retently_update_authentication_mechanism_authenticate_with_api_token")

    @source_retently_update_authentication_mechanism_authenticate_with_api_token.setter
    def source_retently_update_authentication_mechanism_authenticate_with_api_token(self, value: Optional[pulumi.Input['SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiTokenArgs']]):
        pulumi.set(self, "source_retently_update_authentication_mechanism_authenticate_with_api_token", value)


@pulumi.input_type
class SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateViaRetentlyOAuthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceRetentlyConfigurationCredentialsSourceRetentlyAuthenticationMechanismAuthenticateWithApiTokenArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateViaRetentlyOAuthArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceRetentlyConfigurationCredentialsSourceRetentlyUpdateAuthenticationMechanismAuthenticateWithApiTokenArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceRkiCovidConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceRssConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 url: pulumi.Input[str]):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class SourceS3ConfigurationArgs:
    def __init__(__self__, *,
                 dataset: pulumi.Input[str],
                 path_pattern: pulumi.Input[str],
                 provider: pulumi.Input['SourceS3ConfigurationProviderArgs'],
                 source_type: pulumi.Input[str],
                 format: Optional[pulumi.Input['SourceS3ConfigurationFormatArgs']] = None,
                 schema: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "dataset", dataset)
        pulumi.set(__self__, "path_pattern", path_pattern)
        pulumi.set(__self__, "provider", provider)
        pulumi.set(__self__, "source_type", source_type)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def dataset(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter(name="pathPattern")
    def path_pattern(self) -> pulumi.Input[str]:
        return pulumi.get(self, "path_pattern")

    @path_pattern.setter
    def path_pattern(self, value: pulumi.Input[str]):
        pulumi.set(self, "path_pattern", value)

    @property
    @pulumi.getter
    def provider(self) -> pulumi.Input['SourceS3ConfigurationProviderArgs']:
        return pulumi.get(self, "provider")

    @provider.setter
    def provider(self, value: pulumi.Input['SourceS3ConfigurationProviderArgs']):
        pulumi.set(self, "provider", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input['SourceS3ConfigurationFormatArgs']]:
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input['SourceS3ConfigurationFormatArgs']]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)


@pulumi.input_type
class SourceS3ConfigurationFormatArgs:
    def __init__(__self__, *,
                 source_s3_file_format_avro: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3FileFormatAvroArgs']] = None,
                 source_s3_file_format_csv: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3FileFormatCsvArgs']] = None,
                 source_s3_file_format_jsonl: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3FileFormatJsonlArgs']] = None,
                 source_s3_file_format_parquet: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3FileFormatParquetArgs']] = None,
                 source_s3_update_file_format_avro: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3UpdateFileFormatAvroArgs']] = None,
                 source_s3_update_file_format_csv: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsvArgs']] = None,
                 source_s3_update_file_format_jsonl: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonlArgs']] = None,
                 source_s3_update_file_format_parquet: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquetArgs']] = None):
        if source_s3_file_format_avro is not None:
            pulumi.set(__self__, "source_s3_file_format_avro", source_s3_file_format_avro)
        if source_s3_file_format_csv is not None:
            pulumi.set(__self__, "source_s3_file_format_csv", source_s3_file_format_csv)
        if source_s3_file_format_jsonl is not None:
            pulumi.set(__self__, "source_s3_file_format_jsonl", source_s3_file_format_jsonl)
        if source_s3_file_format_parquet is not None:
            pulumi.set(__self__, "source_s3_file_format_parquet", source_s3_file_format_parquet)
        if source_s3_update_file_format_avro is not None:
            pulumi.set(__self__, "source_s3_update_file_format_avro", source_s3_update_file_format_avro)
        if source_s3_update_file_format_csv is not None:
            pulumi.set(__self__, "source_s3_update_file_format_csv", source_s3_update_file_format_csv)
        if source_s3_update_file_format_jsonl is not None:
            pulumi.set(__self__, "source_s3_update_file_format_jsonl", source_s3_update_file_format_jsonl)
        if source_s3_update_file_format_parquet is not None:
            pulumi.set(__self__, "source_s3_update_file_format_parquet", source_s3_update_file_format_parquet)

    @property
    @pulumi.getter(name="sourceS3FileFormatAvro")
    def source_s3_file_format_avro(self) -> Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3FileFormatAvroArgs']]:
        return pulumi.get(self, "source_s3_file_format_avro")

    @source_s3_file_format_avro.setter
    def source_s3_file_format_avro(self, value: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3FileFormatAvroArgs']]):
        pulumi.set(self, "source_s3_file_format_avro", value)

    @property
    @pulumi.getter(name="sourceS3FileFormatCsv")
    def source_s3_file_format_csv(self) -> Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3FileFormatCsvArgs']]:
        return pulumi.get(self, "source_s3_file_format_csv")

    @source_s3_file_format_csv.setter
    def source_s3_file_format_csv(self, value: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3FileFormatCsvArgs']]):
        pulumi.set(self, "source_s3_file_format_csv", value)

    @property
    @pulumi.getter(name="sourceS3FileFormatJsonl")
    def source_s3_file_format_jsonl(self) -> Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3FileFormatJsonlArgs']]:
        return pulumi.get(self, "source_s3_file_format_jsonl")

    @source_s3_file_format_jsonl.setter
    def source_s3_file_format_jsonl(self, value: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3FileFormatJsonlArgs']]):
        pulumi.set(self, "source_s3_file_format_jsonl", value)

    @property
    @pulumi.getter(name="sourceS3FileFormatParquet")
    def source_s3_file_format_parquet(self) -> Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3FileFormatParquetArgs']]:
        return pulumi.get(self, "source_s3_file_format_parquet")

    @source_s3_file_format_parquet.setter
    def source_s3_file_format_parquet(self, value: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3FileFormatParquetArgs']]):
        pulumi.set(self, "source_s3_file_format_parquet", value)

    @property
    @pulumi.getter(name="sourceS3UpdateFileFormatAvro")
    def source_s3_update_file_format_avro(self) -> Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3UpdateFileFormatAvroArgs']]:
        return pulumi.get(self, "source_s3_update_file_format_avro")

    @source_s3_update_file_format_avro.setter
    def source_s3_update_file_format_avro(self, value: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3UpdateFileFormatAvroArgs']]):
        pulumi.set(self, "source_s3_update_file_format_avro", value)

    @property
    @pulumi.getter(name="sourceS3UpdateFileFormatCsv")
    def source_s3_update_file_format_csv(self) -> Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsvArgs']]:
        return pulumi.get(self, "source_s3_update_file_format_csv")

    @source_s3_update_file_format_csv.setter
    def source_s3_update_file_format_csv(self, value: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsvArgs']]):
        pulumi.set(self, "source_s3_update_file_format_csv", value)

    @property
    @pulumi.getter(name="sourceS3UpdateFileFormatJsonl")
    def source_s3_update_file_format_jsonl(self) -> Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonlArgs']]:
        return pulumi.get(self, "source_s3_update_file_format_jsonl")

    @source_s3_update_file_format_jsonl.setter
    def source_s3_update_file_format_jsonl(self, value: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonlArgs']]):
        pulumi.set(self, "source_s3_update_file_format_jsonl", value)

    @property
    @pulumi.getter(name="sourceS3UpdateFileFormatParquet")
    def source_s3_update_file_format_parquet(self) -> Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquetArgs']]:
        return pulumi.get(self, "source_s3_update_file_format_parquet")

    @source_s3_update_file_format_parquet.setter
    def source_s3_update_file_format_parquet(self, value: Optional[pulumi.Input['SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquetArgs']]):
        pulumi.set(self, "source_s3_update_file_format_parquet", value)


@pulumi.input_type
class SourceS3ConfigurationFormatSourceS3FileFormatAvroArgs:
    def __init__(__self__, *,
                 filetype: Optional[pulumi.Input[str]] = None):
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)

    @property
    @pulumi.getter
    def filetype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filetype")

    @filetype.setter
    def filetype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filetype", value)


@pulumi.input_type
class SourceS3ConfigurationFormatSourceS3FileFormatCsvArgs:
    def __init__(__self__, *,
                 additional_reader_options: Optional[pulumi.Input[str]] = None,
                 advanced_options: Optional[pulumi.Input[str]] = None,
                 block_size: Optional[pulumi.Input[int]] = None,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 double_quote: Optional[pulumi.Input[bool]] = None,
                 encoding: Optional[pulumi.Input[str]] = None,
                 escape_char: Optional[pulumi.Input[str]] = None,
                 filetype: Optional[pulumi.Input[str]] = None,
                 infer_datatypes: Optional[pulumi.Input[bool]] = None,
                 newlines_in_values: Optional[pulumi.Input[bool]] = None,
                 quote_char: Optional[pulumi.Input[str]] = None):
        if additional_reader_options is not None:
            pulumi.set(__self__, "additional_reader_options", additional_reader_options)
        if advanced_options is not None:
            pulumi.set(__self__, "advanced_options", advanced_options)
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if double_quote is not None:
            pulumi.set(__self__, "double_quote", double_quote)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if escape_char is not None:
            pulumi.set(__self__, "escape_char", escape_char)
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)
        if infer_datatypes is not None:
            pulumi.set(__self__, "infer_datatypes", infer_datatypes)
        if newlines_in_values is not None:
            pulumi.set(__self__, "newlines_in_values", newlines_in_values)
        if quote_char is not None:
            pulumi.set(__self__, "quote_char", quote_char)

    @property
    @pulumi.getter(name="additionalReaderOptions")
    def additional_reader_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_reader_options")

    @additional_reader_options.setter
    def additional_reader_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_reader_options", value)

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advanced_options")

    @advanced_options.setter
    def advanced_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advanced_options", value)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_size")

    @block_size.setter
    def block_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_size", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="doubleQuote")
    def double_quote(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "double_quote")

    @double_quote.setter
    def double_quote(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "double_quote", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter(name="escapeChar")
    def escape_char(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "escape_char")

    @escape_char.setter
    def escape_char(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "escape_char", value)

    @property
    @pulumi.getter
    def filetype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filetype")

    @filetype.setter
    def filetype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filetype", value)

    @property
    @pulumi.getter(name="inferDatatypes")
    def infer_datatypes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "infer_datatypes")

    @infer_datatypes.setter
    def infer_datatypes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "infer_datatypes", value)

    @property
    @pulumi.getter(name="newlinesInValues")
    def newlines_in_values(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "newlines_in_values")

    @newlines_in_values.setter
    def newlines_in_values(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "newlines_in_values", value)

    @property
    @pulumi.getter(name="quoteChar")
    def quote_char(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quote_char")

    @quote_char.setter
    def quote_char(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quote_char", value)


@pulumi.input_type
class SourceS3ConfigurationFormatSourceS3FileFormatJsonlArgs:
    def __init__(__self__, *,
                 block_size: Optional[pulumi.Input[int]] = None,
                 filetype: Optional[pulumi.Input[str]] = None,
                 newlines_in_values: Optional[pulumi.Input[bool]] = None,
                 unexpected_field_behavior: Optional[pulumi.Input[str]] = None):
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)
        if newlines_in_values is not None:
            pulumi.set(__self__, "newlines_in_values", newlines_in_values)
        if unexpected_field_behavior is not None:
            pulumi.set(__self__, "unexpected_field_behavior", unexpected_field_behavior)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_size")

    @block_size.setter
    def block_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_size", value)

    @property
    @pulumi.getter
    def filetype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filetype")

    @filetype.setter
    def filetype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filetype", value)

    @property
    @pulumi.getter(name="newlinesInValues")
    def newlines_in_values(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "newlines_in_values")

    @newlines_in_values.setter
    def newlines_in_values(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "newlines_in_values", value)

    @property
    @pulumi.getter(name="unexpectedFieldBehavior")
    def unexpected_field_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unexpected_field_behavior")

    @unexpected_field_behavior.setter
    def unexpected_field_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unexpected_field_behavior", value)


@pulumi.input_type
class SourceS3ConfigurationFormatSourceS3FileFormatParquetArgs:
    def __init__(__self__, *,
                 batch_size: Optional[pulumi.Input[int]] = None,
                 buffer_size: Optional[pulumi.Input[int]] = None,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filetype: Optional[pulumi.Input[str]] = None):
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if buffer_size is not None:
            pulumi.set(__self__, "buffer_size", buffer_size)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "buffer_size")

    @buffer_size.setter
    def buffer_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "buffer_size", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def filetype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filetype")

    @filetype.setter
    def filetype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filetype", value)


@pulumi.input_type
class SourceS3ConfigurationFormatSourceS3UpdateFileFormatAvroArgs:
    def __init__(__self__, *,
                 filetype: Optional[pulumi.Input[str]] = None):
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)

    @property
    @pulumi.getter
    def filetype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filetype")

    @filetype.setter
    def filetype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filetype", value)


@pulumi.input_type
class SourceS3ConfigurationFormatSourceS3UpdateFileFormatCsvArgs:
    def __init__(__self__, *,
                 additional_reader_options: Optional[pulumi.Input[str]] = None,
                 advanced_options: Optional[pulumi.Input[str]] = None,
                 block_size: Optional[pulumi.Input[int]] = None,
                 delimiter: Optional[pulumi.Input[str]] = None,
                 double_quote: Optional[pulumi.Input[bool]] = None,
                 encoding: Optional[pulumi.Input[str]] = None,
                 escape_char: Optional[pulumi.Input[str]] = None,
                 filetype: Optional[pulumi.Input[str]] = None,
                 infer_datatypes: Optional[pulumi.Input[bool]] = None,
                 newlines_in_values: Optional[pulumi.Input[bool]] = None,
                 quote_char: Optional[pulumi.Input[str]] = None):
        if additional_reader_options is not None:
            pulumi.set(__self__, "additional_reader_options", additional_reader_options)
        if advanced_options is not None:
            pulumi.set(__self__, "advanced_options", advanced_options)
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if delimiter is not None:
            pulumi.set(__self__, "delimiter", delimiter)
        if double_quote is not None:
            pulumi.set(__self__, "double_quote", double_quote)
        if encoding is not None:
            pulumi.set(__self__, "encoding", encoding)
        if escape_char is not None:
            pulumi.set(__self__, "escape_char", escape_char)
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)
        if infer_datatypes is not None:
            pulumi.set(__self__, "infer_datatypes", infer_datatypes)
        if newlines_in_values is not None:
            pulumi.set(__self__, "newlines_in_values", newlines_in_values)
        if quote_char is not None:
            pulumi.set(__self__, "quote_char", quote_char)

    @property
    @pulumi.getter(name="additionalReaderOptions")
    def additional_reader_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_reader_options")

    @additional_reader_options.setter
    def additional_reader_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_reader_options", value)

    @property
    @pulumi.getter(name="advancedOptions")
    def advanced_options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advanced_options")

    @advanced_options.setter
    def advanced_options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advanced_options", value)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_size")

    @block_size.setter
    def block_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_size", value)

    @property
    @pulumi.getter
    def delimiter(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delimiter")

    @delimiter.setter
    def delimiter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delimiter", value)

    @property
    @pulumi.getter(name="doubleQuote")
    def double_quote(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "double_quote")

    @double_quote.setter
    def double_quote(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "double_quote", value)

    @property
    @pulumi.getter
    def encoding(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "encoding")

    @encoding.setter
    def encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoding", value)

    @property
    @pulumi.getter(name="escapeChar")
    def escape_char(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "escape_char")

    @escape_char.setter
    def escape_char(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "escape_char", value)

    @property
    @pulumi.getter
    def filetype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filetype")

    @filetype.setter
    def filetype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filetype", value)

    @property
    @pulumi.getter(name="inferDatatypes")
    def infer_datatypes(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "infer_datatypes")

    @infer_datatypes.setter
    def infer_datatypes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "infer_datatypes", value)

    @property
    @pulumi.getter(name="newlinesInValues")
    def newlines_in_values(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "newlines_in_values")

    @newlines_in_values.setter
    def newlines_in_values(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "newlines_in_values", value)

    @property
    @pulumi.getter(name="quoteChar")
    def quote_char(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "quote_char")

    @quote_char.setter
    def quote_char(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "quote_char", value)


@pulumi.input_type
class SourceS3ConfigurationFormatSourceS3UpdateFileFormatJsonlArgs:
    def __init__(__self__, *,
                 block_size: Optional[pulumi.Input[int]] = None,
                 filetype: Optional[pulumi.Input[str]] = None,
                 newlines_in_values: Optional[pulumi.Input[bool]] = None,
                 unexpected_field_behavior: Optional[pulumi.Input[str]] = None):
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)
        if newlines_in_values is not None:
            pulumi.set(__self__, "newlines_in_values", newlines_in_values)
        if unexpected_field_behavior is not None:
            pulumi.set(__self__, "unexpected_field_behavior", unexpected_field_behavior)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "block_size")

    @block_size.setter
    def block_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "block_size", value)

    @property
    @pulumi.getter
    def filetype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filetype")

    @filetype.setter
    def filetype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filetype", value)

    @property
    @pulumi.getter(name="newlinesInValues")
    def newlines_in_values(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "newlines_in_values")

    @newlines_in_values.setter
    def newlines_in_values(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "newlines_in_values", value)

    @property
    @pulumi.getter(name="unexpectedFieldBehavior")
    def unexpected_field_behavior(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "unexpected_field_behavior")

    @unexpected_field_behavior.setter
    def unexpected_field_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "unexpected_field_behavior", value)


@pulumi.input_type
class SourceS3ConfigurationFormatSourceS3UpdateFileFormatParquetArgs:
    def __init__(__self__, *,
                 batch_size: Optional[pulumi.Input[int]] = None,
                 buffer_size: Optional[pulumi.Input[int]] = None,
                 columns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 filetype: Optional[pulumi.Input[str]] = None):
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if buffer_size is not None:
            pulumi.set(__self__, "buffer_size", buffer_size)
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if filetype is not None:
            pulumi.set(__self__, "filetype", filetype)

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "batch_size")

    @batch_size.setter
    def batch_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "batch_size", value)

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "buffer_size")

    @buffer_size.setter
    def buffer_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "buffer_size", value)

    @property
    @pulumi.getter
    def columns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "columns")

    @columns.setter
    def columns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "columns", value)

    @property
    @pulumi.getter
    def filetype(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "filetype")

    @filetype.setter
    def filetype(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "filetype", value)


@pulumi.input_type
class SourceS3ConfigurationProviderArgs:
    def __init__(__self__, *,
                 bucket: pulumi.Input[str],
                 aws_access_key_id: Optional[pulumi.Input[str]] = None,
                 aws_secret_access_key: Optional[pulumi.Input[str]] = None,
                 endpoint: Optional[pulumi.Input[str]] = None,
                 path_prefix: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "bucket", bucket)
        if aws_access_key_id is not None:
            pulumi.set(__self__, "aws_access_key_id", aws_access_key_id)
        if aws_secret_access_key is not None:
            pulumi.set(__self__, "aws_secret_access_key", aws_secret_access_key)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if path_prefix is not None:
            pulumi.set(__self__, "path_prefix", path_prefix)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Input[str]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: pulumi.Input[str]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="awsAccessKeyId")
    def aws_access_key_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_access_key_id")

    @aws_access_key_id.setter
    def aws_access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_access_key_id", value)

    @property
    @pulumi.getter(name="awsSecretAccessKey")
    def aws_secret_access_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "aws_secret_access_key")

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_secret_access_key", value)

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "endpoint")

    @endpoint.setter
    def endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoint", value)

    @property
    @pulumi.getter(name="pathPrefix")
    def path_prefix(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "path_prefix")

    @path_prefix.setter
    def path_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path_prefix", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceSalesforceConfigurationArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 force_use_bulk_api: Optional[pulumi.Input[bool]] = None,
                 is_sandbox: Optional[pulumi.Input[bool]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 streams_criterias: Optional[pulumi.Input[Sequence[pulumi.Input['SourceSalesforceConfigurationStreamsCriteriaArgs']]]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if force_use_bulk_api is not None:
            pulumi.set(__self__, "force_use_bulk_api", force_use_bulk_api)
        if is_sandbox is not None:
            pulumi.set(__self__, "is_sandbox", is_sandbox)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if streams_criterias is not None:
            pulumi.set(__self__, "streams_criterias", streams_criterias)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="forceUseBulkApi")
    def force_use_bulk_api(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_use_bulk_api")

    @force_use_bulk_api.setter
    def force_use_bulk_api(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_use_bulk_api", value)

    @property
    @pulumi.getter(name="isSandbox")
    def is_sandbox(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_sandbox")

    @is_sandbox.setter
    def is_sandbox(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_sandbox", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="streamsCriterias")
    def streams_criterias(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceSalesforceConfigurationStreamsCriteriaArgs']]]]:
        return pulumi.get(self, "streams_criterias")

    @streams_criterias.setter
    def streams_criterias(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceSalesforceConfigurationStreamsCriteriaArgs']]]]):
        pulumi.set(self, "streams_criterias", value)


@pulumi.input_type
class SourceSalesforceConfigurationStreamsCriteriaArgs:
    def __init__(__self__, *,
                 criteria: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "criteria", criteria)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def criteria(self) -> pulumi.Input[str]:
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: pulumi.Input[str]):
        pulumi.set(self, "criteria", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class SourceSalesloftConfigurationArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['SourceSalesloftConfigurationCredentialsArgs'],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['SourceSalesloftConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['SourceSalesloftConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceSalesloftConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_salesloft_credentials_authenticate_via_api_key: Optional[pulumi.Input['SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKeyArgs']] = None,
                 source_salesloft_credentials_authenticate_via_o_auth: Optional[pulumi.Input['SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuthArgs']] = None,
                 source_salesloft_update_credentials_authenticate_via_api_key: Optional[pulumi.Input['SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKeyArgs']] = None,
                 source_salesloft_update_credentials_authenticate_via_o_auth: Optional[pulumi.Input['SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuthArgs']] = None):
        if source_salesloft_credentials_authenticate_via_api_key is not None:
            pulumi.set(__self__, "source_salesloft_credentials_authenticate_via_api_key", source_salesloft_credentials_authenticate_via_api_key)
        if source_salesloft_credentials_authenticate_via_o_auth is not None:
            pulumi.set(__self__, "source_salesloft_credentials_authenticate_via_o_auth", source_salesloft_credentials_authenticate_via_o_auth)
        if source_salesloft_update_credentials_authenticate_via_api_key is not None:
            pulumi.set(__self__, "source_salesloft_update_credentials_authenticate_via_api_key", source_salesloft_update_credentials_authenticate_via_api_key)
        if source_salesloft_update_credentials_authenticate_via_o_auth is not None:
            pulumi.set(__self__, "source_salesloft_update_credentials_authenticate_via_o_auth", source_salesloft_update_credentials_authenticate_via_o_auth)

    @property
    @pulumi.getter(name="sourceSalesloftCredentialsAuthenticateViaApiKey")
    def source_salesloft_credentials_authenticate_via_api_key(self) -> Optional[pulumi.Input['SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKeyArgs']]:
        return pulumi.get(self, "source_salesloft_credentials_authenticate_via_api_key")

    @source_salesloft_credentials_authenticate_via_api_key.setter
    def source_salesloft_credentials_authenticate_via_api_key(self, value: Optional[pulumi.Input['SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKeyArgs']]):
        pulumi.set(self, "source_salesloft_credentials_authenticate_via_api_key", value)

    @property
    @pulumi.getter(name="sourceSalesloftCredentialsAuthenticateViaOAuth")
    def source_salesloft_credentials_authenticate_via_o_auth(self) -> Optional[pulumi.Input['SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuthArgs']]:
        return pulumi.get(self, "source_salesloft_credentials_authenticate_via_o_auth")

    @source_salesloft_credentials_authenticate_via_o_auth.setter
    def source_salesloft_credentials_authenticate_via_o_auth(self, value: Optional[pulumi.Input['SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuthArgs']]):
        pulumi.set(self, "source_salesloft_credentials_authenticate_via_o_auth", value)

    @property
    @pulumi.getter(name="sourceSalesloftUpdateCredentialsAuthenticateViaApiKey")
    def source_salesloft_update_credentials_authenticate_via_api_key(self) -> Optional[pulumi.Input['SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKeyArgs']]:
        return pulumi.get(self, "source_salesloft_update_credentials_authenticate_via_api_key")

    @source_salesloft_update_credentials_authenticate_via_api_key.setter
    def source_salesloft_update_credentials_authenticate_via_api_key(self, value: Optional[pulumi.Input['SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKeyArgs']]):
        pulumi.set(self, "source_salesloft_update_credentials_authenticate_via_api_key", value)

    @property
    @pulumi.getter(name="sourceSalesloftUpdateCredentialsAuthenticateViaOAuth")
    def source_salesloft_update_credentials_authenticate_via_o_auth(self) -> Optional[pulumi.Input['SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuthArgs']]:
        return pulumi.get(self, "source_salesloft_update_credentials_authenticate_via_o_auth")

    @source_salesloft_update_credentials_authenticate_via_o_auth.setter
    def source_salesloft_update_credentials_authenticate_via_o_auth(self, value: Optional[pulumi.Input['SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuthArgs']]):
        pulumi.set(self, "source_salesloft_update_credentials_authenticate_via_o_auth", value)


@pulumi.input_type
class SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaApiKeyArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 auth_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceSalesloftConfigurationCredentialsSourceSalesloftCredentialsAuthenticateViaOAuthArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_expiry_date: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_expiry_date", value)


@pulumi.input_type
class SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaApiKeyArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 auth_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceSalesloftConfigurationCredentialsSourceSalesloftUpdateCredentialsAuthenticateViaOAuthArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_expiry_date: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_expiry_date", value)


@pulumi.input_type
class SourceSapFieldglassConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceSecodaConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceSendgridConfigurationArgs:
    def __init__(__self__, *,
                 apikey: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_time: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "apikey", apikey)
        pulumi.set(__self__, "source_type", source_type)
        if start_time is not None:
            pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def apikey(self) -> pulumi.Input[str]:
        return pulumi.get(self, "apikey")

    @apikey.setter
    def apikey(self, value: pulumi.Input[str]):
        pulumi.set(self, "apikey", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class SourceSendinblueConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceSenseforceConfigurationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 backend_url: pulumi.Input[str],
                 dataset_id: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 slice_range: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "backend_url", backend_url)
        pulumi.set(__self__, "dataset_id", dataset_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if slice_range is not None:
            pulumi.set(__self__, "slice_range", slice_range)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="backendUrl")
    def backend_url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "backend_url")

    @backend_url.setter
    def backend_url(self, value: pulumi.Input[str]):
        pulumi.set(self, "backend_url", value)

    @property
    @pulumi.getter(name="datasetId")
    def dataset_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dataset_id")

    @dataset_id.setter
    def dataset_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="sliceRange")
    def slice_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "slice_range")

    @slice_range.setter
    def slice_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slice_range", value)


@pulumi.input_type
class SourceSentryConfigurationArgs:
    def __init__(__self__, *,
                 auth_token: pulumi.Input[str],
                 organization: pulumi.Input[str],
                 project: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 discover_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 hostname: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "source_type", source_type)
        if discover_fields is not None:
            pulumi.set(__self__, "discover_fields", discover_fields)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="discoverFields")
    def discover_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "discover_fields")

    @discover_fields.setter
    def discover_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "discover_fields", value)

    @property
    @pulumi.getter
    def hostname(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hostname")

    @hostname.setter
    def hostname(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hostname", value)


@pulumi.input_type
class SourceSftpBulkConfigurationArgs:
    def __init__(__self__, *,
                 folder_path: pulumi.Input[str],
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 stream_name: pulumi.Input[str],
                 username: pulumi.Input[str],
                 file_most_recent: Optional[pulumi.Input[bool]] = None,
                 file_pattern: Optional[pulumi.Input[str]] = None,
                 file_type: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 private_key: Optional[pulumi.Input[str]] = None,
                 separator: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "folder_path", folder_path)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "stream_name", stream_name)
        pulumi.set(__self__, "username", username)
        if file_most_recent is not None:
            pulumi.set(__self__, "file_most_recent", file_most_recent)
        if file_pattern is not None:
            pulumi.set(__self__, "file_pattern", file_pattern)
        if file_type is not None:
            pulumi.set(__self__, "file_type", file_type)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if separator is not None:
            pulumi.set(__self__, "separator", separator)

    @property
    @pulumi.getter(name="folderPath")
    def folder_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "folder_path")

    @folder_path.setter
    def folder_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "folder_path", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "stream_name")

    @stream_name.setter
    def stream_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "stream_name", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="fileMostRecent")
    def file_most_recent(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "file_most_recent")

    @file_most_recent.setter
    def file_most_recent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "file_most_recent", value)

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_pattern")

    @file_pattern.setter
    def file_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_pattern", value)

    @property
    @pulumi.getter(name="fileType")
    def file_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_type")

    @file_type.setter
    def file_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_type", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter
    def separator(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "separator")

    @separator.setter
    def separator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "separator", value)


@pulumi.input_type
class SourceSftpConfigurationArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 source_type: pulumi.Input[str],
                 user: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceSftpConfigurationCredentialsArgs']] = None,
                 file_pattern: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[str]] = None,
                 folder_path: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "user", user)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if file_pattern is not None:
            pulumi.set(__self__, "file_pattern", file_pattern)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if folder_path is not None:
            pulumi.set(__self__, "folder_path", folder_path)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def user(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: pulumi.Input[str]):
        pulumi.set(self, "user", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceSftpConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceSftpConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="filePattern")
    def file_pattern(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_pattern")

    @file_pattern.setter
    def file_pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_pattern", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter(name="folderPath")
    def folder_path(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "folder_path")

    @folder_path.setter
    def folder_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_path", value)


@pulumi.input_type
class SourceSftpConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_sftp_authentication_wildcard_password_authentication: Optional[pulumi.Input['SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthenticationArgs']] = None,
                 source_sftp_authentication_wildcard_ssh_key_authentication: Optional[pulumi.Input['SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthenticationArgs']] = None,
                 source_sftp_update_authentication_wildcard_password_authentication: Optional[pulumi.Input['SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthenticationArgs']] = None,
                 source_sftp_update_authentication_wildcard_ssh_key_authentication: Optional[pulumi.Input['SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthenticationArgs']] = None):
        if source_sftp_authentication_wildcard_password_authentication is not None:
            pulumi.set(__self__, "source_sftp_authentication_wildcard_password_authentication", source_sftp_authentication_wildcard_password_authentication)
        if source_sftp_authentication_wildcard_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_sftp_authentication_wildcard_ssh_key_authentication", source_sftp_authentication_wildcard_ssh_key_authentication)
        if source_sftp_update_authentication_wildcard_password_authentication is not None:
            pulumi.set(__self__, "source_sftp_update_authentication_wildcard_password_authentication", source_sftp_update_authentication_wildcard_password_authentication)
        if source_sftp_update_authentication_wildcard_ssh_key_authentication is not None:
            pulumi.set(__self__, "source_sftp_update_authentication_wildcard_ssh_key_authentication", source_sftp_update_authentication_wildcard_ssh_key_authentication)

    @property
    @pulumi.getter(name="sourceSftpAuthenticationWildcardPasswordAuthentication")
    def source_sftp_authentication_wildcard_password_authentication(self) -> Optional[pulumi.Input['SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_sftp_authentication_wildcard_password_authentication")

    @source_sftp_authentication_wildcard_password_authentication.setter
    def source_sftp_authentication_wildcard_password_authentication(self, value: Optional[pulumi.Input['SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_sftp_authentication_wildcard_password_authentication", value)

    @property
    @pulumi.getter(name="sourceSftpAuthenticationWildcardSshKeyAuthentication")
    def source_sftp_authentication_wildcard_ssh_key_authentication(self) -> Optional[pulumi.Input['SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_sftp_authentication_wildcard_ssh_key_authentication")

    @source_sftp_authentication_wildcard_ssh_key_authentication.setter
    def source_sftp_authentication_wildcard_ssh_key_authentication(self, value: Optional[pulumi.Input['SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_sftp_authentication_wildcard_ssh_key_authentication", value)

    @property
    @pulumi.getter(name="sourceSftpUpdateAuthenticationWildcardPasswordAuthentication")
    def source_sftp_update_authentication_wildcard_password_authentication(self) -> Optional[pulumi.Input['SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthenticationArgs']]:
        return pulumi.get(self, "source_sftp_update_authentication_wildcard_password_authentication")

    @source_sftp_update_authentication_wildcard_password_authentication.setter
    def source_sftp_update_authentication_wildcard_password_authentication(self, value: Optional[pulumi.Input['SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthenticationArgs']]):
        pulumi.set(self, "source_sftp_update_authentication_wildcard_password_authentication", value)

    @property
    @pulumi.getter(name="sourceSftpUpdateAuthenticationWildcardSshKeyAuthentication")
    def source_sftp_update_authentication_wildcard_ssh_key_authentication(self) -> Optional[pulumi.Input['SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthenticationArgs']]:
        return pulumi.get(self, "source_sftp_update_authentication_wildcard_ssh_key_authentication")

    @source_sftp_update_authentication_wildcard_ssh_key_authentication.setter
    def source_sftp_update_authentication_wildcard_ssh_key_authentication(self, value: Optional[pulumi.Input['SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthenticationArgs']]):
        pulumi.set(self, "source_sftp_update_authentication_wildcard_ssh_key_authentication", value)


@pulumi.input_type
class SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 auth_method: pulumi.Input[str],
                 auth_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "auth_user_password", auth_user_password)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="authUserPassword")
    def auth_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_user_password")

    @auth_user_password.setter
    def auth_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_user_password", value)


@pulumi.input_type
class SourceSftpConfigurationCredentialsSourceSftpAuthenticationWildcardSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 auth_method: pulumi.Input[str],
                 auth_ssh_key: pulumi.Input[str]):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "auth_ssh_key", auth_ssh_key)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="authSshKey")
    def auth_ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_ssh_key")

    @auth_ssh_key.setter
    def auth_ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_ssh_key", value)


@pulumi.input_type
class SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardPasswordAuthenticationArgs:
    def __init__(__self__, *,
                 auth_method: pulumi.Input[str],
                 auth_user_password: pulumi.Input[str]):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "auth_user_password", auth_user_password)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="authUserPassword")
    def auth_user_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_user_password")

    @auth_user_password.setter
    def auth_user_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_user_password", value)


@pulumi.input_type
class SourceSftpConfigurationCredentialsSourceSftpUpdateAuthenticationWildcardSshKeyAuthenticationArgs:
    def __init__(__self__, *,
                 auth_method: pulumi.Input[str],
                 auth_ssh_key: pulumi.Input[str]):
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "auth_ssh_key", auth_ssh_key)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="authSshKey")
    def auth_ssh_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_ssh_key")

    @auth_ssh_key.setter
    def auth_ssh_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_ssh_key", value)


@pulumi.input_type
class SourceShopifyConfigurationArgs:
    def __init__(__self__, *,
                 shop: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceShopifyConfigurationCredentialsArgs']] = None):
        pulumi.set(__self__, "shop", shop)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter
    def shop(self) -> pulumi.Input[str]:
        return pulumi.get(self, "shop")

    @shop.setter
    def shop(self, value: pulumi.Input[str]):
        pulumi.set(self, "shop", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceShopifyConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceShopifyConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceShopifyConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_shopify_shopify_authorization_method_api_password: Optional[pulumi.Input['SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPasswordArgs']] = None,
                 source_shopify_shopify_authorization_method_o_auth20: Optional[pulumi.Input['SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20Args']] = None,
                 source_shopify_update_shopify_authorization_method_api_password: Optional[pulumi.Input['SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPasswordArgs']] = None,
                 source_shopify_update_shopify_authorization_method_o_auth20: Optional[pulumi.Input['SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20Args']] = None):
        if source_shopify_shopify_authorization_method_api_password is not None:
            pulumi.set(__self__, "source_shopify_shopify_authorization_method_api_password", source_shopify_shopify_authorization_method_api_password)
        if source_shopify_shopify_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_shopify_shopify_authorization_method_o_auth20", source_shopify_shopify_authorization_method_o_auth20)
        if source_shopify_update_shopify_authorization_method_api_password is not None:
            pulumi.set(__self__, "source_shopify_update_shopify_authorization_method_api_password", source_shopify_update_shopify_authorization_method_api_password)
        if source_shopify_update_shopify_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_shopify_update_shopify_authorization_method_o_auth20", source_shopify_update_shopify_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceShopifyShopifyAuthorizationMethodApiPassword")
    def source_shopify_shopify_authorization_method_api_password(self) -> Optional[pulumi.Input['SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPasswordArgs']]:
        return pulumi.get(self, "source_shopify_shopify_authorization_method_api_password")

    @source_shopify_shopify_authorization_method_api_password.setter
    def source_shopify_shopify_authorization_method_api_password(self, value: Optional[pulumi.Input['SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPasswordArgs']]):
        pulumi.set(self, "source_shopify_shopify_authorization_method_api_password", value)

    @property
    @pulumi.getter(name="sourceShopifyShopifyAuthorizationMethodOAuth20")
    def source_shopify_shopify_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_shopify_shopify_authorization_method_o_auth20")

    @source_shopify_shopify_authorization_method_o_auth20.setter
    def source_shopify_shopify_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_shopify_shopify_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceShopifyUpdateShopifyAuthorizationMethodApiPassword")
    def source_shopify_update_shopify_authorization_method_api_password(self) -> Optional[pulumi.Input['SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPasswordArgs']]:
        return pulumi.get(self, "source_shopify_update_shopify_authorization_method_api_password")

    @source_shopify_update_shopify_authorization_method_api_password.setter
    def source_shopify_update_shopify_authorization_method_api_password(self, value: Optional[pulumi.Input['SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPasswordArgs']]):
        pulumi.set(self, "source_shopify_update_shopify_authorization_method_api_password", value)

    @property
    @pulumi.getter(name="sourceShopifyUpdateShopifyAuthorizationMethodOAuth20")
    def source_shopify_update_shopify_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_shopify_update_shopify_authorization_method_o_auth20")

    @source_shopify_update_shopify_authorization_method_o_auth20.setter
    def source_shopify_update_shopify_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_shopify_update_shopify_authorization_method_o_auth20", value)


@pulumi.input_type
class SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodApiPasswordArgs:
    def __init__(__self__, *,
                 api_password: pulumi.Input[str],
                 auth_method: pulumi.Input[str]):
        pulumi.set(__self__, "api_password", api_password)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="apiPassword")
    def api_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_password")

    @api_password.setter
    def api_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_password", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourceShopifyConfigurationCredentialsSourceShopifyShopifyAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 auth_method: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "auth_method", auth_method)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodApiPasswordArgs:
    def __init__(__self__, *,
                 api_password: pulumi.Input[str],
                 auth_method: pulumi.Input[str]):
        pulumi.set(__self__, "api_password", api_password)
        pulumi.set(__self__, "auth_method", auth_method)

    @property
    @pulumi.getter(name="apiPassword")
    def api_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_password")

    @api_password.setter
    def api_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_password", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)


@pulumi.input_type
class SourceShopifyConfigurationCredentialsSourceShopifyUpdateShopifyAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 auth_method: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "auth_method", auth_method)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceShortioConfigurationArgs:
    def __init__(__self__, *,
                 domain_id: pulumi.Input[str],
                 secret_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "secret_key", secret_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domain_id")

    @domain_id.setter
    def domain_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "domain_id", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceSlackConfigurationArgs:
    def __init__(__self__, *,
                 join_channels: pulumi.Input[bool],
                 lookback_window: pulumi.Input[int],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 channel_filters: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 credentials: Optional[pulumi.Input['SourceSlackConfigurationCredentialsArgs']] = None):
        pulumi.set(__self__, "join_channels", join_channels)
        pulumi.set(__self__, "lookback_window", lookback_window)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if channel_filters is not None:
            pulumi.set(__self__, "channel_filters", channel_filters)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="joinChannels")
    def join_channels(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "join_channels")

    @join_channels.setter
    def join_channels(self, value: pulumi.Input[bool]):
        pulumi.set(self, "join_channels", value)

    @property
    @pulumi.getter(name="lookbackWindow")
    def lookback_window(self) -> pulumi.Input[int]:
        return pulumi.get(self, "lookback_window")

    @lookback_window.setter
    def lookback_window(self, value: pulumi.Input[int]):
        pulumi.set(self, "lookback_window", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="channelFilters")
    def channel_filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "channel_filters")

    @channel_filters.setter
    def channel_filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "channel_filters", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceSlackConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceSlackConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceSlackConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_slack_authentication_mechanism_api_token: Optional[pulumi.Input['SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiTokenArgs']] = None,
                 source_slack_authentication_mechanism_sign_in_via_slack_o_auth: Optional[pulumi.Input['SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuthArgs']] = None,
                 source_slack_update_authentication_mechanism_api_token: Optional[pulumi.Input['SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiTokenArgs']] = None,
                 source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth: Optional[pulumi.Input['SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthArgs']] = None):
        if source_slack_authentication_mechanism_api_token is not None:
            pulumi.set(__self__, "source_slack_authentication_mechanism_api_token", source_slack_authentication_mechanism_api_token)
        if source_slack_authentication_mechanism_sign_in_via_slack_o_auth is not None:
            pulumi.set(__self__, "source_slack_authentication_mechanism_sign_in_via_slack_o_auth", source_slack_authentication_mechanism_sign_in_via_slack_o_auth)
        if source_slack_update_authentication_mechanism_api_token is not None:
            pulumi.set(__self__, "source_slack_update_authentication_mechanism_api_token", source_slack_update_authentication_mechanism_api_token)
        if source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth is not None:
            pulumi.set(__self__, "source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth", source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth)

    @property
    @pulumi.getter(name="sourceSlackAuthenticationMechanismApiToken")
    def source_slack_authentication_mechanism_api_token(self) -> Optional[pulumi.Input['SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiTokenArgs']]:
        return pulumi.get(self, "source_slack_authentication_mechanism_api_token")

    @source_slack_authentication_mechanism_api_token.setter
    def source_slack_authentication_mechanism_api_token(self, value: Optional[pulumi.Input['SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiTokenArgs']]):
        pulumi.set(self, "source_slack_authentication_mechanism_api_token", value)

    @property
    @pulumi.getter(name="sourceSlackAuthenticationMechanismSignInViaSlackOAuth")
    def source_slack_authentication_mechanism_sign_in_via_slack_o_auth(self) -> Optional[pulumi.Input['SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuthArgs']]:
        return pulumi.get(self, "source_slack_authentication_mechanism_sign_in_via_slack_o_auth")

    @source_slack_authentication_mechanism_sign_in_via_slack_o_auth.setter
    def source_slack_authentication_mechanism_sign_in_via_slack_o_auth(self, value: Optional[pulumi.Input['SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuthArgs']]):
        pulumi.set(self, "source_slack_authentication_mechanism_sign_in_via_slack_o_auth", value)

    @property
    @pulumi.getter(name="sourceSlackUpdateAuthenticationMechanismApiToken")
    def source_slack_update_authentication_mechanism_api_token(self) -> Optional[pulumi.Input['SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiTokenArgs']]:
        return pulumi.get(self, "source_slack_update_authentication_mechanism_api_token")

    @source_slack_update_authentication_mechanism_api_token.setter
    def source_slack_update_authentication_mechanism_api_token(self, value: Optional[pulumi.Input['SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiTokenArgs']]):
        pulumi.set(self, "source_slack_update_authentication_mechanism_api_token", value)

    @property
    @pulumi.getter(name="sourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuth")
    def source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth(self) -> Optional[pulumi.Input['SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthArgs']]:
        return pulumi.get(self, "source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth")

    @source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth.setter
    def source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth(self, value: Optional[pulumi.Input['SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthArgs']]):
        pulumi.set(self, "source_slack_update_authentication_mechanism_sign_in_via_slack_o_auth", value)


@pulumi.input_type
class SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismApiTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 option_title: pulumi.Input[str]):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceSlackConfigurationCredentialsSourceSlackAuthenticationMechanismSignInViaSlackOAuthArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 option_title: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismApiTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 option_title: pulumi.Input[str]):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceSlackConfigurationCredentialsSourceSlackUpdateAuthenticationMechanismSignInViaSlackOAuthArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 option_title: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceSmailyConfigurationArgs:
    def __init__(__self__, *,
                 api_password: pulumi.Input[str],
                 api_subdomain: pulumi.Input[str],
                 api_username: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_password", api_password)
        pulumi.set(__self__, "api_subdomain", api_subdomain)
        pulumi.set(__self__, "api_username", api_username)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiPassword")
    def api_password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_password")

    @api_password.setter
    def api_password(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_password", value)

    @property
    @pulumi.getter(name="apiSubdomain")
    def api_subdomain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_subdomain")

    @api_subdomain.setter
    def api_subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_subdomain", value)

    @property
    @pulumi.getter(name="apiUsername")
    def api_username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_username")

    @api_username.setter
    def api_username(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_username", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceSmartengageConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceSmartsheetsConfigurationArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['SourceSmartsheetsConfigurationCredentialsArgs'],
                 source_type: pulumi.Input[str],
                 spreadsheet_id: pulumi.Input[str],
                 metadata_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 start_datetime: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "spreadsheet_id", spreadsheet_id)
        if metadata_fields is not None:
            pulumi.set(__self__, "metadata_fields", metadata_fields)
        if start_datetime is not None:
            pulumi.set(__self__, "start_datetime", start_datetime)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['SourceSmartsheetsConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['SourceSmartsheetsConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="spreadsheetId")
    def spreadsheet_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "spreadsheet_id")

    @spreadsheet_id.setter
    def spreadsheet_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "spreadsheet_id", value)

    @property
    @pulumi.getter(name="metadataFields")
    def metadata_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "metadata_fields")

    @metadata_fields.setter
    def metadata_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "metadata_fields", value)

    @property
    @pulumi.getter(name="startDatetime")
    def start_datetime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_datetime")

    @start_datetime.setter
    def start_datetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_datetime", value)


@pulumi.input_type
class SourceSmartsheetsConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_smartsheets_authorization_method_api_access_token: Optional[pulumi.Input['SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessTokenArgs']] = None,
                 source_smartsheets_authorization_method_o_auth20: Optional[pulumi.Input['SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20Args']] = None,
                 source_smartsheets_update_authorization_method_api_access_token: Optional[pulumi.Input['SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessTokenArgs']] = None,
                 source_smartsheets_update_authorization_method_o_auth20: Optional[pulumi.Input['SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20Args']] = None):
        if source_smartsheets_authorization_method_api_access_token is not None:
            pulumi.set(__self__, "source_smartsheets_authorization_method_api_access_token", source_smartsheets_authorization_method_api_access_token)
        if source_smartsheets_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_smartsheets_authorization_method_o_auth20", source_smartsheets_authorization_method_o_auth20)
        if source_smartsheets_update_authorization_method_api_access_token is not None:
            pulumi.set(__self__, "source_smartsheets_update_authorization_method_api_access_token", source_smartsheets_update_authorization_method_api_access_token)
        if source_smartsheets_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_smartsheets_update_authorization_method_o_auth20", source_smartsheets_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceSmartsheetsAuthorizationMethodApiAccessToken")
    def source_smartsheets_authorization_method_api_access_token(self) -> Optional[pulumi.Input['SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessTokenArgs']]:
        return pulumi.get(self, "source_smartsheets_authorization_method_api_access_token")

    @source_smartsheets_authorization_method_api_access_token.setter
    def source_smartsheets_authorization_method_api_access_token(self, value: Optional[pulumi.Input['SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessTokenArgs']]):
        pulumi.set(self, "source_smartsheets_authorization_method_api_access_token", value)

    @property
    @pulumi.getter(name="sourceSmartsheetsAuthorizationMethodOAuth20")
    def source_smartsheets_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_smartsheets_authorization_method_o_auth20")

    @source_smartsheets_authorization_method_o_auth20.setter
    def source_smartsheets_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_smartsheets_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceSmartsheetsUpdateAuthorizationMethodApiAccessToken")
    def source_smartsheets_update_authorization_method_api_access_token(self) -> Optional[pulumi.Input['SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessTokenArgs']]:
        return pulumi.get(self, "source_smartsheets_update_authorization_method_api_access_token")

    @source_smartsheets_update_authorization_method_api_access_token.setter
    def source_smartsheets_update_authorization_method_api_access_token(self, value: Optional[pulumi.Input['SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessTokenArgs']]):
        pulumi.set(self, "source_smartsheets_update_authorization_method_api_access_token", value)

    @property
    @pulumi.getter(name="sourceSmartsheetsUpdateAuthorizationMethodOAuth20")
    def source_smartsheets_update_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_smartsheets_update_authorization_method_o_auth20")

    @source_smartsheets_update_authorization_method_o_auth20.setter
    def source_smartsheets_update_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_smartsheets_update_authorization_method_o_auth20", value)


@pulumi.input_type
class SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodApiAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_expiry_date: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_expiry_date", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodApiAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceSmartsheetsConfigurationCredentialsSourceSmartsheetsUpdateAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_expiry_date: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_expiry_date", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceSnapchatMarketingConfigurationArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 end_date: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceSnowflakeConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 host: pulumi.Input[str],
                 role: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 warehouse: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsArgs']] = None,
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 schema: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "warehouse", warehouse)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if schema is not None:
            pulumi.set(__self__, "schema", schema)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def warehouse(self) -> pulumi.Input[str]:
        return pulumi.get(self, "warehouse")

    @warehouse.setter
    def warehouse(self, value: pulumi.Input[str]):
        pulumi.set(self, "warehouse", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter
    def schema(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schema", value)


@pulumi.input_type
class SourceSnowflakeConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_snowflake_authorization_method_o_auth20: Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20Args']] = None,
                 source_snowflake_authorization_method_username_and_password: Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPasswordArgs']] = None,
                 source_snowflake_update_authorization_method_o_auth20: Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20Args']] = None,
                 source_snowflake_update_authorization_method_username_and_password: Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs']] = None):
        if source_snowflake_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_snowflake_authorization_method_o_auth20", source_snowflake_authorization_method_o_auth20)
        if source_snowflake_authorization_method_username_and_password is not None:
            pulumi.set(__self__, "source_snowflake_authorization_method_username_and_password", source_snowflake_authorization_method_username_and_password)
        if source_snowflake_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_snowflake_update_authorization_method_o_auth20", source_snowflake_update_authorization_method_o_auth20)
        if source_snowflake_update_authorization_method_username_and_password is not None:
            pulumi.set(__self__, "source_snowflake_update_authorization_method_username_and_password", source_snowflake_update_authorization_method_username_and_password)

    @property
    @pulumi.getter(name="sourceSnowflakeAuthorizationMethodOAuth20")
    def source_snowflake_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_snowflake_authorization_method_o_auth20")

    @source_snowflake_authorization_method_o_auth20.setter
    def source_snowflake_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_snowflake_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceSnowflakeAuthorizationMethodUsernameAndPassword")
    def source_snowflake_authorization_method_username_and_password(self) -> Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPasswordArgs']]:
        return pulumi.get(self, "source_snowflake_authorization_method_username_and_password")

    @source_snowflake_authorization_method_username_and_password.setter
    def source_snowflake_authorization_method_username_and_password(self, value: Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPasswordArgs']]):
        pulumi.set(self, "source_snowflake_authorization_method_username_and_password", value)

    @property
    @pulumi.getter(name="sourceSnowflakeUpdateAuthorizationMethodOAuth20")
    def source_snowflake_update_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_snowflake_update_authorization_method_o_auth20")

    @source_snowflake_update_authorization_method_o_auth20.setter
    def source_snowflake_update_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_snowflake_update_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceSnowflakeUpdateAuthorizationMethodUsernameAndPassword")
    def source_snowflake_update_authorization_method_username_and_password(self) -> Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs']]:
        return pulumi.get(self, "source_snowflake_update_authorization_method_username_and_password")

    @source_snowflake_update_authorization_method_username_and_password.setter
    def source_snowflake_update_authorization_method_username_and_password(self, value: Optional[pulumi.Input['SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs']]):
        pulumi.set(self, "source_snowflake_update_authorization_method_username_and_password", value)


@pulumi.input_type
class SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class SourceSnowflakeConfigurationCredentialsSourceSnowflakeAuthorizationMethodUsernameAndPasswordArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class SourceSnowflakeConfigurationCredentialsSourceSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class SourceSonarCloudConfigurationArgs:
    def __init__(__self__, *,
                 component_keys: pulumi.Input[Sequence[pulumi.Input[str]]],
                 organization: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 user_token: pulumi.Input[str],
                 end_date: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "component_keys", component_keys)
        pulumi.set(__self__, "organization", organization)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "user_token", user_token)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="componentKeys")
    def component_keys(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "component_keys")

    @component_keys.setter
    def component_keys(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "component_keys", value)

    @property
    @pulumi.getter
    def organization(self) -> pulumi.Input[str]:
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: pulumi.Input[str]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="userToken")
    def user_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "user_token")

    @user_token.setter
    def user_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_token", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceSpaceXApiConfigurationArgs:
    def __init__(__self__, *,
                 id: Optional[pulumi.Input[str]] = None,
                 options: Optional[pulumi.Input[str]] = None,
                 source_type: Optional[pulumi.Input[str]] = None):
        if id is not None:
            pulumi.set(__self__, "id", id)
        if options is not None:
            pulumi.set(__self__, "options", options)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def options(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "options")

    @options.setter
    def options(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "options", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceSquareConfigurationArgs:
    def __init__(__self__, *,
                 is_sandbox: pulumi.Input[bool],
                 source_type: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceSquareConfigurationCredentialsArgs']] = None,
                 include_deleted_objects: Optional[pulumi.Input[bool]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "is_sandbox", is_sandbox)
        pulumi.set(__self__, "source_type", source_type)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if include_deleted_objects is not None:
            pulumi.set(__self__, "include_deleted_objects", include_deleted_objects)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="isSandbox")
    def is_sandbox(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "is_sandbox")

    @is_sandbox.setter
    def is_sandbox(self, value: pulumi.Input[bool]):
        pulumi.set(self, "is_sandbox", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceSquareConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceSquareConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="includeDeletedObjects")
    def include_deleted_objects(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_deleted_objects")

    @include_deleted_objects.setter
    def include_deleted_objects(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_deleted_objects", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceSquareConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_square_authentication_api_key: Optional[pulumi.Input['SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKeyArgs']] = None,
                 source_square_authentication_oauth_authentication: Optional[pulumi.Input['SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthenticationArgs']] = None,
                 source_square_update_authentication_api_key: Optional[pulumi.Input['SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKeyArgs']] = None,
                 source_square_update_authentication_oauth_authentication: Optional[pulumi.Input['SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthenticationArgs']] = None):
        if source_square_authentication_api_key is not None:
            pulumi.set(__self__, "source_square_authentication_api_key", source_square_authentication_api_key)
        if source_square_authentication_oauth_authentication is not None:
            pulumi.set(__self__, "source_square_authentication_oauth_authentication", source_square_authentication_oauth_authentication)
        if source_square_update_authentication_api_key is not None:
            pulumi.set(__self__, "source_square_update_authentication_api_key", source_square_update_authentication_api_key)
        if source_square_update_authentication_oauth_authentication is not None:
            pulumi.set(__self__, "source_square_update_authentication_oauth_authentication", source_square_update_authentication_oauth_authentication)

    @property
    @pulumi.getter(name="sourceSquareAuthenticationApiKey")
    def source_square_authentication_api_key(self) -> Optional[pulumi.Input['SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKeyArgs']]:
        return pulumi.get(self, "source_square_authentication_api_key")

    @source_square_authentication_api_key.setter
    def source_square_authentication_api_key(self, value: Optional[pulumi.Input['SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKeyArgs']]):
        pulumi.set(self, "source_square_authentication_api_key", value)

    @property
    @pulumi.getter(name="sourceSquareAuthenticationOauthAuthentication")
    def source_square_authentication_oauth_authentication(self) -> Optional[pulumi.Input['SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthenticationArgs']]:
        return pulumi.get(self, "source_square_authentication_oauth_authentication")

    @source_square_authentication_oauth_authentication.setter
    def source_square_authentication_oauth_authentication(self, value: Optional[pulumi.Input['SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthenticationArgs']]):
        pulumi.set(self, "source_square_authentication_oauth_authentication", value)

    @property
    @pulumi.getter(name="sourceSquareUpdateAuthenticationApiKey")
    def source_square_update_authentication_api_key(self) -> Optional[pulumi.Input['SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKeyArgs']]:
        return pulumi.get(self, "source_square_update_authentication_api_key")

    @source_square_update_authentication_api_key.setter
    def source_square_update_authentication_api_key(self, value: Optional[pulumi.Input['SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKeyArgs']]):
        pulumi.set(self, "source_square_update_authentication_api_key", value)

    @property
    @pulumi.getter(name="sourceSquareUpdateAuthenticationOauthAuthentication")
    def source_square_update_authentication_oauth_authentication(self) -> Optional[pulumi.Input['SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthenticationArgs']]:
        return pulumi.get(self, "source_square_update_authentication_oauth_authentication")

    @source_square_update_authentication_oauth_authentication.setter
    def source_square_update_authentication_oauth_authentication(self, value: Optional[pulumi.Input['SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthenticationArgs']]):
        pulumi.set(self, "source_square_update_authentication_oauth_authentication", value)


@pulumi.input_type
class SourceSquareConfigurationCredentialsSourceSquareAuthenticationApiKeyArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 auth_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceSquareConfigurationCredentialsSourceSquareAuthenticationOauthAuthenticationArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationApiKeyArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 auth_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceSquareConfigurationCredentialsSourceSquareUpdateAuthenticationOauthAuthenticationArgs:
    def __init__(__self__, *,
                 auth_type: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str]):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class SourceStravaConfigurationArgs:
    def __init__(__self__, *,
                 athlete_id: pulumi.Input[int],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "athlete_id", athlete_id)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="athleteId")
    def athlete_id(self) -> pulumi.Input[int]:
        return pulumi.get(self, "athlete_id")

    @athlete_id.setter
    def athlete_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "athlete_id", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceStripeConfigurationArgs:
    def __init__(__self__, *,
                 account_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 lookback_window_days: Optional[pulumi.Input[int]] = None,
                 slice_range: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if lookback_window_days is not None:
            pulumi.set(__self__, "lookback_window_days", lookback_window_days)
        if slice_range is not None:
            pulumi.set(__self__, "slice_range", slice_range)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="lookbackWindowDays")
    def lookback_window_days(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lookback_window_days")

    @lookback_window_days.setter
    def lookback_window_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lookback_window_days", value)

    @property
    @pulumi.getter(name="sliceRange")
    def slice_range(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "slice_range")

    @slice_range.setter
    def slice_range(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "slice_range", value)


@pulumi.input_type
class SourceSurveySparrowConfigurationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 region: Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionArgs']] = None,
                 survey_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if survey_ids is not None:
            pulumi.set(__self__, "survey_ids", survey_ids)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionArgs']]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionArgs']]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="surveyIds")
    def survey_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "survey_ids")

    @survey_ids.setter
    def survey_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "survey_ids", value)


@pulumi.input_type
class SourceSurveySparrowConfigurationRegionArgs:
    def __init__(__self__, *,
                 source_survey_sparrow_base_url_eu_based_account: Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccountArgs']] = None,
                 source_survey_sparrow_base_url_global_account: Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccountArgs']] = None,
                 source_survey_sparrow_update_base_url_eu_based_account: Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccountArgs']] = None,
                 source_survey_sparrow_update_base_url_global_account: Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccountArgs']] = None):
        if source_survey_sparrow_base_url_eu_based_account is not None:
            pulumi.set(__self__, "source_survey_sparrow_base_url_eu_based_account", source_survey_sparrow_base_url_eu_based_account)
        if source_survey_sparrow_base_url_global_account is not None:
            pulumi.set(__self__, "source_survey_sparrow_base_url_global_account", source_survey_sparrow_base_url_global_account)
        if source_survey_sparrow_update_base_url_eu_based_account is not None:
            pulumi.set(__self__, "source_survey_sparrow_update_base_url_eu_based_account", source_survey_sparrow_update_base_url_eu_based_account)
        if source_survey_sparrow_update_base_url_global_account is not None:
            pulumi.set(__self__, "source_survey_sparrow_update_base_url_global_account", source_survey_sparrow_update_base_url_global_account)

    @property
    @pulumi.getter(name="sourceSurveySparrowBaseUrlEuBasedAccount")
    def source_survey_sparrow_base_url_eu_based_account(self) -> Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccountArgs']]:
        return pulumi.get(self, "source_survey_sparrow_base_url_eu_based_account")

    @source_survey_sparrow_base_url_eu_based_account.setter
    def source_survey_sparrow_base_url_eu_based_account(self, value: Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccountArgs']]):
        pulumi.set(self, "source_survey_sparrow_base_url_eu_based_account", value)

    @property
    @pulumi.getter(name="sourceSurveySparrowBaseUrlGlobalAccount")
    def source_survey_sparrow_base_url_global_account(self) -> Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccountArgs']]:
        return pulumi.get(self, "source_survey_sparrow_base_url_global_account")

    @source_survey_sparrow_base_url_global_account.setter
    def source_survey_sparrow_base_url_global_account(self, value: Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccountArgs']]):
        pulumi.set(self, "source_survey_sparrow_base_url_global_account", value)

    @property
    @pulumi.getter(name="sourceSurveySparrowUpdateBaseUrlEuBasedAccount")
    def source_survey_sparrow_update_base_url_eu_based_account(self) -> Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccountArgs']]:
        return pulumi.get(self, "source_survey_sparrow_update_base_url_eu_based_account")

    @source_survey_sparrow_update_base_url_eu_based_account.setter
    def source_survey_sparrow_update_base_url_eu_based_account(self, value: Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccountArgs']]):
        pulumi.set(self, "source_survey_sparrow_update_base_url_eu_based_account", value)

    @property
    @pulumi.getter(name="sourceSurveySparrowUpdateBaseUrlGlobalAccount")
    def source_survey_sparrow_update_base_url_global_account(self) -> Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccountArgs']]:
        return pulumi.get(self, "source_survey_sparrow_update_base_url_global_account")

    @source_survey_sparrow_update_base_url_global_account.setter
    def source_survey_sparrow_update_base_url_global_account(self, value: Optional[pulumi.Input['SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccountArgs']]):
        pulumi.set(self, "source_survey_sparrow_update_base_url_global_account", value)


@pulumi.input_type
class SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlEuBasedAccountArgs:
    def __init__(__self__, *,
                 url_base: Optional[pulumi.Input[str]] = None):
        if url_base is not None:
            pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_base")

    @url_base.setter
    def url_base(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_base", value)


@pulumi.input_type
class SourceSurveySparrowConfigurationRegionSourceSurveySparrowBaseUrlGlobalAccountArgs:
    def __init__(__self__, *,
                 url_base: Optional[pulumi.Input[str]] = None):
        if url_base is not None:
            pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_base")

    @url_base.setter
    def url_base(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_base", value)


@pulumi.input_type
class SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlEuBasedAccountArgs:
    def __init__(__self__, *,
                 url_base: Optional[pulumi.Input[str]] = None):
        if url_base is not None:
            pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_base")

    @url_base.setter
    def url_base(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_base", value)


@pulumi.input_type
class SourceSurveySparrowConfigurationRegionSourceSurveySparrowUpdateBaseUrlGlobalAccountArgs:
    def __init__(__self__, *,
                 url_base: Optional[pulumi.Input[str]] = None):
        if url_base is not None:
            pulumi.set(__self__, "url_base", url_base)

    @property
    @pulumi.getter(name="urlBase")
    def url_base(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "url_base")

    @url_base.setter
    def url_base(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url_base", value)


@pulumi.input_type
class SourceSurveymonkeyConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceSurveymonkeyConfigurationCredentialsArgs']] = None,
                 origin: Optional[pulumi.Input[str]] = None,
                 survey_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if origin is not None:
            pulumi.set(__self__, "origin", origin)
        if survey_ids is not None:
            pulumi.set(__self__, "survey_ids", survey_ids)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceSurveymonkeyConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceSurveymonkeyConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def origin(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "origin")

    @origin.setter
    def origin(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "origin", value)

    @property
    @pulumi.getter(name="surveyIds")
    def survey_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "survey_ids")

    @survey_ids.setter
    def survey_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "survey_ids", value)


@pulumi.input_type
class SourceSurveymonkeyConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_method: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceTempoConfigurationArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceTheGuardianApiConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 end_date: Optional[pulumi.Input[str]] = None,
                 query: Optional[pulumi.Input[str]] = None,
                 section: Optional[pulumi.Input[str]] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if section is not None:
            pulumi.set(__self__, "section", section)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter
    def query(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter
    def section(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "section")

    @section.setter
    def section(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "section", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class SourceTiktokMarketingConfigurationArgs:
    def __init__(__self__, *,
                 attribution_window: Optional[pulumi.Input[int]] = None,
                 credentials: Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsArgs']] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 include_deleted: Optional[pulumi.Input[bool]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        if attribution_window is not None:
            pulumi.set(__self__, "attribution_window", attribution_window)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if include_deleted is not None:
            pulumi.set(__self__, "include_deleted", include_deleted)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="attributionWindow")
    def attribution_window(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "attribution_window")

    @attribution_window.setter
    def attribution_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "attribution_window", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="includeDeleted")
    def include_deleted(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "include_deleted")

    @include_deleted.setter
    def include_deleted(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_deleted", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceTiktokMarketingConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_tiktok_marketing_authentication_method_o_auth20: Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20Args']] = None,
                 source_tiktok_marketing_authentication_method_sandbox_access_token: Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessTokenArgs']] = None,
                 source_tiktok_marketing_update_authentication_method_o_auth20: Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20Args']] = None,
                 source_tiktok_marketing_update_authentication_method_sandbox_access_token: Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenArgs']] = None):
        if source_tiktok_marketing_authentication_method_o_auth20 is not None:
            pulumi.set(__self__, "source_tiktok_marketing_authentication_method_o_auth20", source_tiktok_marketing_authentication_method_o_auth20)
        if source_tiktok_marketing_authentication_method_sandbox_access_token is not None:
            pulumi.set(__self__, "source_tiktok_marketing_authentication_method_sandbox_access_token", source_tiktok_marketing_authentication_method_sandbox_access_token)
        if source_tiktok_marketing_update_authentication_method_o_auth20 is not None:
            pulumi.set(__self__, "source_tiktok_marketing_update_authentication_method_o_auth20", source_tiktok_marketing_update_authentication_method_o_auth20)
        if source_tiktok_marketing_update_authentication_method_sandbox_access_token is not None:
            pulumi.set(__self__, "source_tiktok_marketing_update_authentication_method_sandbox_access_token", source_tiktok_marketing_update_authentication_method_sandbox_access_token)

    @property
    @pulumi.getter(name="sourceTiktokMarketingAuthenticationMethodOAuth20")
    def source_tiktok_marketing_authentication_method_o_auth20(self) -> Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20Args']]:
        return pulumi.get(self, "source_tiktok_marketing_authentication_method_o_auth20")

    @source_tiktok_marketing_authentication_method_o_auth20.setter
    def source_tiktok_marketing_authentication_method_o_auth20(self, value: Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20Args']]):
        pulumi.set(self, "source_tiktok_marketing_authentication_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceTiktokMarketingAuthenticationMethodSandboxAccessToken")
    def source_tiktok_marketing_authentication_method_sandbox_access_token(self) -> Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessTokenArgs']]:
        return pulumi.get(self, "source_tiktok_marketing_authentication_method_sandbox_access_token")

    @source_tiktok_marketing_authentication_method_sandbox_access_token.setter
    def source_tiktok_marketing_authentication_method_sandbox_access_token(self, value: Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessTokenArgs']]):
        pulumi.set(self, "source_tiktok_marketing_authentication_method_sandbox_access_token", value)

    @property
    @pulumi.getter(name="sourceTiktokMarketingUpdateAuthenticationMethodOAuth20")
    def source_tiktok_marketing_update_authentication_method_o_auth20(self) -> Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20Args']]:
        return pulumi.get(self, "source_tiktok_marketing_update_authentication_method_o_auth20")

    @source_tiktok_marketing_update_authentication_method_o_auth20.setter
    def source_tiktok_marketing_update_authentication_method_o_auth20(self, value: Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20Args']]):
        pulumi.set(self, "source_tiktok_marketing_update_authentication_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessToken")
    def source_tiktok_marketing_update_authentication_method_sandbox_access_token(self) -> Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenArgs']]:
        return pulumi.get(self, "source_tiktok_marketing_update_authentication_method_sandbox_access_token")

    @source_tiktok_marketing_update_authentication_method_sandbox_access_token.setter
    def source_tiktok_marketing_update_authentication_method_sandbox_access_token(self, value: Optional[pulumi.Input['SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenArgs']]):
        pulumi.set(self, "source_tiktok_marketing_update_authentication_method_sandbox_access_token", value)


@pulumi.input_type
class SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 app_id: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 advertiser_id: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "secret", secret)
        if advertiser_id is not None:
            pulumi.set(__self__, "advertiser_id", advertiser_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="advertiserId")
    def advertiser_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advertiser_id")

    @advertiser_id.setter
    def advertiser_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertiser_id", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingAuthenticationMethodSandboxAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 advertiser_id: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "advertiser_id", advertiser_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="advertiserId")
    def advertiser_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "advertiser_id")

    @advertiser_id.setter
    def advertiser_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "advertiser_id", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 app_id: pulumi.Input[str],
                 secret: pulumi.Input[str],
                 advertiser_id: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "secret", secret)
        if advertiser_id is not None:
            pulumi.set(__self__, "advertiser_id", advertiser_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter(name="advertiserId")
    def advertiser_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "advertiser_id")

    @advertiser_id.setter
    def advertiser_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "advertiser_id", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceTiktokMarketingConfigurationCredentialsSourceTiktokMarketingUpdateAuthenticationMethodSandboxAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 advertiser_id: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "advertiser_id", advertiser_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="advertiserId")
    def advertiser_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "advertiser_id")

    @advertiser_id.setter
    def advertiser_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "advertiser_id", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceTodoistConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 token: pulumi.Input[str]):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)


@pulumi.input_type
class SourceTrelloConfigurationArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 token: pulumi.Input[str],
                 board_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "token", token)
        if board_ids is not None:
            pulumi.set(__self__, "board_ids", board_ids)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="boardIds")
    def board_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "board_ids")

    @board_ids.setter
    def board_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "board_ids", value)


@pulumi.input_type
class SourceTrustpilotConfigurationArgs:
    def __init__(__self__, *,
                 business_units: pulumi.Input[Sequence[pulumi.Input[str]]],
                 credentials: pulumi.Input['SourceTrustpilotConfigurationCredentialsArgs'],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "business_units", business_units)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="businessUnits")
    def business_units(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "business_units")

    @business_units.setter
    def business_units(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "business_units", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['SourceTrustpilotConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['SourceTrustpilotConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceTrustpilotConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_trustpilot_authorization_method_api_key: Optional[pulumi.Input['SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKeyArgs']] = None,
                 source_trustpilot_authorization_method_o_auth20: Optional[pulumi.Input['SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20Args']] = None,
                 source_trustpilot_update_authorization_method_api_key: Optional[pulumi.Input['SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKeyArgs']] = None,
                 source_trustpilot_update_authorization_method_o_auth20: Optional[pulumi.Input['SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20Args']] = None):
        if source_trustpilot_authorization_method_api_key is not None:
            pulumi.set(__self__, "source_trustpilot_authorization_method_api_key", source_trustpilot_authorization_method_api_key)
        if source_trustpilot_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_trustpilot_authorization_method_o_auth20", source_trustpilot_authorization_method_o_auth20)
        if source_trustpilot_update_authorization_method_api_key is not None:
            pulumi.set(__self__, "source_trustpilot_update_authorization_method_api_key", source_trustpilot_update_authorization_method_api_key)
        if source_trustpilot_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_trustpilot_update_authorization_method_o_auth20", source_trustpilot_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceTrustpilotAuthorizationMethodApiKey")
    def source_trustpilot_authorization_method_api_key(self) -> Optional[pulumi.Input['SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKeyArgs']]:
        return pulumi.get(self, "source_trustpilot_authorization_method_api_key")

    @source_trustpilot_authorization_method_api_key.setter
    def source_trustpilot_authorization_method_api_key(self, value: Optional[pulumi.Input['SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKeyArgs']]):
        pulumi.set(self, "source_trustpilot_authorization_method_api_key", value)

    @property
    @pulumi.getter(name="sourceTrustpilotAuthorizationMethodOAuth20")
    def source_trustpilot_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_trustpilot_authorization_method_o_auth20")

    @source_trustpilot_authorization_method_o_auth20.setter
    def source_trustpilot_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_trustpilot_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceTrustpilotUpdateAuthorizationMethodApiKey")
    def source_trustpilot_update_authorization_method_api_key(self) -> Optional[pulumi.Input['SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKeyArgs']]:
        return pulumi.get(self, "source_trustpilot_update_authorization_method_api_key")

    @source_trustpilot_update_authorization_method_api_key.setter
    def source_trustpilot_update_authorization_method_api_key(self, value: Optional[pulumi.Input['SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKeyArgs']]):
        pulumi.set(self, "source_trustpilot_update_authorization_method_api_key", value)

    @property
    @pulumi.getter(name="sourceTrustpilotUpdateAuthorizationMethodOAuth20")
    def source_trustpilot_update_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_trustpilot_update_authorization_method_o_auth20")

    @source_trustpilot_update_authorization_method_o_auth20.setter
    def source_trustpilot_update_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_trustpilot_update_authorization_method_o_auth20", value)


@pulumi.input_type
class SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodApiKeyArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceTrustpilotConfigurationCredentialsSourceTrustpilotAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_expiry_date: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_expiry_date", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodApiKeyArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceTrustpilotConfigurationCredentialsSourceTrustpilotUpdateAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_expiry_date: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_expiry_date", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceTvmazeScheduleConfigurationArgs:
    def __init__(__self__, *,
                 domestic_schedule_country_code: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 end_date: Optional[pulumi.Input[str]] = None,
                 web_schedule_country_code: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "domestic_schedule_country_code", domestic_schedule_country_code)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if web_schedule_country_code is not None:
            pulumi.set(__self__, "web_schedule_country_code", web_schedule_country_code)

    @property
    @pulumi.getter(name="domesticScheduleCountryCode")
    def domestic_schedule_country_code(self) -> pulumi.Input[str]:
        return pulumi.get(self, "domestic_schedule_country_code")

    @domestic_schedule_country_code.setter
    def domestic_schedule_country_code(self, value: pulumi.Input[str]):
        pulumi.set(self, "domestic_schedule_country_code", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="webScheduleCountryCode")
    def web_schedule_country_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "web_schedule_country_code")

    @web_schedule_country_code.setter
    def web_schedule_country_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "web_schedule_country_code", value)


@pulumi.input_type
class SourceTwilioConfigurationArgs:
    def __init__(__self__, *,
                 account_sid: pulumi.Input[str],
                 auth_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 lookback_window: Optional[pulumi.Input[int]] = None):
        pulumi.set(__self__, "account_sid", account_sid)
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if lookback_window is not None:
            pulumi.set(__self__, "lookback_window", lookback_window)

    @property
    @pulumi.getter(name="accountSid")
    def account_sid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_sid")

    @account_sid.setter
    def account_sid(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_sid", value)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="lookbackWindow")
    def lookback_window(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "lookback_window")

    @lookback_window.setter
    def lookback_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "lookback_window", value)


@pulumi.input_type
class SourceTwilioTaskrouterConfigurationArgs:
    def __init__(__self__, *,
                 account_sid: pulumi.Input[str],
                 auth_token: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "account_sid", account_sid)
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accountSid")
    def account_sid(self) -> pulumi.Input[str]:
        return pulumi.get(self, "account_sid")

    @account_sid.setter
    def account_sid(self, value: pulumi.Input[str]):
        pulumi.set(self, "account_sid", value)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceTwitterConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 query: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 end_date: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "source_type", source_type)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter
    def query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query")

    @query.setter
    def query(self, value: pulumi.Input[str]):
        pulumi.set(self, "query", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceTypeformConfigurationArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['SourceTypeformConfigurationCredentialsArgs'],
                 source_type: pulumi.Input[str],
                 form_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)
        if form_ids is not None:
            pulumi.set(__self__, "form_ids", form_ids)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['SourceTypeformConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['SourceTypeformConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="formIds")
    def form_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "form_ids")

    @form_ids.setter
    def form_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "form_ids", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceTypeformConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_typeform_authorization_method_o_auth20: Optional[pulumi.Input['SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20Args']] = None,
                 source_typeform_authorization_method_private_token: Optional[pulumi.Input['SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateTokenArgs']] = None,
                 source_typeform_update_authorization_method_o_auth20: Optional[pulumi.Input['SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20Args']] = None,
                 source_typeform_update_authorization_method_private_token: Optional[pulumi.Input['SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateTokenArgs']] = None):
        if source_typeform_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_typeform_authorization_method_o_auth20", source_typeform_authorization_method_o_auth20)
        if source_typeform_authorization_method_private_token is not None:
            pulumi.set(__self__, "source_typeform_authorization_method_private_token", source_typeform_authorization_method_private_token)
        if source_typeform_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_typeform_update_authorization_method_o_auth20", source_typeform_update_authorization_method_o_auth20)
        if source_typeform_update_authorization_method_private_token is not None:
            pulumi.set(__self__, "source_typeform_update_authorization_method_private_token", source_typeform_update_authorization_method_private_token)

    @property
    @pulumi.getter(name="sourceTypeformAuthorizationMethodOAuth20")
    def source_typeform_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_typeform_authorization_method_o_auth20")

    @source_typeform_authorization_method_o_auth20.setter
    def source_typeform_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_typeform_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceTypeformAuthorizationMethodPrivateToken")
    def source_typeform_authorization_method_private_token(self) -> Optional[pulumi.Input['SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateTokenArgs']]:
        return pulumi.get(self, "source_typeform_authorization_method_private_token")

    @source_typeform_authorization_method_private_token.setter
    def source_typeform_authorization_method_private_token(self, value: Optional[pulumi.Input['SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateTokenArgs']]):
        pulumi.set(self, "source_typeform_authorization_method_private_token", value)

    @property
    @pulumi.getter(name="sourceTypeformUpdateAuthorizationMethodOAuth20")
    def source_typeform_update_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_typeform_update_authorization_method_o_auth20")

    @source_typeform_update_authorization_method_o_auth20.setter
    def source_typeform_update_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_typeform_update_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceTypeformUpdateAuthorizationMethodPrivateToken")
    def source_typeform_update_authorization_method_private_token(self) -> Optional[pulumi.Input['SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateTokenArgs']]:
        return pulumi.get(self, "source_typeform_update_authorization_method_private_token")

    @source_typeform_update_authorization_method_private_token.setter
    def source_typeform_update_authorization_method_private_token(self, value: Optional[pulumi.Input['SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateTokenArgs']]):
        pulumi.set(self, "source_typeform_update_authorization_method_private_token", value)


@pulumi.input_type
class SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_expiry_date: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_expiry_date", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceTypeformConfigurationCredentialsSourceTypeformAuthorizationMethodPrivateTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_expiry_date: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_expiry_date", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceTypeformConfigurationCredentialsSourceTypeformUpdateAuthorizationMethodPrivateTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceUsCensusConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 query_path: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 query_params: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "query_path", query_path)
        pulumi.set(__self__, "source_type", source_type)
        if query_params is not None:
            pulumi.set(__self__, "query_params", query_params)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="queryPath")
    def query_path(self) -> pulumi.Input[str]:
        return pulumi.get(self, "query_path")

    @query_path.setter
    def query_path(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_path", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="queryParams")
    def query_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "query_params")

    @query_params.setter
    def query_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_params", value)


@pulumi.input_type
class SourceVantageConfigurationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceWebflowConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 site_id: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "site_id", site_id)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="siteId")
    def site_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "site_id")

    @site_id.setter
    def site_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "site_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceWhiskyHunterConfigurationArgs:
    def __init__(__self__, *,
                 source_type: Optional[pulumi.Input[str]] = None):
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceWikipediaPageviewsConfigurationArgs:
    def __init__(__self__, *,
                 access: pulumi.Input[str],
                 agent: pulumi.Input[str],
                 article: pulumi.Input[str],
                 country: pulumi.Input[str],
                 end: pulumi.Input[str],
                 project: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start: pulumi.Input[str]):
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "agent", agent)
        pulumi.set(__self__, "article", article)
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def access(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access")

    @access.setter
    def access(self, value: pulumi.Input[str]):
        pulumi.set(self, "access", value)

    @property
    @pulumi.getter
    def agent(self) -> pulumi.Input[str]:
        return pulumi.get(self, "agent")

    @agent.setter
    def agent(self, value: pulumi.Input[str]):
        pulumi.set(self, "agent", value)

    @property
    @pulumi.getter
    def article(self) -> pulumi.Input[str]:
        return pulumi.get(self, "article")

    @article.setter
    def article(self, value: pulumi.Input[str]):
        pulumi.set(self, "article", value)

    @property
    @pulumi.getter
    def country(self) -> pulumi.Input[str]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: pulumi.Input[str]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter
    def end(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end")

    @end.setter
    def end(self, value: pulumi.Input[str]):
        pulumi.set(self, "end", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def start(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start")

    @start.setter
    def start(self, value: pulumi.Input[str]):
        pulumi.set(self, "start", value)


@pulumi.input_type
class SourceWoocommerceConfigurationArgs:
    def __init__(__self__, *,
                 api_key: pulumi.Input[str],
                 api_secret: pulumi.Input[str],
                 shop: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "api_key", api_key)
        pulumi.set(__self__, "api_secret", api_secret)
        pulumi.set(__self__, "shop", shop)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_secret")

    @api_secret.setter
    def api_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_secret", value)

    @property
    @pulumi.getter
    def shop(self) -> pulumi.Input[str]:
        return pulumi.get(self, "shop")

    @shop.setter
    def shop(self, value: pulumi.Input[str]):
        pulumi.set(self, "shop", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceXeroConfigurationArgs:
    def __init__(__self__, *,
                 authentication: pulumi.Input['SourceXeroConfigurationAuthenticationArgs'],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 tenant_id: pulumi.Input[str]):
        pulumi.set(__self__, "authentication", authentication)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Input['SourceXeroConfigurationAuthenticationArgs']:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: pulumi.Input['SourceXeroConfigurationAuthenticationArgs']):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="tenantId")
    def tenant_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class SourceXeroConfigurationAuthenticationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 token_expiry_date: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "token_expiry_date", token_expiry_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="tokenExpiryDate")
    def token_expiry_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "token_expiry_date")

    @token_expiry_date.setter
    def token_expiry_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "token_expiry_date", value)


@pulumi.input_type
class SourceXkcdConfigurationArgs:
    def __init__(__self__, *,
                 source_type: Optional[pulumi.Input[str]] = None):
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceYandexMetricaConfigurationArgs:
    def __init__(__self__, *,
                 auth_token: pulumi.Input[str],
                 counter_id: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 end_date: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "auth_token", auth_token)
        pulumi.set(__self__, "counter_id", counter_id)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)

    @property
    @pulumi.getter(name="authToken")
    def auth_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_token")

    @auth_token.setter
    def auth_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_token", value)

    @property
    @pulumi.getter(name="counterId")
    def counter_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "counter_id")

    @counter_id.setter
    def counter_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "counter_id", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)


@pulumi.input_type
class SourceYotpoConfigurationArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 app_key: pulumi.Input[str],
                 email: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "app_key", app_key)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="appKey")
    def app_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_key")

    @app_key.setter
    def app_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_key", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceYouniumConfigurationArgs:
    def __init__(__self__, *,
                 legal_entity: pulumi.Input[str],
                 password: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 username: pulumi.Input[str],
                 playground: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "legal_entity", legal_entity)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "username", username)
        if playground is not None:
            pulumi.set(__self__, "playground", playground)

    @property
    @pulumi.getter(name="legalEntity")
    def legal_entity(self) -> pulumi.Input[str]:
        return pulumi.get(self, "legal_entity")

    @legal_entity.setter
    def legal_entity(self, value: pulumi.Input[str]):
        pulumi.set(self, "legal_entity", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def playground(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "playground")

    @playground.setter
    def playground(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "playground", value)


@pulumi.input_type
class SourceYoutubeAnalyticsConfigurationArgs:
    def __init__(__self__, *,
                 credentials: pulumi.Input['SourceYoutubeAnalyticsConfigurationCredentialsArgs'],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input['SourceYoutubeAnalyticsConfigurationCredentialsArgs']:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input['SourceYoutubeAnalyticsConfigurationCredentialsArgs']):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceYoutubeAnalyticsConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceZendeskChatConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsArgs']] = None,
                 subdomain: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if subdomain is not None:
            pulumi.set(__self__, "subdomain", subdomain)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter
    def subdomain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subdomain", value)


@pulumi.input_type
class SourceZendeskChatConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_zendesk_chat_authorization_method_access_token: Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessTokenArgs']] = None,
                 source_zendesk_chat_authorization_method_o_auth20: Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20Args']] = None,
                 source_zendesk_chat_update_authorization_method_access_token: Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessTokenArgs']] = None,
                 source_zendesk_chat_update_authorization_method_o_auth20: Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20Args']] = None):
        if source_zendesk_chat_authorization_method_access_token is not None:
            pulumi.set(__self__, "source_zendesk_chat_authorization_method_access_token", source_zendesk_chat_authorization_method_access_token)
        if source_zendesk_chat_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_chat_authorization_method_o_auth20", source_zendesk_chat_authorization_method_o_auth20)
        if source_zendesk_chat_update_authorization_method_access_token is not None:
            pulumi.set(__self__, "source_zendesk_chat_update_authorization_method_access_token", source_zendesk_chat_update_authorization_method_access_token)
        if source_zendesk_chat_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_chat_update_authorization_method_o_auth20", source_zendesk_chat_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceZendeskChatAuthorizationMethodAccessToken")
    def source_zendesk_chat_authorization_method_access_token(self) -> Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessTokenArgs']]:
        return pulumi.get(self, "source_zendesk_chat_authorization_method_access_token")

    @source_zendesk_chat_authorization_method_access_token.setter
    def source_zendesk_chat_authorization_method_access_token(self, value: Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessTokenArgs']]):
        pulumi.set(self, "source_zendesk_chat_authorization_method_access_token", value)

    @property
    @pulumi.getter(name="sourceZendeskChatAuthorizationMethodOAuth20")
    def source_zendesk_chat_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_zendesk_chat_authorization_method_o_auth20")

    @source_zendesk_chat_authorization_method_o_auth20.setter
    def source_zendesk_chat_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_zendesk_chat_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceZendeskChatUpdateAuthorizationMethodAccessToken")
    def source_zendesk_chat_update_authorization_method_access_token(self) -> Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessTokenArgs']]:
        return pulumi.get(self, "source_zendesk_chat_update_authorization_method_access_token")

    @source_zendesk_chat_update_authorization_method_access_token.setter
    def source_zendesk_chat_update_authorization_method_access_token(self, value: Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessTokenArgs']]):
        pulumi.set(self, "source_zendesk_chat_update_authorization_method_access_token", value)

    @property
    @pulumi.getter(name="sourceZendeskChatUpdateAuthorizationMethodOAuth20")
    def source_zendesk_chat_update_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_zendesk_chat_update_authorization_method_o_auth20")

    @source_zendesk_chat_update_authorization_method_o_auth20.setter
    def source_zendesk_chat_update_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_zendesk_chat_update_authorization_method_o_auth20", value)


@pulumi.input_type
class SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 credentials: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceZendeskChatConfigurationCredentialsSourceZendeskChatAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 credentials: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials", credentials)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodAccessTokenArgs:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 credentials: pulumi.Input[str]):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceZendeskChatConfigurationCredentialsSourceZendeskChatUpdateAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 credentials: pulumi.Input[str],
                 access_token: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 refresh_token: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "credentials", credentials)
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if refresh_token is not None:
            pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Input[str]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: pulumi.Input[str]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "refresh_token", value)


@pulumi.input_type
class SourceZendeskSunshineConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 subdomain: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsArgs']] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "subdomain", subdomain)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceZendeskSunshineConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_zendesk_sunshine_authorization_method_api_token: Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiTokenArgs']] = None,
                 source_zendesk_sunshine_authorization_method_o_auth20: Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20Args']] = None,
                 source_zendesk_sunshine_update_authorization_method_api_token: Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiTokenArgs']] = None,
                 source_zendesk_sunshine_update_authorization_method_o_auth20: Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20Args']] = None):
        if source_zendesk_sunshine_authorization_method_api_token is not None:
            pulumi.set(__self__, "source_zendesk_sunshine_authorization_method_api_token", source_zendesk_sunshine_authorization_method_api_token)
        if source_zendesk_sunshine_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_sunshine_authorization_method_o_auth20", source_zendesk_sunshine_authorization_method_o_auth20)
        if source_zendesk_sunshine_update_authorization_method_api_token is not None:
            pulumi.set(__self__, "source_zendesk_sunshine_update_authorization_method_api_token", source_zendesk_sunshine_update_authorization_method_api_token)
        if source_zendesk_sunshine_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_sunshine_update_authorization_method_o_auth20", source_zendesk_sunshine_update_authorization_method_o_auth20)

    @property
    @pulumi.getter(name="sourceZendeskSunshineAuthorizationMethodApiToken")
    def source_zendesk_sunshine_authorization_method_api_token(self) -> Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiTokenArgs']]:
        return pulumi.get(self, "source_zendesk_sunshine_authorization_method_api_token")

    @source_zendesk_sunshine_authorization_method_api_token.setter
    def source_zendesk_sunshine_authorization_method_api_token(self, value: Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiTokenArgs']]):
        pulumi.set(self, "source_zendesk_sunshine_authorization_method_api_token", value)

    @property
    @pulumi.getter(name="sourceZendeskSunshineAuthorizationMethodOAuth20")
    def source_zendesk_sunshine_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_zendesk_sunshine_authorization_method_o_auth20")

    @source_zendesk_sunshine_authorization_method_o_auth20.setter
    def source_zendesk_sunshine_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_zendesk_sunshine_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="sourceZendeskSunshineUpdateAuthorizationMethodApiToken")
    def source_zendesk_sunshine_update_authorization_method_api_token(self) -> Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiTokenArgs']]:
        return pulumi.get(self, "source_zendesk_sunshine_update_authorization_method_api_token")

    @source_zendesk_sunshine_update_authorization_method_api_token.setter
    def source_zendesk_sunshine_update_authorization_method_api_token(self, value: Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiTokenArgs']]):
        pulumi.set(self, "source_zendesk_sunshine_update_authorization_method_api_token", value)

    @property
    @pulumi.getter(name="sourceZendeskSunshineUpdateAuthorizationMethodOAuth20")
    def source_zendesk_sunshine_update_authorization_method_o_auth20(self) -> Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "source_zendesk_sunshine_update_authorization_method_o_auth20")

    @source_zendesk_sunshine_update_authorization_method_o_auth20.setter
    def source_zendesk_sunshine_update_authorization_method_o_auth20(self, value: Optional[pulumi.Input['SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "source_zendesk_sunshine_update_authorization_method_o_auth20", value)


@pulumi.input_type
class SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodApiTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 auth_method: pulumi.Input[str],
                 email: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_method: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodApiTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 auth_method: pulumi.Input[str],
                 email: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceZendeskSunshineConfigurationCredentialsSourceZendeskSunshineUpdateAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 auth_method: pulumi.Input[str],
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_method", auth_method)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="authMethod")
    def auth_method(self) -> pulumi.Input[str]:
        return pulumi.get(self, "auth_method")

    @auth_method.setter
    def auth_method(self, value: pulumi.Input[str]):
        pulumi.set(self, "auth_method", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)


@pulumi.input_type
class SourceZendeskSupportConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 subdomain: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsArgs']] = None,
                 ignore_pagination: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "subdomain", subdomain)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if ignore_pagination is not None:
            pulumi.set(__self__, "ignore_pagination", ignore_pagination)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="ignorePagination")
    def ignore_pagination(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "ignore_pagination")

    @ignore_pagination.setter
    def ignore_pagination(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_pagination", value)


@pulumi.input_type
class SourceZendeskSupportConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_zendesk_support_authentication_api_token: Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiTokenArgs']] = None,
                 source_zendesk_support_authentication_o_auth20: Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20Args']] = None,
                 source_zendesk_support_update_authentication_api_token: Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiTokenArgs']] = None,
                 source_zendesk_support_update_authentication_o_auth20: Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20Args']] = None):
        if source_zendesk_support_authentication_api_token is not None:
            pulumi.set(__self__, "source_zendesk_support_authentication_api_token", source_zendesk_support_authentication_api_token)
        if source_zendesk_support_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_support_authentication_o_auth20", source_zendesk_support_authentication_o_auth20)
        if source_zendesk_support_update_authentication_api_token is not None:
            pulumi.set(__self__, "source_zendesk_support_update_authentication_api_token", source_zendesk_support_update_authentication_api_token)
        if source_zendesk_support_update_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_support_update_authentication_o_auth20", source_zendesk_support_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceZendeskSupportAuthenticationApiToken")
    def source_zendesk_support_authentication_api_token(self) -> Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiTokenArgs']]:
        return pulumi.get(self, "source_zendesk_support_authentication_api_token")

    @source_zendesk_support_authentication_api_token.setter
    def source_zendesk_support_authentication_api_token(self, value: Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiTokenArgs']]):
        pulumi.set(self, "source_zendesk_support_authentication_api_token", value)

    @property
    @pulumi.getter(name="sourceZendeskSupportAuthenticationOAuth20")
    def source_zendesk_support_authentication_o_auth20(self) -> Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20Args']]:
        return pulumi.get(self, "source_zendesk_support_authentication_o_auth20")

    @source_zendesk_support_authentication_o_auth20.setter
    def source_zendesk_support_authentication_o_auth20(self, value: Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20Args']]):
        pulumi.set(self, "source_zendesk_support_authentication_o_auth20", value)

    @property
    @pulumi.getter(name="sourceZendeskSupportUpdateAuthenticationApiToken")
    def source_zendesk_support_update_authentication_api_token(self) -> Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiTokenArgs']]:
        return pulumi.get(self, "source_zendesk_support_update_authentication_api_token")

    @source_zendesk_support_update_authentication_api_token.setter
    def source_zendesk_support_update_authentication_api_token(self, value: Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiTokenArgs']]):
        pulumi.set(self, "source_zendesk_support_update_authentication_api_token", value)

    @property
    @pulumi.getter(name="sourceZendeskSupportUpdateAuthenticationOAuth20")
    def source_zendesk_support_update_authentication_o_auth20(self) -> Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20Args']]:
        return pulumi.get(self, "source_zendesk_support_update_authentication_o_auth20")

    @source_zendesk_support_update_authentication_o_auth20.setter
    def source_zendesk_support_update_authentication_o_auth20(self, value: Optional[pulumi.Input['SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20Args']]):
        pulumi.set(self, "source_zendesk_support_update_authentication_o_auth20", value)


@pulumi.input_type
class SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationApiTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 email: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportAuthenticationOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationApiTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 email: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceZendeskSupportConfigurationCredentialsSourceZendeskSupportUpdateAuthenticationOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceZendeskTalkConfigurationArgs:
    def __init__(__self__, *,
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 subdomain: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsArgs']] = None):
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "subdomain", subdomain)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter
    def subdomain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subdomain")

    @subdomain.setter
    def subdomain(self, value: pulumi.Input[str]):
        pulumi.set(self, "subdomain", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)


@pulumi.input_type
class SourceZendeskTalkConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_zendesk_talk_authentication_api_token: Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiTokenArgs']] = None,
                 source_zendesk_talk_authentication_o_auth20: Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20Args']] = None,
                 source_zendesk_talk_update_authentication_api_token: Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiTokenArgs']] = None,
                 source_zendesk_talk_update_authentication_o_auth20: Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20Args']] = None):
        if source_zendesk_talk_authentication_api_token is not None:
            pulumi.set(__self__, "source_zendesk_talk_authentication_api_token", source_zendesk_talk_authentication_api_token)
        if source_zendesk_talk_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_talk_authentication_o_auth20", source_zendesk_talk_authentication_o_auth20)
        if source_zendesk_talk_update_authentication_api_token is not None:
            pulumi.set(__self__, "source_zendesk_talk_update_authentication_api_token", source_zendesk_talk_update_authentication_api_token)
        if source_zendesk_talk_update_authentication_o_auth20 is not None:
            pulumi.set(__self__, "source_zendesk_talk_update_authentication_o_auth20", source_zendesk_talk_update_authentication_o_auth20)

    @property
    @pulumi.getter(name="sourceZendeskTalkAuthenticationApiToken")
    def source_zendesk_talk_authentication_api_token(self) -> Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiTokenArgs']]:
        return pulumi.get(self, "source_zendesk_talk_authentication_api_token")

    @source_zendesk_talk_authentication_api_token.setter
    def source_zendesk_talk_authentication_api_token(self, value: Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiTokenArgs']]):
        pulumi.set(self, "source_zendesk_talk_authentication_api_token", value)

    @property
    @pulumi.getter(name="sourceZendeskTalkAuthenticationOAuth20")
    def source_zendesk_talk_authentication_o_auth20(self) -> Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20Args']]:
        return pulumi.get(self, "source_zendesk_talk_authentication_o_auth20")

    @source_zendesk_talk_authentication_o_auth20.setter
    def source_zendesk_talk_authentication_o_auth20(self, value: Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20Args']]):
        pulumi.set(self, "source_zendesk_talk_authentication_o_auth20", value)

    @property
    @pulumi.getter(name="sourceZendeskTalkUpdateAuthenticationApiToken")
    def source_zendesk_talk_update_authentication_api_token(self) -> Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiTokenArgs']]:
        return pulumi.get(self, "source_zendesk_talk_update_authentication_api_token")

    @source_zendesk_talk_update_authentication_api_token.setter
    def source_zendesk_talk_update_authentication_api_token(self, value: Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiTokenArgs']]):
        pulumi.set(self, "source_zendesk_talk_update_authentication_api_token", value)

    @property
    @pulumi.getter(name="sourceZendeskTalkUpdateAuthenticationOAuth20")
    def source_zendesk_talk_update_authentication_o_auth20(self) -> Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20Args']]:
        return pulumi.get(self, "source_zendesk_talk_update_authentication_o_auth20")

    @source_zendesk_talk_update_authentication_o_auth20.setter
    def source_zendesk_talk_update_authentication_o_auth20(self, value: Optional[pulumi.Input['SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20Args']]):
        pulumi.set(self, "source_zendesk_talk_update_authentication_o_auth20", value)


@pulumi.input_type
class SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationApiTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 email: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkAuthenticationOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationApiTokenArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 email: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "email", email)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceZendeskTalkConfigurationCredentialsSourceZendeskTalkUpdateAuthenticationOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 additional_properties: Optional[pulumi.Input[str]] = None,
                 auth_type: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        if additional_properties is not None:
            pulumi.set(__self__, "additional_properties", additional_properties)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="additionalProperties")
    def additional_properties(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "additional_properties")

    @additional_properties.setter
    def additional_properties(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "additional_properties", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class SourceZenloopConfigurationArgs:
    def __init__(__self__, *,
                 api_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 date_from: Optional[pulumi.Input[str]] = None,
                 survey_group_id: Optional[pulumi.Input[str]] = None,
                 survey_id: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_token", api_token)
        pulumi.set(__self__, "source_type", source_type)
        if date_from is not None:
            pulumi.set(__self__, "date_from", date_from)
        if survey_group_id is not None:
            pulumi.set(__self__, "survey_group_id", survey_group_id)
        if survey_id is not None:
            pulumi.set(__self__, "survey_id", survey_id)

    @property
    @pulumi.getter(name="apiToken")
    def api_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_token")

    @api_token.setter
    def api_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="dateFrom")
    def date_from(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "date_from")

    @date_from.setter
    def date_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "date_from", value)

    @property
    @pulumi.getter(name="surveyGroupId")
    def survey_group_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "survey_group_id")

    @survey_group_id.setter
    def survey_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "survey_group_id", value)

    @property
    @pulumi.getter(name="surveyId")
    def survey_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "survey_id")

    @survey_id.setter
    def survey_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "survey_id", value)


@pulumi.input_type
class SourceZohoCrmConfigurationArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 dc_region: pulumi.Input[str],
                 edition: pulumi.Input[str],
                 environment: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_datetime: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "dc_region", dc_region)
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        if start_datetime is not None:
            pulumi.set(__self__, "start_datetime", start_datetime)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="dcRegion")
    def dc_region(self) -> pulumi.Input[str]:
        return pulumi.get(self, "dc_region")

    @dc_region.setter
    def dc_region(self, value: pulumi.Input[str]):
        pulumi.set(self, "dc_region", value)

    @property
    @pulumi.getter
    def edition(self) -> pulumi.Input[str]:
        return pulumi.get(self, "edition")

    @edition.setter
    def edition(self, value: pulumi.Input[str]):
        pulumi.set(self, "edition", value)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[str]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDatetime")
    def start_datetime(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_datetime")

    @start_datetime.setter
    def start_datetime(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_datetime", value)


@pulumi.input_type
class SourceZoomConfigurationArgs:
    def __init__(__self__, *,
                 jwt_token: pulumi.Input[str],
                 source_type: pulumi.Input[str]):
        pulumi.set(__self__, "jwt_token", jwt_token)
        pulumi.set(__self__, "source_type", source_type)

    @property
    @pulumi.getter(name="jwtToken")
    def jwt_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "jwt_token")

    @jwt_token.setter
    def jwt_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "jwt_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)


@pulumi.input_type
class SourceZuoraConfigurationArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 data_query: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 start_date: pulumi.Input[str],
                 tenant_endpoint: pulumi.Input[str],
                 window_in_days: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "data_query", data_query)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "tenant_endpoint", tenant_endpoint)
        if window_in_days is not None:
            pulumi.set(__self__, "window_in_days", window_in_days)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="dataQuery")
    def data_query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "data_query")

    @data_query.setter
    def data_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "data_query", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="tenantEndpoint")
    def tenant_endpoint(self) -> pulumi.Input[str]:
        return pulumi.get(self, "tenant_endpoint")

    @tenant_endpoint.setter
    def tenant_endpoint(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_endpoint", value)

    @property
    @pulumi.getter(name="windowInDays")
    def window_in_days(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "window_in_days")

    @window_in_days.setter
    def window_in_days(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "window_in_days", value)


