# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 bearer_auth: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] server_url: Server URL (defaults to https://api.airbyte.com/v1)
        """
        if bearer_auth is None:
            bearer_auth = _utilities.get_env('AIRBYTE_BEARER_AUTH')
        if bearer_auth is not None:
            pulumi.set(__self__, "bearer_auth", bearer_auth)
        if password is None:
            password = _utilities.get_env('AIRBYTE_PASSWORD')
        if password is not None:
            pulumi.set(__self__, "password", password)
        if server_url is None:
            server_url = (_utilities.get_env('AIRBYTE_SERVER_URL') or 'https://api.airbyte.com/v1')
        if server_url is not None:
            pulumi.set(__self__, "server_url", server_url)
        if username is None:
            username = _utilities.get_env('AIRBYTE_USERNAME')
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="bearerAuth")
    def bearer_auth(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bearer_auth")

    @bearer_auth.setter
    def bearer_auth(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bearer_auth", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> Optional[pulumi.Input[str]]:
        """
        Server URL (defaults to https://api.airbyte.com/v1)
        """
        return pulumi.get(self, "server_url")

    @server_url.setter
    def server_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "server_url", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bearer_auth: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the airbyte package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] server_url: Server URL (defaults to https://api.airbyte.com/v1)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the airbyte package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 bearer_auth: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 server_url: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if bearer_auth is None:
                bearer_auth = _utilities.get_env('AIRBYTE_BEARER_AUTH')
            __props__.__dict__["bearer_auth"] = None if bearer_auth is None else pulumi.Output.secret(bearer_auth)
            if password is None:
                password = _utilities.get_env('AIRBYTE_PASSWORD')
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            if server_url is None:
                server_url = (_utilities.get_env('AIRBYTE_SERVER_URL') or 'https://api.airbyte.com/v1')
            __props__.__dict__["server_url"] = server_url
            if username is None:
                username = _utilities.get_env('AIRBYTE_USERNAME')
            __props__.__dict__["username"] = None if username is None else pulumi.Output.secret(username)
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["bearerAuth", "password", "username"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'airbyte',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="bearerAuth")
    def bearer_auth(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "bearer_auth")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="serverUrl")
    def server_url(self) -> pulumi.Output[Optional[str]]:
        """
        Server URL (defaults to https://api.airbyte.com/v1)
        """
        return pulumi.get(self, "server_url")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "username")

