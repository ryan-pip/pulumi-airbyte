# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ConnectionConfigurations',
    'ConnectionConfigurationsStream',
    'ConnectionSchedule',
    'DestinationSnowflakeConfiguration',
    'DestinationSnowflakeConfigurationCredentials',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword',
    'SourceMixpanelConfiguration',
    'SourceMixpanelConfigurationCredentials',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount',
    'SourceSalesforceConfiguration',
    'SourceSalesforceConfigurationStreamsCriteria',
    'GetConnectionConfigurationsResult',
    'GetConnectionConfigurationsStreamResult',
    'GetConnectionScheduleResult',
    'GetDestinationSnowflakeConfigurationResult',
    'GetDestinationSnowflakeConfigurationCredentialsResult',
    'GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationResult',
    'GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Result',
    'GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordResult',
    'GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationResult',
    'GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Result',
    'GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordResult',
    'GetSourceMixpanelConfigurationResult',
    'GetSourceMixpanelConfigurationCredentialsResult',
    'GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretResult',
    'GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountResult',
    'GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretResult',
    'GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountResult',
    'GetSourceSalesforceConfigurationResult',
    'GetSourceSalesforceConfigurationStreamsCriteriaResult',
]

@pulumi.output_type
class ConnectionConfigurations(dict):
    def __init__(__self__, *,
                 streams: Optional[Sequence['outputs.ConnectionConfigurationsStream']] = None):
        if streams is not None:
            pulumi.set(__self__, "streams", streams)

    @property
    @pulumi.getter
    def streams(self) -> Optional[Sequence['outputs.ConnectionConfigurationsStream']]:
        return pulumi.get(self, "streams")


@pulumi.output_type
class ConnectionConfigurationsStream(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cursorFields":
            suggest = "cursor_fields"
        elif key == "primaryKeys":
            suggest = "primary_keys"
        elif key == "syncMode":
            suggest = "sync_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionConfigurationsStream. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionConfigurationsStream.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionConfigurationsStream.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 cursor_fields: Optional[Sequence[str]] = None,
                 primary_keys: Optional[Sequence[Sequence[str]]] = None,
                 sync_mode: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if cursor_fields is not None:
            pulumi.set(__self__, "cursor_fields", cursor_fields)
        if primary_keys is not None:
            pulumi.set(__self__, "primary_keys", primary_keys)
        if sync_mode is not None:
            pulumi.set(__self__, "sync_mode", sync_mode)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="cursorFields")
    def cursor_fields(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "cursor_fields")

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Optional[Sequence[Sequence[str]]]:
        return pulumi.get(self, "primary_keys")

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> Optional[str]:
        return pulumi.get(self, "sync_mode")


@pulumi.output_type
class ConnectionSchedule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scheduleType":
            suggest = "schedule_type"
        elif key == "basicTiming":
            suggest = "basic_timing"
        elif key == "cronExpression":
            suggest = "cron_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ConnectionSchedule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ConnectionSchedule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ConnectionSchedule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schedule_type: str,
                 basic_timing: Optional[str] = None,
                 cron_expression: Optional[str] = None):
        pulumi.set(__self__, "schedule_type", schedule_type)
        if basic_timing is not None:
            pulumi.set(__self__, "basic_timing", basic_timing)
        if cron_expression is not None:
            pulumi.set(__self__, "cron_expression", cron_expression)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> str:
        return pulumi.get(self, "schedule_type")

    @property
    @pulumi.getter(name="basicTiming")
    def basic_timing(self) -> Optional[str]:
        return pulumi.get(self, "basic_timing")

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> Optional[str]:
        return pulumi.get(self, "cron_expression")


@pulumi.output_type
class DestinationSnowflakeConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationType":
            suggest = "destination_type"
        elif key == "jdbcUrlParams":
            suggest = "jdbc_url_params"
        elif key == "rawDataSchema":
            suggest = "raw_data_schema"
        elif key == "use1s1tFormat":
            suggest = "use1s1t_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: str,
                 destination_type: str,
                 host: str,
                 role: str,
                 schema: str,
                 username: str,
                 warehouse: str,
                 credentials: Optional['outputs.DestinationSnowflakeConfigurationCredentials'] = None,
                 jdbc_url_params: Optional[str] = None,
                 raw_data_schema: Optional[str] = None,
                 use1s1t_format: Optional[bool] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "warehouse", warehouse)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if raw_data_schema is not None:
            pulumi.set(__self__, "raw_data_schema", raw_data_schema)
        if use1s1t_format is not None:
            pulumi.set(__self__, "use1s1t_format", use1s1t_format)

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def warehouse(self) -> str:
        return pulumi.get(self, "warehouse")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[str]:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter(name="rawDataSchema")
    def raw_data_schema(self) -> Optional[str]:
        return pulumi.get(self, "raw_data_schema")

    @property
    @pulumi.getter(name="use1s1tFormat")
    def use1s1t_format(self) -> Optional[bool]:
        return pulumi.get(self, "use1s1t_format")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationSnowflakeAuthorizationMethodKeyPairAuthentication":
            suggest = "destination_snowflake_authorization_method_key_pair_authentication"
        elif key == "destinationSnowflakeAuthorizationMethodOAuth20":
            suggest = "destination_snowflake_authorization_method_o_auth20"
        elif key == "destinationSnowflakeAuthorizationMethodUsernameAndPassword":
            suggest = "destination_snowflake_authorization_method_username_and_password"
        elif key == "destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication":
            suggest = "destination_snowflake_update_authorization_method_key_pair_authentication"
        elif key == "destinationSnowflakeUpdateAuthorizationMethodOAuth20":
            suggest = "destination_snowflake_update_authorization_method_o_auth20"
        elif key == "destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword":
            suggest = "destination_snowflake_update_authorization_method_username_and_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_snowflake_authorization_method_key_pair_authentication: Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication'] = None,
                 destination_snowflake_authorization_method_o_auth20: Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20'] = None,
                 destination_snowflake_authorization_method_username_and_password: Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword'] = None,
                 destination_snowflake_update_authorization_method_key_pair_authentication: Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication'] = None,
                 destination_snowflake_update_authorization_method_o_auth20: Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20'] = None,
                 destination_snowflake_update_authorization_method_username_and_password: Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword'] = None):
        if destination_snowflake_authorization_method_key_pair_authentication is not None:
            pulumi.set(__self__, "destination_snowflake_authorization_method_key_pair_authentication", destination_snowflake_authorization_method_key_pair_authentication)
        if destination_snowflake_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "destination_snowflake_authorization_method_o_auth20", destination_snowflake_authorization_method_o_auth20)
        if destination_snowflake_authorization_method_username_and_password is not None:
            pulumi.set(__self__, "destination_snowflake_authorization_method_username_and_password", destination_snowflake_authorization_method_username_and_password)
        if destination_snowflake_update_authorization_method_key_pair_authentication is not None:
            pulumi.set(__self__, "destination_snowflake_update_authorization_method_key_pair_authentication", destination_snowflake_update_authorization_method_key_pair_authentication)
        if destination_snowflake_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "destination_snowflake_update_authorization_method_o_auth20", destination_snowflake_update_authorization_method_o_auth20)
        if destination_snowflake_update_authorization_method_username_and_password is not None:
            pulumi.set(__self__, "destination_snowflake_update_authorization_method_username_and_password", destination_snowflake_update_authorization_method_username_and_password)

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodKeyPairAuthentication")
    def destination_snowflake_authorization_method_key_pair_authentication(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication']:
        return pulumi.get(self, "destination_snowflake_authorization_method_key_pair_authentication")

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodOAuth20")
    def destination_snowflake_authorization_method_o_auth20(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20']:
        return pulumi.get(self, "destination_snowflake_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodUsernameAndPassword")
    def destination_snowflake_authorization_method_username_and_password(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword']:
        return pulumi.get(self, "destination_snowflake_authorization_method_username_and_password")

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication")
    def destination_snowflake_update_authorization_method_key_pair_authentication(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication']:
        return pulumi.get(self, "destination_snowflake_update_authorization_method_key_pair_authentication")

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodOAuth20")
    def destination_snowflake_update_authorization_method_o_auth20(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20']:
        return pulumi.get(self, "destination_snowflake_update_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword")
    def destination_snowflake_update_authorization_method_username_and_password(self) -> Optional['outputs.DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword']:
        return pulumi.get(self, "destination_snowflake_update_authorization_method_username_and_password")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "privateKeyPassword":
            suggest = "private_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_key: str,
                 auth_type: Optional[str] = None,
                 private_key_password: Optional[str] = None):
        pulumi.set(__self__, "private_key", private_key)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if private_key_password is not None:
            pulumi.set(__self__, "private_key_password", private_key_password)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> Optional[str]:
        return pulumi.get(self, "private_key_password")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 refresh_token: str,
                 auth_type: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPassword.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "password", password)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "privateKeyPassword":
            suggest = "private_key_password"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 private_key: str,
                 auth_type: Optional[str] = None,
                 private_key_password: Optional[str] = None):
        pulumi.set(__self__, "private_key", private_key)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if private_key_password is not None:
            pulumi.set(__self__, "private_key_password", private_key_password)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> Optional[str]:
        return pulumi.get(self, "private_key_password")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessToken":
            suggest = "access_token"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 access_token: str,
                 refresh_token: str,
                 auth_type: Optional[str] = None,
                 client_id: Optional[str] = None,
                 client_secret: Optional[str] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[str]:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[str]:
        return pulumi.get(self, "client_secret")


@pulumi.output_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authType":
            suggest = "auth_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 auth_type: Optional[str] = None):
        pulumi.set(__self__, "password", password)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")


@pulumi.output_type
class SourceMixpanelConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "attributionWindow":
            suggest = "attribution_window"
        elif key == "dateWindowSize":
            suggest = "date_window_size"
        elif key == "endDate":
            suggest = "end_date"
        elif key == "projectId":
            suggest = "project_id"
        elif key == "projectTimezone":
            suggest = "project_timezone"
        elif key == "selectPropertiesByDefault":
            suggest = "select_properties_by_default"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "startDate":
            suggest = "start_date"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMixpanelConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMixpanelConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMixpanelConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 attribution_window: Optional[int] = None,
                 credentials: Optional['outputs.SourceMixpanelConfigurationCredentials'] = None,
                 date_window_size: Optional[int] = None,
                 end_date: Optional[str] = None,
                 project_id: Optional[int] = None,
                 project_timezone: Optional[str] = None,
                 region: Optional[str] = None,
                 select_properties_by_default: Optional[bool] = None,
                 source_type: Optional[str] = None,
                 start_date: Optional[str] = None):
        if attribution_window is not None:
            pulumi.set(__self__, "attribution_window", attribution_window)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if date_window_size is not None:
            pulumi.set(__self__, "date_window_size", date_window_size)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if project_timezone is not None:
            pulumi.set(__self__, "project_timezone", project_timezone)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if select_properties_by_default is not None:
            pulumi.set(__self__, "select_properties_by_default", select_properties_by_default)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="attributionWindow")
    def attribution_window(self) -> Optional[int]:
        return pulumi.get(self, "attribution_window")

    @property
    @pulumi.getter
    def credentials(self) -> Optional['outputs.SourceMixpanelConfigurationCredentials']:
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="dateWindowSize")
    def date_window_size(self) -> Optional[int]:
        return pulumi.get(self, "date_window_size")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[str]:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[int]:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectTimezone")
    def project_timezone(self) -> Optional[str]:
        return pulumi.get(self, "project_timezone")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="selectPropertiesByDefault")
    def select_properties_by_default(self) -> Optional[bool]:
        return pulumi.get(self, "select_properties_by_default")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[str]:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class SourceMixpanelConfigurationCredentials(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceMixpanelAuthenticationWildcardProjectSecret":
            suggest = "source_mixpanel_authentication_wildcard_project_secret"
        elif key == "sourceMixpanelAuthenticationWildcardServiceAccount":
            suggest = "source_mixpanel_authentication_wildcard_service_account"
        elif key == "sourceMixpanelUpdateAuthenticationWildcardProjectSecret":
            suggest = "source_mixpanel_update_authentication_wildcard_project_secret"
        elif key == "sourceMixpanelUpdateAuthenticationWildcardServiceAccount":
            suggest = "source_mixpanel_update_authentication_wildcard_service_account"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMixpanelConfigurationCredentials. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMixpanelConfigurationCredentials.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMixpanelConfigurationCredentials.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_mixpanel_authentication_wildcard_project_secret: Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret'] = None,
                 source_mixpanel_authentication_wildcard_service_account: Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount'] = None,
                 source_mixpanel_update_authentication_wildcard_project_secret: Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret'] = None,
                 source_mixpanel_update_authentication_wildcard_service_account: Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount'] = None):
        if source_mixpanel_authentication_wildcard_project_secret is not None:
            pulumi.set(__self__, "source_mixpanel_authentication_wildcard_project_secret", source_mixpanel_authentication_wildcard_project_secret)
        if source_mixpanel_authentication_wildcard_service_account is not None:
            pulumi.set(__self__, "source_mixpanel_authentication_wildcard_service_account", source_mixpanel_authentication_wildcard_service_account)
        if source_mixpanel_update_authentication_wildcard_project_secret is not None:
            pulumi.set(__self__, "source_mixpanel_update_authentication_wildcard_project_secret", source_mixpanel_update_authentication_wildcard_project_secret)
        if source_mixpanel_update_authentication_wildcard_service_account is not None:
            pulumi.set(__self__, "source_mixpanel_update_authentication_wildcard_service_account", source_mixpanel_update_authentication_wildcard_service_account)

    @property
    @pulumi.getter(name="sourceMixpanelAuthenticationWildcardProjectSecret")
    def source_mixpanel_authentication_wildcard_project_secret(self) -> Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret']:
        return pulumi.get(self, "source_mixpanel_authentication_wildcard_project_secret")

    @property
    @pulumi.getter(name="sourceMixpanelAuthenticationWildcardServiceAccount")
    def source_mixpanel_authentication_wildcard_service_account(self) -> Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount']:
        return pulumi.get(self, "source_mixpanel_authentication_wildcard_service_account")

    @property
    @pulumi.getter(name="sourceMixpanelUpdateAuthenticationWildcardProjectSecret")
    def source_mixpanel_update_authentication_wildcard_project_secret(self) -> Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret']:
        return pulumi.get(self, "source_mixpanel_update_authentication_wildcard_project_secret")

    @property
    @pulumi.getter(name="sourceMixpanelUpdateAuthenticationWildcardServiceAccount")
    def source_mixpanel_update_authentication_wildcard_service_account(self) -> Optional['outputs.SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount']:
        return pulumi.get(self, "source_mixpanel_update_authentication_wildcard_service_account")


@pulumi.output_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiSecret":
            suggest = "api_secret"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecret.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_secret: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "api_secret", api_secret)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> str:
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret: str,
                 username: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "username", username)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "apiSecret":
            suggest = "api_secret"
        elif key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecret.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 api_secret: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "api_secret", api_secret)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> str:
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "optionTitle":
            suggest = "option_title"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 secret: str,
                 username: str,
                 option_title: Optional[str] = None):
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "username", username)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[str]:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class SourceSalesforceConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientId":
            suggest = "client_id"
        elif key == "clientSecret":
            suggest = "client_secret"
        elif key == "refreshToken":
            suggest = "refresh_token"
        elif key == "sourceType":
            suggest = "source_type"
        elif key == "authType":
            suggest = "auth_type"
        elif key == "forceUseBulkApi":
            suggest = "force_use_bulk_api"
        elif key == "isSandbox":
            suggest = "is_sandbox"
        elif key == "startDate":
            suggest = "start_date"
        elif key == "streamsCriterias":
            suggest = "streams_criterias"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SourceSalesforceConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SourceSalesforceConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SourceSalesforceConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str,
                 source_type: str,
                 auth_type: Optional[str] = None,
                 force_use_bulk_api: Optional[bool] = None,
                 is_sandbox: Optional[bool] = None,
                 start_date: Optional[str] = None,
                 streams_criterias: Optional[Sequence['outputs.SourceSalesforceConfigurationStreamsCriteria']] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if force_use_bulk_api is not None:
            pulumi.set(__self__, "force_use_bulk_api", force_use_bulk_api)
        if is_sandbox is not None:
            pulumi.set(__self__, "is_sandbox", is_sandbox)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if streams_criterias is not None:
            pulumi.set(__self__, "streams_criterias", streams_criterias)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[str]:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="forceUseBulkApi")
    def force_use_bulk_api(self) -> Optional[bool]:
        return pulumi.get(self, "force_use_bulk_api")

    @property
    @pulumi.getter(name="isSandbox")
    def is_sandbox(self) -> Optional[bool]:
        return pulumi.get(self, "is_sandbox")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[str]:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="streamsCriterias")
    def streams_criterias(self) -> Optional[Sequence['outputs.SourceSalesforceConfigurationStreamsCriteria']]:
        return pulumi.get(self, "streams_criterias")


@pulumi.output_type
class SourceSalesforceConfigurationStreamsCriteria(dict):
    def __init__(__self__, *,
                 criteria: str,
                 value: str):
        pulumi.set(__self__, "criteria", criteria)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def criteria(self) -> str:
        return pulumi.get(self, "criteria")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetConnectionConfigurationsResult(dict):
    def __init__(__self__, *,
                 streams: Sequence['outputs.GetConnectionConfigurationsStreamResult']):
        pulumi.set(__self__, "streams", streams)

    @property
    @pulumi.getter
    def streams(self) -> Sequence['outputs.GetConnectionConfigurationsStreamResult']:
        return pulumi.get(self, "streams")


@pulumi.output_type
class GetConnectionConfigurationsStreamResult(dict):
    def __init__(__self__, *,
                 cursor_fields: Sequence[str],
                 name: str,
                 primary_keys: Sequence[Sequence[str]],
                 sync_mode: str):
        pulumi.set(__self__, "cursor_fields", cursor_fields)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary_keys", primary_keys)
        pulumi.set(__self__, "sync_mode", sync_mode)

    @property
    @pulumi.getter(name="cursorFields")
    def cursor_fields(self) -> Sequence[str]:
        return pulumi.get(self, "cursor_fields")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Sequence[Sequence[str]]:
        return pulumi.get(self, "primary_keys")

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> str:
        return pulumi.get(self, "sync_mode")


@pulumi.output_type
class GetConnectionScheduleResult(dict):
    def __init__(__self__, *,
                 basic_timing: str,
                 cron_expression: str,
                 schedule_type: str):
        pulumi.set(__self__, "basic_timing", basic_timing)
        pulumi.set(__self__, "cron_expression", cron_expression)
        pulumi.set(__self__, "schedule_type", schedule_type)

    @property
    @pulumi.getter(name="basicTiming")
    def basic_timing(self) -> str:
        return pulumi.get(self, "basic_timing")

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> str:
        return pulumi.get(self, "cron_expression")

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> str:
        return pulumi.get(self, "schedule_type")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationResult(dict):
    def __init__(__self__, *,
                 credentials: 'outputs.GetDestinationSnowflakeConfigurationCredentialsResult',
                 database: str,
                 destination_type: str,
                 host: str,
                 jdbc_url_params: str,
                 raw_data_schema: str,
                 role: str,
                 schema: str,
                 use1s1t_format: bool,
                 username: str,
                 warehouse: str):
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        pulumi.set(__self__, "raw_data_schema", raw_data_schema)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "use1s1t_format", use1s1t_format)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "warehouse", warehouse)

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> str:
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> str:
        return pulumi.get(self, "jdbc_url_params")

    @property
    @pulumi.getter(name="rawDataSchema")
    def raw_data_schema(self) -> str:
        return pulumi.get(self, "raw_data_schema")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def schema(self) -> str:
        return pulumi.get(self, "schema")

    @property
    @pulumi.getter(name="use1s1tFormat")
    def use1s1t_format(self) -> bool:
        return pulumi.get(self, "use1s1t_format")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def warehouse(self) -> str:
        return pulumi.get(self, "warehouse")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 destination_snowflake_authorization_method_key_pair_authentication: 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationResult',
                 destination_snowflake_authorization_method_o_auth20: 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Result',
                 destination_snowflake_authorization_method_username_and_password: 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordResult',
                 destination_snowflake_update_authorization_method_key_pair_authentication: 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationResult',
                 destination_snowflake_update_authorization_method_o_auth20: 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Result',
                 destination_snowflake_update_authorization_method_username_and_password: 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordResult'):
        pulumi.set(__self__, "destination_snowflake_authorization_method_key_pair_authentication", destination_snowflake_authorization_method_key_pair_authentication)
        pulumi.set(__self__, "destination_snowflake_authorization_method_o_auth20", destination_snowflake_authorization_method_o_auth20)
        pulumi.set(__self__, "destination_snowflake_authorization_method_username_and_password", destination_snowflake_authorization_method_username_and_password)
        pulumi.set(__self__, "destination_snowflake_update_authorization_method_key_pair_authentication", destination_snowflake_update_authorization_method_key_pair_authentication)
        pulumi.set(__self__, "destination_snowflake_update_authorization_method_o_auth20", destination_snowflake_update_authorization_method_o_auth20)
        pulumi.set(__self__, "destination_snowflake_update_authorization_method_username_and_password", destination_snowflake_update_authorization_method_username_and_password)

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodKeyPairAuthentication")
    def destination_snowflake_authorization_method_key_pair_authentication(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationResult':
        return pulumi.get(self, "destination_snowflake_authorization_method_key_pair_authentication")

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodOAuth20")
    def destination_snowflake_authorization_method_o_auth20(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "destination_snowflake_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodUsernameAndPassword")
    def destination_snowflake_authorization_method_username_and_password(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordResult':
        return pulumi.get(self, "destination_snowflake_authorization_method_username_and_password")

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication")
    def destination_snowflake_update_authorization_method_key_pair_authentication(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationResult':
        return pulumi.get(self, "destination_snowflake_update_authorization_method_key_pair_authentication")

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodOAuth20")
    def destination_snowflake_update_authorization_method_o_auth20(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Result':
        return pulumi.get(self, "destination_snowflake_update_authorization_method_o_auth20")

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword")
    def destination_snowflake_update_authorization_method_username_and_password(self) -> 'outputs.GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordResult':
        return pulumi.get(self, "destination_snowflake_update_authorization_method_username_and_password")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 private_key: str,
                 private_key_password: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "private_key_password", private_key_password)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> str:
        return pulumi.get(self, "private_key_password")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 password: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 private_key: str,
                 private_key_password: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "private_key", private_key)
        pulumi.set(__self__, "private_key_password", private_key_password)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> str:
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> str:
        return pulumi.get(self, "private_key_password")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Result(dict):
    def __init__(__self__, *,
                 access_token: str,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 refresh_token: str):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> str:
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")


@pulumi.output_type
class GetDestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 password: str):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")


@pulumi.output_type
class GetSourceMixpanelConfigurationResult(dict):
    def __init__(__self__, *,
                 attribution_window: int,
                 credentials: 'outputs.GetSourceMixpanelConfigurationCredentialsResult',
                 date_window_size: int,
                 end_date: str,
                 project_id: int,
                 project_timezone: str,
                 region: str,
                 select_properties_by_default: bool,
                 source_type: str,
                 start_date: str):
        pulumi.set(__self__, "attribution_window", attribution_window)
        pulumi.set(__self__, "credentials", credentials)
        pulumi.set(__self__, "date_window_size", date_window_size)
        pulumi.set(__self__, "end_date", end_date)
        pulumi.set(__self__, "project_id", project_id)
        pulumi.set(__self__, "project_timezone", project_timezone)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "select_properties_by_default", select_properties_by_default)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="attributionWindow")
    def attribution_window(self) -> int:
        return pulumi.get(self, "attribution_window")

    @property
    @pulumi.getter
    def credentials(self) -> 'outputs.GetSourceMixpanelConfigurationCredentialsResult':
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="dateWindowSize")
    def date_window_size(self) -> int:
        return pulumi.get(self, "date_window_size")

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> str:
        return pulumi.get(self, "end_date")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> int:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="projectTimezone")
    def project_timezone(self) -> str:
        return pulumi.get(self, "project_timezone")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="selectPropertiesByDefault")
    def select_properties_by_default(self) -> bool:
        return pulumi.get(self, "select_properties_by_default")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")


@pulumi.output_type
class GetSourceMixpanelConfigurationCredentialsResult(dict):
    def __init__(__self__, *,
                 source_mixpanel_authentication_wildcard_project_secret: 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretResult',
                 source_mixpanel_authentication_wildcard_service_account: 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountResult',
                 source_mixpanel_update_authentication_wildcard_project_secret: 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretResult',
                 source_mixpanel_update_authentication_wildcard_service_account: 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountResult'):
        pulumi.set(__self__, "source_mixpanel_authentication_wildcard_project_secret", source_mixpanel_authentication_wildcard_project_secret)
        pulumi.set(__self__, "source_mixpanel_authentication_wildcard_service_account", source_mixpanel_authentication_wildcard_service_account)
        pulumi.set(__self__, "source_mixpanel_update_authentication_wildcard_project_secret", source_mixpanel_update_authentication_wildcard_project_secret)
        pulumi.set(__self__, "source_mixpanel_update_authentication_wildcard_service_account", source_mixpanel_update_authentication_wildcard_service_account)

    @property
    @pulumi.getter(name="sourceMixpanelAuthenticationWildcardProjectSecret")
    def source_mixpanel_authentication_wildcard_project_secret(self) -> 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretResult':
        return pulumi.get(self, "source_mixpanel_authentication_wildcard_project_secret")

    @property
    @pulumi.getter(name="sourceMixpanelAuthenticationWildcardServiceAccount")
    def source_mixpanel_authentication_wildcard_service_account(self) -> 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountResult':
        return pulumi.get(self, "source_mixpanel_authentication_wildcard_service_account")

    @property
    @pulumi.getter(name="sourceMixpanelUpdateAuthenticationWildcardProjectSecret")
    def source_mixpanel_update_authentication_wildcard_project_secret(self) -> 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretResult':
        return pulumi.get(self, "source_mixpanel_update_authentication_wildcard_project_secret")

    @property
    @pulumi.getter(name="sourceMixpanelUpdateAuthenticationWildcardServiceAccount")
    def source_mixpanel_update_authentication_wildcard_service_account(self) -> 'outputs.GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountResult':
        return pulumi.get(self, "source_mixpanel_update_authentication_wildcard_service_account")


@pulumi.output_type
class GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretResult(dict):
    def __init__(__self__, *,
                 api_secret: str,
                 option_title: str):
        pulumi.set(__self__, "api_secret", api_secret)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> str:
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class GetSourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountResult(dict):
    def __init__(__self__, *,
                 option_title: str,
                 secret: str,
                 username: str):
        pulumi.set(__self__, "option_title", option_title)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretResult(dict):
    def __init__(__self__, *,
                 api_secret: str,
                 option_title: str):
        pulumi.set(__self__, "api_secret", api_secret)
        pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> str:
        return pulumi.get(self, "api_secret")

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")


@pulumi.output_type
class GetSourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountResult(dict):
    def __init__(__self__, *,
                 option_title: str,
                 secret: str,
                 username: str):
        pulumi.set(__self__, "option_title", option_title)
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> str:
        return pulumi.get(self, "option_title")

    @property
    @pulumi.getter
    def secret(self) -> str:
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetSourceSalesforceConfigurationResult(dict):
    def __init__(__self__, *,
                 auth_type: str,
                 client_id: str,
                 client_secret: str,
                 force_use_bulk_api: bool,
                 is_sandbox: bool,
                 refresh_token: str,
                 source_type: str,
                 start_date: str,
                 streams_criterias: Sequence['outputs.GetSourceSalesforceConfigurationStreamsCriteriaResult']):
        pulumi.set(__self__, "auth_type", auth_type)
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "force_use_bulk_api", force_use_bulk_api)
        pulumi.set(__self__, "is_sandbox", is_sandbox)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        pulumi.set(__self__, "start_date", start_date)
        pulumi.set(__self__, "streams_criterias", streams_criterias)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> str:
        return pulumi.get(self, "auth_type")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> str:
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> str:
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="forceUseBulkApi")
    def force_use_bulk_api(self) -> bool:
        return pulumi.get(self, "force_use_bulk_api")

    @property
    @pulumi.getter(name="isSandbox")
    def is_sandbox(self) -> bool:
        return pulumi.get(self, "is_sandbox")

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> str:
        return pulumi.get(self, "refresh_token")

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> str:
        return pulumi.get(self, "source_type")

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> str:
        return pulumi.get(self, "start_date")

    @property
    @pulumi.getter(name="streamsCriterias")
    def streams_criterias(self) -> Sequence['outputs.GetSourceSalesforceConfigurationStreamsCriteriaResult']:
        return pulumi.get(self, "streams_criterias")


@pulumi.output_type
class GetSourceSalesforceConfigurationStreamsCriteriaResult(dict):
    def __init__(__self__, *,
                 criteria: str,
                 value: str):
        pulumi.set(__self__, "criteria", criteria)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def criteria(self) -> str:
        return pulumi.get(self, "criteria")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


