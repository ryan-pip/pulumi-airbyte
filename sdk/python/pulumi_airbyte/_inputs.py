# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ConnectionConfigurationsArgs',
    'ConnectionConfigurationsStreamArgs',
    'ConnectionScheduleArgs',
    'DestinationSnowflakeConfigurationArgs',
    'DestinationSnowflakeConfigurationCredentialsArgs',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationArgs',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Args',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordArgs',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationArgs',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Args',
    'DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs',
    'SourceMixpanelConfigurationArgs',
    'SourceMixpanelConfigurationCredentialsArgs',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretArgs',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountArgs',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretArgs',
    'SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountArgs',
    'SourceSalesforceConfigurationArgs',
    'SourceSalesforceConfigurationStreamsCriteriaArgs',
]

@pulumi.input_type
class ConnectionConfigurationsArgs:
    def __init__(__self__, *,
                 streams: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConfigurationsStreamArgs']]]] = None):
        if streams is not None:
            pulumi.set(__self__, "streams", streams)

    @property
    @pulumi.getter
    def streams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConfigurationsStreamArgs']]]]:
        return pulumi.get(self, "streams")

    @streams.setter
    def streams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ConnectionConfigurationsStreamArgs']]]]):
        pulumi.set(self, "streams", value)


@pulumi.input_type
class ConnectionConfigurationsStreamArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 cursor_fields: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 primary_keys: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[str]]]]]] = None,
                 sync_mode: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "name", name)
        if cursor_fields is not None:
            pulumi.set(__self__, "cursor_fields", cursor_fields)
        if primary_keys is not None:
            pulumi.set(__self__, "primary_keys", primary_keys)
        if sync_mode is not None:
            pulumi.set(__self__, "sync_mode", sync_mode)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="cursorFields")
    def cursor_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cursor_fields")

    @cursor_fields.setter
    def cursor_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cursor_fields", value)

    @property
    @pulumi.getter(name="primaryKeys")
    def primary_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[str]]]]]]:
        return pulumi.get(self, "primary_keys")

    @primary_keys.setter
    def primary_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[Sequence[pulumi.Input[str]]]]]]):
        pulumi.set(self, "primary_keys", value)

    @property
    @pulumi.getter(name="syncMode")
    def sync_mode(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "sync_mode")

    @sync_mode.setter
    def sync_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_mode", value)


@pulumi.input_type
class ConnectionScheduleArgs:
    def __init__(__self__, *,
                 schedule_type: pulumi.Input[str],
                 basic_timing: Optional[pulumi.Input[str]] = None,
                 cron_expression: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "schedule_type", schedule_type)
        if basic_timing is not None:
            pulumi.set(__self__, "basic_timing", basic_timing)
        if cron_expression is not None:
            pulumi.set(__self__, "cron_expression", cron_expression)

    @property
    @pulumi.getter(name="scheduleType")
    def schedule_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schedule_type")

    @schedule_type.setter
    def schedule_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "schedule_type", value)

    @property
    @pulumi.getter(name="basicTiming")
    def basic_timing(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "basic_timing")

    @basic_timing.setter
    def basic_timing(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "basic_timing", value)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cron_expression")

    @cron_expression.setter
    def cron_expression(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cron_expression", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationArgs:
    def __init__(__self__, *,
                 database: pulumi.Input[str],
                 destination_type: pulumi.Input[str],
                 host: pulumi.Input[str],
                 role: pulumi.Input[str],
                 schema: pulumi.Input[str],
                 username: pulumi.Input[str],
                 warehouse: pulumi.Input[str],
                 credentials: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsArgs']] = None,
                 jdbc_url_params: Optional[pulumi.Input[str]] = None,
                 raw_data_schema: Optional[pulumi.Input[str]] = None,
                 use1s1t_format: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "destination_type", destination_type)
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "schema", schema)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "warehouse", warehouse)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if jdbc_url_params is not None:
            pulumi.set(__self__, "jdbc_url_params", jdbc_url_params)
        if raw_data_schema is not None:
            pulumi.set(__self__, "raw_data_schema", raw_data_schema)
        if use1s1t_format is not None:
            pulumi.set(__self__, "use1s1t_format", use1s1t_format)

    @property
    @pulumi.getter
    def database(self) -> pulumi.Input[str]:
        return pulumi.get(self, "database")

    @database.setter
    def database(self, value: pulumi.Input[str]):
        pulumi.set(self, "database", value)

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "destination_type")

    @destination_type.setter
    def destination_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "destination_type", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def schema(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schema")

    @schema.setter
    def schema(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def warehouse(self) -> pulumi.Input[str]:
        return pulumi.get(self, "warehouse")

    @warehouse.setter
    def warehouse(self, value: pulumi.Input[str]):
        pulumi.set(self, "warehouse", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="jdbcUrlParams")
    def jdbc_url_params(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "jdbc_url_params")

    @jdbc_url_params.setter
    def jdbc_url_params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "jdbc_url_params", value)

    @property
    @pulumi.getter(name="rawDataSchema")
    def raw_data_schema(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "raw_data_schema")

    @raw_data_schema.setter
    def raw_data_schema(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "raw_data_schema", value)

    @property
    @pulumi.getter(name="use1s1tFormat")
    def use1s1t_format(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "use1s1t_format")

    @use1s1t_format.setter
    def use1s1t_format(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use1s1t_format", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 destination_snowflake_authorization_method_key_pair_authentication: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationArgs']] = None,
                 destination_snowflake_authorization_method_o_auth20: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Args']] = None,
                 destination_snowflake_authorization_method_username_and_password: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordArgs']] = None,
                 destination_snowflake_update_authorization_method_key_pair_authentication: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationArgs']] = None,
                 destination_snowflake_update_authorization_method_o_auth20: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Args']] = None,
                 destination_snowflake_update_authorization_method_username_and_password: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs']] = None):
        if destination_snowflake_authorization_method_key_pair_authentication is not None:
            pulumi.set(__self__, "destination_snowflake_authorization_method_key_pair_authentication", destination_snowflake_authorization_method_key_pair_authentication)
        if destination_snowflake_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "destination_snowflake_authorization_method_o_auth20", destination_snowflake_authorization_method_o_auth20)
        if destination_snowflake_authorization_method_username_and_password is not None:
            pulumi.set(__self__, "destination_snowflake_authorization_method_username_and_password", destination_snowflake_authorization_method_username_and_password)
        if destination_snowflake_update_authorization_method_key_pair_authentication is not None:
            pulumi.set(__self__, "destination_snowflake_update_authorization_method_key_pair_authentication", destination_snowflake_update_authorization_method_key_pair_authentication)
        if destination_snowflake_update_authorization_method_o_auth20 is not None:
            pulumi.set(__self__, "destination_snowflake_update_authorization_method_o_auth20", destination_snowflake_update_authorization_method_o_auth20)
        if destination_snowflake_update_authorization_method_username_and_password is not None:
            pulumi.set(__self__, "destination_snowflake_update_authorization_method_username_and_password", destination_snowflake_update_authorization_method_username_and_password)

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodKeyPairAuthentication")
    def destination_snowflake_authorization_method_key_pair_authentication(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationArgs']]:
        return pulumi.get(self, "destination_snowflake_authorization_method_key_pair_authentication")

    @destination_snowflake_authorization_method_key_pair_authentication.setter
    def destination_snowflake_authorization_method_key_pair_authentication(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationArgs']]):
        pulumi.set(self, "destination_snowflake_authorization_method_key_pair_authentication", value)

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodOAuth20")
    def destination_snowflake_authorization_method_o_auth20(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "destination_snowflake_authorization_method_o_auth20")

    @destination_snowflake_authorization_method_o_auth20.setter
    def destination_snowflake_authorization_method_o_auth20(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "destination_snowflake_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="destinationSnowflakeAuthorizationMethodUsernameAndPassword")
    def destination_snowflake_authorization_method_username_and_password(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordArgs']]:
        return pulumi.get(self, "destination_snowflake_authorization_method_username_and_password")

    @destination_snowflake_authorization_method_username_and_password.setter
    def destination_snowflake_authorization_method_username_and_password(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordArgs']]):
        pulumi.set(self, "destination_snowflake_authorization_method_username_and_password", value)

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodKeyPairAuthentication")
    def destination_snowflake_update_authorization_method_key_pair_authentication(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationArgs']]:
        return pulumi.get(self, "destination_snowflake_update_authorization_method_key_pair_authentication")

    @destination_snowflake_update_authorization_method_key_pair_authentication.setter
    def destination_snowflake_update_authorization_method_key_pair_authentication(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationArgs']]):
        pulumi.set(self, "destination_snowflake_update_authorization_method_key_pair_authentication", value)

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodOAuth20")
    def destination_snowflake_update_authorization_method_o_auth20(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Args']]:
        return pulumi.get(self, "destination_snowflake_update_authorization_method_o_auth20")

    @destination_snowflake_update_authorization_method_o_auth20.setter
    def destination_snowflake_update_authorization_method_o_auth20(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Args']]):
        pulumi.set(self, "destination_snowflake_update_authorization_method_o_auth20", value)

    @property
    @pulumi.getter(name="destinationSnowflakeUpdateAuthorizationMethodUsernameAndPassword")
    def destination_snowflake_update_authorization_method_username_and_password(self) -> Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs']]:
        return pulumi.get(self, "destination_snowflake_update_authorization_method_username_and_password")

    @destination_snowflake_update_authorization_method_username_and_password.setter
    def destination_snowflake_update_authorization_method_username_and_password(self, value: Optional[pulumi.Input['DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs']]):
        pulumi.set(self, "destination_snowflake_update_authorization_method_username_and_password", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodKeyPairAuthenticationArgs:
    def __init__(__self__, *,
                 private_key: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 private_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "private_key", private_key)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if private_key_password is not None:
            pulumi.set(__self__, "private_key_password", private_key_password)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key_password")

    @private_key_password.setter
    def private_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_password", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeAuthorizationMethodUsernameAndPasswordArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodKeyPairAuthenticationArgs:
    def __init__(__self__, *,
                 private_key: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 private_key_password: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "private_key", private_key)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if private_key_password is not None:
            pulumi.set(__self__, "private_key_password", private_key_password)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="privateKeyPassword")
    def private_key_password(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "private_key_password")

    @private_key_password.setter
    def private_key_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private_key_password", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodOAuth20Args:
    def __init__(__self__, *,
                 access_token: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "access_token", access_token)
        pulumi.set(__self__, "refresh_token", refresh_token)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)


@pulumi.input_type
class DestinationSnowflakeConfigurationCredentialsDestinationSnowflakeUpdateAuthorizationMethodUsernameAndPasswordArgs:
    def __init__(__self__, *,
                 password: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "password", password)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)


@pulumi.input_type
class SourceMixpanelConfigurationArgs:
    def __init__(__self__, *,
                 attribution_window: Optional[pulumi.Input[int]] = None,
                 credentials: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsArgs']] = None,
                 date_window_size: Optional[pulumi.Input[int]] = None,
                 end_date: Optional[pulumi.Input[str]] = None,
                 project_id: Optional[pulumi.Input[int]] = None,
                 project_timezone: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 select_properties_by_default: Optional[pulumi.Input[bool]] = None,
                 source_type: Optional[pulumi.Input[str]] = None,
                 start_date: Optional[pulumi.Input[str]] = None):
        if attribution_window is not None:
            pulumi.set(__self__, "attribution_window", attribution_window)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if date_window_size is not None:
            pulumi.set(__self__, "date_window_size", date_window_size)
        if end_date is not None:
            pulumi.set(__self__, "end_date", end_date)
        if project_id is not None:
            pulumi.set(__self__, "project_id", project_id)
        if project_timezone is not None:
            pulumi.set(__self__, "project_timezone", project_timezone)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if select_properties_by_default is not None:
            pulumi.set(__self__, "select_properties_by_default", select_properties_by_default)
        if source_type is not None:
            pulumi.set(__self__, "source_type", source_type)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)

    @property
    @pulumi.getter(name="attributionWindow")
    def attribution_window(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "attribution_window")

    @attribution_window.setter
    def attribution_window(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "attribution_window", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsArgs']]:
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsArgs']]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="dateWindowSize")
    def date_window_size(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "date_window_size")

    @date_window_size.setter
    def date_window_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "date_window_size", value)

    @property
    @pulumi.getter(name="endDate")
    def end_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "end_date")

    @end_date.setter
    def end_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "end_date", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="projectTimezone")
    def project_timezone(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "project_timezone")

    @project_timezone.setter
    def project_timezone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_timezone", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="selectPropertiesByDefault")
    def select_properties_by_default(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "select_properties_by_default")

    @select_properties_by_default.setter
    def select_properties_by_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "select_properties_by_default", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)


@pulumi.input_type
class SourceMixpanelConfigurationCredentialsArgs:
    def __init__(__self__, *,
                 source_mixpanel_authentication_wildcard_project_secret: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretArgs']] = None,
                 source_mixpanel_authentication_wildcard_service_account: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountArgs']] = None,
                 source_mixpanel_update_authentication_wildcard_project_secret: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretArgs']] = None,
                 source_mixpanel_update_authentication_wildcard_service_account: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountArgs']] = None):
        if source_mixpanel_authentication_wildcard_project_secret is not None:
            pulumi.set(__self__, "source_mixpanel_authentication_wildcard_project_secret", source_mixpanel_authentication_wildcard_project_secret)
        if source_mixpanel_authentication_wildcard_service_account is not None:
            pulumi.set(__self__, "source_mixpanel_authentication_wildcard_service_account", source_mixpanel_authentication_wildcard_service_account)
        if source_mixpanel_update_authentication_wildcard_project_secret is not None:
            pulumi.set(__self__, "source_mixpanel_update_authentication_wildcard_project_secret", source_mixpanel_update_authentication_wildcard_project_secret)
        if source_mixpanel_update_authentication_wildcard_service_account is not None:
            pulumi.set(__self__, "source_mixpanel_update_authentication_wildcard_service_account", source_mixpanel_update_authentication_wildcard_service_account)

    @property
    @pulumi.getter(name="sourceMixpanelAuthenticationWildcardProjectSecret")
    def source_mixpanel_authentication_wildcard_project_secret(self) -> Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretArgs']]:
        return pulumi.get(self, "source_mixpanel_authentication_wildcard_project_secret")

    @source_mixpanel_authentication_wildcard_project_secret.setter
    def source_mixpanel_authentication_wildcard_project_secret(self, value: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretArgs']]):
        pulumi.set(self, "source_mixpanel_authentication_wildcard_project_secret", value)

    @property
    @pulumi.getter(name="sourceMixpanelAuthenticationWildcardServiceAccount")
    def source_mixpanel_authentication_wildcard_service_account(self) -> Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountArgs']]:
        return pulumi.get(self, "source_mixpanel_authentication_wildcard_service_account")

    @source_mixpanel_authentication_wildcard_service_account.setter
    def source_mixpanel_authentication_wildcard_service_account(self, value: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountArgs']]):
        pulumi.set(self, "source_mixpanel_authentication_wildcard_service_account", value)

    @property
    @pulumi.getter(name="sourceMixpanelUpdateAuthenticationWildcardProjectSecret")
    def source_mixpanel_update_authentication_wildcard_project_secret(self) -> Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretArgs']]:
        return pulumi.get(self, "source_mixpanel_update_authentication_wildcard_project_secret")

    @source_mixpanel_update_authentication_wildcard_project_secret.setter
    def source_mixpanel_update_authentication_wildcard_project_secret(self, value: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretArgs']]):
        pulumi.set(self, "source_mixpanel_update_authentication_wildcard_project_secret", value)

    @property
    @pulumi.getter(name="sourceMixpanelUpdateAuthenticationWildcardServiceAccount")
    def source_mixpanel_update_authentication_wildcard_service_account(self) -> Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountArgs']]:
        return pulumi.get(self, "source_mixpanel_update_authentication_wildcard_service_account")

    @source_mixpanel_update_authentication_wildcard_service_account.setter
    def source_mixpanel_update_authentication_wildcard_service_account(self, value: Optional[pulumi.Input['SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountArgs']]):
        pulumi.set(self, "source_mixpanel_update_authentication_wildcard_service_account", value)


@pulumi.input_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardProjectSecretArgs:
    def __init__(__self__, *,
                 api_secret: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_secret", api_secret)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_secret")

    @api_secret.setter
    def api_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_secret", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelAuthenticationWildcardServiceAccountArgs:
    def __init__(__self__, *,
                 secret: pulumi.Input[str],
                 username: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "username", username)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardProjectSecretArgs:
    def __init__(__self__, *,
                 api_secret: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "api_secret", api_secret)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter(name="apiSecret")
    def api_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "api_secret")

    @api_secret.setter
    def api_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "api_secret", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceMixpanelConfigurationCredentialsSourceMixpanelUpdateAuthenticationWildcardServiceAccountArgs:
    def __init__(__self__, *,
                 secret: pulumi.Input[str],
                 username: pulumi.Input[str],
                 option_title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "secret", secret)
        pulumi.set(__self__, "username", username)
        if option_title is not None:
            pulumi.set(__self__, "option_title", option_title)

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter(name="optionTitle")
    def option_title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "option_title")

    @option_title.setter
    def option_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "option_title", value)


@pulumi.input_type
class SourceSalesforceConfigurationArgs:
    def __init__(__self__, *,
                 client_id: pulumi.Input[str],
                 client_secret: pulumi.Input[str],
                 refresh_token: pulumi.Input[str],
                 source_type: pulumi.Input[str],
                 auth_type: Optional[pulumi.Input[str]] = None,
                 force_use_bulk_api: Optional[pulumi.Input[bool]] = None,
                 is_sandbox: Optional[pulumi.Input[bool]] = None,
                 start_date: Optional[pulumi.Input[str]] = None,
                 streams_criterias: Optional[pulumi.Input[Sequence[pulumi.Input['SourceSalesforceConfigurationStreamsCriteriaArgs']]]] = None):
        pulumi.set(__self__, "client_id", client_id)
        pulumi.set(__self__, "client_secret", client_secret)
        pulumi.set(__self__, "refresh_token", refresh_token)
        pulumi.set(__self__, "source_type", source_type)
        if auth_type is not None:
            pulumi.set(__self__, "auth_type", auth_type)
        if force_use_bulk_api is not None:
            pulumi.set(__self__, "force_use_bulk_api", force_use_bulk_api)
        if is_sandbox is not None:
            pulumi.set(__self__, "is_sandbox", is_sandbox)
        if start_date is not None:
            pulumi.set(__self__, "start_date", start_date)
        if streams_criterias is not None:
            pulumi.set(__self__, "streams_criterias", streams_criterias)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Input[str]:
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: pulumi.Input[str]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="refreshToken")
    def refresh_token(self) -> pulumi.Input[str]:
        return pulumi.get(self, "refresh_token")

    @refresh_token.setter
    def refresh_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "refresh_token", value)

    @property
    @pulumi.getter(name="sourceType")
    def source_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "source_type")

    @source_type.setter
    def source_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "source_type", value)

    @property
    @pulumi.getter(name="authType")
    def auth_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "auth_type")

    @auth_type.setter
    def auth_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auth_type", value)

    @property
    @pulumi.getter(name="forceUseBulkApi")
    def force_use_bulk_api(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "force_use_bulk_api")

    @force_use_bulk_api.setter
    def force_use_bulk_api(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_use_bulk_api", value)

    @property
    @pulumi.getter(name="isSandbox")
    def is_sandbox(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_sandbox")

    @is_sandbox.setter
    def is_sandbox(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_sandbox", value)

    @property
    @pulumi.getter(name="startDate")
    def start_date(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "start_date")

    @start_date.setter
    def start_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "start_date", value)

    @property
    @pulumi.getter(name="streamsCriterias")
    def streams_criterias(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['SourceSalesforceConfigurationStreamsCriteriaArgs']]]]:
        return pulumi.get(self, "streams_criterias")

    @streams_criterias.setter
    def streams_criterias(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['SourceSalesforceConfigurationStreamsCriteriaArgs']]]]):
        pulumi.set(self, "streams_criterias", value)


@pulumi.input_type
class SourceSalesforceConfigurationStreamsCriteriaArgs:
    def __init__(__self__, *,
                 criteria: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "criteria", criteria)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def criteria(self) -> pulumi.Input[str]:
        return pulumi.get(self, "criteria")

    @criteria.setter
    def criteria(self, value: pulumi.Input[str]):
        pulumi.set(self, "criteria", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


